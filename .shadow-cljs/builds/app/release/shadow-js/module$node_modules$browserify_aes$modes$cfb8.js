["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/browserify-aes/modes/cfb8.js"],"~:js","shadow$provide[186]=function(S,A,V,q){var F=A(111).Buffer;q.encrypt=function(G,r,y){for(var e=r.length,u=F.allocUnsafe(e),p=-1;++p<e;){var n=p,l=G,h=r[p],k=y,t=l._cipher.encryptBlock(l._prev)[0]^h;l._prev=F.concat([l._prev.slice(1),F.from([k?h:t])]);u[n]=t}return u}}","~:source","shadow$provide[186] = function(global,require,module,exports) {\nvar Buffer = require('safe-buffer').Buffer\n\nfunction encryptByte (self, byteParam, decrypt) {\n  var pad = self._cipher.encryptBlock(self._prev)\n  var out = pad[0] ^ byteParam\n\n  self._prev = Buffer.concat([\n    self._prev.slice(1),\n    Buffer.from([decrypt ? byteParam : out])\n  ])\n\n  return out\n}\n\nexports.encrypt = function (self, chunk, decrypt) {\n  var len = chunk.length\n  var out = Buffer.allocUnsafe(len)\n  var i = -1\n\n  while (++i < len) {\n    out[i] = encryptByte(self, chunk[i], decrypt)\n  }\n\n  return out\n}\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$safe_buffer$index"]],"~:properties",["^5",["encrypt","_prev"]],"~:compiled-at",1695041440824,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$browserify_aes$modes$cfb8.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAC9D,IAAIC,EAASH,CAAA,CAAQ,GAAR,CAAuBG,CAAAA,MAcpCD,EAAQE,CAAAA,OAAR,CAAkBC,QAAS,CAACC,CAAD,CAAOC,CAAP,CAAcC,CAAd,CAAuB,CAKhD,IAJA,IAAIC,EAAMF,CAAMG,CAAAA,MAAhB,CACIC,EAAMR,CAAOS,CAAAA,WAAP,CAAmBH,CAAnB,CADV,CAEII,EAAI,CAAC,CAET,CAAO,EAAEA,CAAT,CAAaJ,CAAb,CAAA,CAAkB,CACZI,IAAAA,EAAAA,CAAAA,CAAiBP,EAAAA,CAAjBO,CAAuB,EAAAN,CAAA,CAAMM,CAAN,CAAvBA,CAAiCL,EAAAA,CAAjCK,CAhBFF,EADML,CAAKQ,CAAAA,OAAQC,CAAAA,YAAbC,CAA0BV,CAAKW,CAAAA,KAA/BD,CACA,CAAI,CAAJ,CAANL,CAAeO,CAEnBZ,EAAKW,CAAAA,KAAL,CAAad,CAAOgB,CAAAA,MAAP,CAAc,CACzBb,CAAKW,CAAAA,KAAMG,CAAAA,KAAX,CAAiB,CAAjB,CADyB,CAEzBjB,CAAOkB,CAAAA,IAAP,CAAY,CAACb,CAAA,CAAUU,CAAV,CAAsBP,CAAvB,CAAZ,CAFyB,CAAd,CAcXA,EAAA,CAAIE,CAAJ,CAAA,CATKF,CAQW,CAIlB,MAAOA,EATyC,CAfY;\",\n\"sources\":[\"node_modules/browserify-aes/modes/cfb8.js\"],\n\"sourcesContent\":[\"shadow$provide[186] = function(global,require,module,exports) {\\nvar Buffer = require('safe-buffer').Buffer\\n\\nfunction encryptByte (self, byteParam, decrypt) {\\n  var pad = self._cipher.encryptBlock(self._prev)\\n  var out = pad[0] ^ byteParam\\n\\n  self._prev = Buffer.concat([\\n    self._prev.slice(1),\\n    Buffer.from([decrypt ? byteParam : out])\\n  ])\\n\\n  return out\\n}\\n\\nexports.encrypt = function (self, chunk, decrypt) {\\n  var len = chunk.length\\n  var out = Buffer.allocUnsafe(len)\\n  var i = -1\\n\\n  while (++i < len) {\\n    out[i] = encryptByte(self, chunk[i], decrypt)\\n  }\\n\\n  return out\\n}\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Buffer\",\"encrypt\",\"exports.encrypt\",\"self\",\"chunk\",\"decrypt\",\"len\",\"length\",\"out\",\"allocUnsafe\",\"i\",\"_cipher\",\"encryptBlock\",\"pad\",\"_prev\",\"byteParam\",\"concat\",\"slice\",\"from\"]\n}\n"]