["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/elliptic/lib/elliptic/curve/edwards.js"],"~:js","shadow$provide[79]=function(S,A,V,q){function F(u){this.extended=this.mOneA=(this.twisted=1!==(u.a|0))&&-1===(u.a|0);y.call(this,\"edwards\",u);this.a=(new r(u.a,16)).umod(this.red.m);this.a=this.a.toRed(this.red);this.c=(new r(u.c,16)).toRed(this.red);this.c2=this.c.redSqr();this.d=(new r(u.d,16)).toRed(this.red);this.dd=this.d.redAdd(this.d);e(!this.twisted||0===this.c.fromRed().cmpn(1));this.oneC=1===(u.c|0)}function G(u,p,n,l,h){y.BasePoint.call(this,u,\"projective\");null===p&&null===n&&null===l?\n(this.x=this.curve.zero,this.z=this.y=this.curve.one,this.t=this.curve.zero,this.zOne=!0):(this.x=new r(p,16),this.y=new r(n,16),this.z=l?new r(l,16):this.curve.one,this.t=h&&new r(h,16),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)),this.t&&!this.t.red&&(this.t=this.t.toRed(this.curve.red)),this.zOne=this.z===this.curve.one,this.curve.extended&&!this.t&&(this.t=this.x.redMul(this.y),this.zOne||\n(this.t=this.t.redMul(this.z.redInvm()))))}S=A(73);var r=A(70);q=A(76);var y=A(75),e=S.assert;q(F,y);V.exports=F;F.prototype._mulA=function(u){return this.mOneA?u.redNeg():this.a.redMul(u)};F.prototype._mulC=function(u){return this.oneC?u:this.c.redMul(u)};F.prototype.jpoint=function(u,p,n,l){return this.point(u,p,n,l)};F.prototype.pointFromX=function(u,p){u=new r(u,16);u.red||(u=u.toRed(this.red));var n=u.redSqr(),l=this.c2.redSub(this.a.redMul(n));n=this.one.redSub(this.c2.redMul(this.d).redMul(n));\nn=l.redMul(n.redInvm());l=n.redSqrt();if(0!==l.redSqr().redSub(n).cmp(this.zero))throw Error(\"invalid point\");n=l.fromRed().isOdd();if(p&&!n||!p&&n)l=l.redNeg();return this.point(u,l)};F.prototype.pointFromY=function(u,p){u=new r(u,16);u.red||(u=u.toRed(this.red));var n=u.redSqr(),l=n.redSub(this.c2);n=n.redMul(this.d).redMul(this.c2).redSub(this.a);l=l.redMul(n.redInvm());if(0===l.cmp(this.zero)){if(p)throw Error(\"invalid point\");return this.point(this.zero,u)}n=l.redSqrt();if(0!==n.redSqr().redSub(l).cmp(this.zero))throw Error(\"invalid point\");\nn.fromRed().isOdd()!==p&&(n=n.redNeg());return this.point(n,u)};F.prototype.validate=function(u){if(u.isInfinity())return!0;u.normalize();var p=u.x.redSqr(),n=u.y.redSqr();u=p.redMul(this.a).redAdd(n);p=this.c2.redMul(this.one.redAdd(this.d.redMul(p).redMul(n)));return 0===u.cmp(p)};q(G,y.BasePoint);F.prototype.pointFromJSON=function(u){return G.fromJSON(this,u)};F.prototype.point=function(u,p,n,l){return new G(this,u,p,n,l)};G.fromJSON=function(u,p){return new G(u,p[0],p[1],p[2])};G.prototype.inspect=\nfunction(){return this.isInfinity()?\"\\x3cEC Point Infinity\\x3e\":\"\\x3cEC Point x: \"+this.x.fromRed().toString(16,2)+\" y: \"+this.y.fromRed().toString(16,2)+\" z: \"+this.z.fromRed().toString(16,2)+\"\\x3e\"};G.prototype.isInfinity=function(){return 0===this.x.cmpn(0)&&(0===this.y.cmp(this.z)||this.zOne&&0===this.y.cmp(this.curve.c))};G.prototype._extDbl=function(){var u=this.x.redSqr(),p=this.y.redSqr(),n=this.z.redSqr();n=n.redIAdd(n);var l=this.curve._mulA(u),h=this.x.redAdd(this.y).redSqr().redISub(u).redISub(p);\nu=l.redAdd(p);n=u.redSub(n);var k=l.redSub(p);p=h.redMul(n);l=u.redMul(k);h=h.redMul(k);u=n.redMul(u);return this.curve.point(p,l,u,h)};G.prototype._projDbl=function(){var u=this.x.redAdd(this.y).redSqr(),p=this.x.redSqr(),n=this.y.redSqr();if(this.curve.twisted){var l=this.curve._mulA(p);var h=l.redAdd(n);if(this.zOne)u=u.redSub(p).redSub(n).redMul(h.redSub(this.curve.two)),p=h.redMul(l.redSub(n)),l=h.redSqr().redSub(h).redSub(h);else{var k=this.z.redSqr();k=h.redSub(k).redISub(k);u=u.redSub(p).redISub(n).redMul(k);\np=h.redMul(l.redSub(n));l=h.redMul(k)}}else l=p.redAdd(n),k=this.curve._mulC(this.z).redSqr(),k=l.redSub(k).redSub(k),u=this.curve._mulC(u.redISub(l)).redMul(k),p=this.curve._mulC(l).redMul(p.redISub(n)),l=l.redMul(k);return this.curve.point(u,p,l)};G.prototype.dbl=function(){return this.isInfinity()?this:this.curve.extended?this._extDbl():this._projDbl()};G.prototype._extAdd=function(u){var p=this.y.redSub(this.x).redMul(u.y.redSub(u.x)),n=this.y.redAdd(this.x).redMul(u.y.redAdd(u.x)),l=this.t.redMul(this.curve.dd).redMul(u.t),\nh=this.z.redMul(u.z.redAdd(u.z)),k=n.redSub(p);u=h.redSub(l);l=h.redAdd(l);h=n.redAdd(p);p=k.redMul(u);n=l.redMul(h);k=k.redMul(h);u=u.redMul(l);return this.curve.point(p,n,u,k)};G.prototype._projAdd=function(u){var p=this.z.redMul(u.z),n=p.redSqr(),l=this.x.redMul(u.x),h=this.y.redMul(u.y),k=this.curve.d.redMul(l).redMul(h),t=n.redSub(k);n=n.redAdd(k);u=this.x.redAdd(this.y).redMul(u.x.redAdd(u.y)).redISub(l).redISub(h);u=p.redMul(t).redMul(u);this.curve.twisted?(p=p.redMul(n).redMul(h.redSub(this.curve._mulA(l))),\nt=t.redMul(n)):(p=p.redMul(n).redMul(h.redSub(l)),t=this.curve._mulC(t).redMul(n));return this.curve.point(u,p,t)};G.prototype.add=function(u){return this.isInfinity()?u:u.isInfinity()?this:this.curve.extended?this._extAdd(u):this._projAdd(u)};G.prototype.mul=function(u){return this._hasDoubles(u)?this.curve._fixedNafMul(this,u):this.curve._wnafMul(this,u)};G.prototype.mulAdd=function(u,p,n){return this.curve._wnafMulAdd(1,[this,p],[u,n],2,!1)};G.prototype.jmulAdd=function(u,p,n){return this.curve._wnafMulAdd(1,\n[this,p],[u,n],2,!0)};G.prototype.normalize=function(){if(this.zOne)return this;var u=this.z.redInvm();this.x=this.x.redMul(u);this.y=this.y.redMul(u);this.t&&(this.t=this.t.redMul(u));this.z=this.curve.one;this.zOne=!0;return this};G.prototype.neg=function(){return this.curve.point(this.x.redNeg(),this.y,this.z,this.t&&this.t.redNeg())};G.prototype.getX=function(){this.normalize();return this.x.fromRed()};G.prototype.getY=function(){this.normalize();return this.y.fromRed()};G.prototype.eq=function(u){return this===\nu||0===this.getX().cmp(u.getX())&&0===this.getY().cmp(u.getY())};G.prototype.eqXToP=function(u){var p=u.toRed(this.curve.red).redMul(this.z);if(0===this.x.cmp(p))return!0;u=u.clone();for(var n=this.curve.redN.redMul(this.z);;){u.iadd(this.curve.n);if(0<=u.cmp(this.curve.p))return!1;p.redIAdd(n);if(0===this.x.cmp(p))return!0}};G.prototype.toP=G.prototype.normalize;G.prototype.mixedAdd=G.prototype.add}","~:source","shadow$provide[79] = function(global,require,module,exports) {\n'use strict';\n\nvar utils = require('../utils');\nvar BN = require('bn.js');\nvar inherits = require('inherits');\nvar Base = require('./base');\n\nvar assert = utils.assert;\n\nfunction EdwardsCurve(conf) {\n  // NOTE: Important as we are creating point in Base.call()\n  this.twisted = (conf.a | 0) !== 1;\n  this.mOneA = this.twisted && (conf.a | 0) === -1;\n  this.extended = this.mOneA;\n\n  Base.call(this, 'edwards', conf);\n\n  this.a = new BN(conf.a, 16).umod(this.red.m);\n  this.a = this.a.toRed(this.red);\n  this.c = new BN(conf.c, 16).toRed(this.red);\n  this.c2 = this.c.redSqr();\n  this.d = new BN(conf.d, 16).toRed(this.red);\n  this.dd = this.d.redAdd(this.d);\n\n  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);\n  this.oneC = (conf.c | 0) === 1;\n}\ninherits(EdwardsCurve, Base);\nmodule.exports = EdwardsCurve;\n\nEdwardsCurve.prototype._mulA = function _mulA(num) {\n  if (this.mOneA)\n    return num.redNeg();\n  else\n    return this.a.redMul(num);\n};\n\nEdwardsCurve.prototype._mulC = function _mulC(num) {\n  if (this.oneC)\n    return num;\n  else\n    return this.c.redMul(num);\n};\n\n// Just for compatibility with Short curve\nEdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {\n  return this.point(x, y, z, t);\n};\n\nEdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {\n  x = new BN(x, 16);\n  if (!x.red)\n    x = x.toRed(this.red);\n\n  var x2 = x.redSqr();\n  var rhs = this.c2.redSub(this.a.redMul(x2));\n  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));\n\n  var y2 = rhs.redMul(lhs.redInvm());\n  var y = y2.redSqrt();\n  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)\n    throw new Error('invalid point');\n\n  var isOdd = y.fromRed().isOdd();\n  if (odd && !isOdd || !odd && isOdd)\n    y = y.redNeg();\n\n  return this.point(x, y);\n};\n\nEdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {\n  y = new BN(y, 16);\n  if (!y.red)\n    y = y.toRed(this.red);\n\n  // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)\n  var y2 = y.redSqr();\n  var lhs = y2.redSub(this.c2);\n  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);\n  var x2 = lhs.redMul(rhs.redInvm());\n\n  if (x2.cmp(this.zero) === 0) {\n    if (odd)\n      throw new Error('invalid point');\n    else\n      return this.point(this.zero, y);\n  }\n\n  var x = x2.redSqrt();\n  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)\n    throw new Error('invalid point');\n\n  if (x.fromRed().isOdd() !== odd)\n    x = x.redNeg();\n\n  return this.point(x, y);\n};\n\nEdwardsCurve.prototype.validate = function validate(point) {\n  if (point.isInfinity())\n    return true;\n\n  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)\n  point.normalize();\n\n  var x2 = point.x.redSqr();\n  var y2 = point.y.redSqr();\n  var lhs = x2.redMul(this.a).redAdd(y2);\n  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));\n\n  return lhs.cmp(rhs) === 0;\n};\n\nfunction Point(curve, x, y, z, t) {\n  Base.BasePoint.call(this, curve, 'projective');\n  if (x === null && y === null && z === null) {\n    this.x = this.curve.zero;\n    this.y = this.curve.one;\n    this.z = this.curve.one;\n    this.t = this.curve.zero;\n    this.zOne = true;\n  } else {\n    this.x = new BN(x, 16);\n    this.y = new BN(y, 16);\n    this.z = z ? new BN(z, 16) : this.curve.one;\n    this.t = t && new BN(t, 16);\n    if (!this.x.red)\n      this.x = this.x.toRed(this.curve.red);\n    if (!this.y.red)\n      this.y = this.y.toRed(this.curve.red);\n    if (!this.z.red)\n      this.z = this.z.toRed(this.curve.red);\n    if (this.t && !this.t.red)\n      this.t = this.t.toRed(this.curve.red);\n    this.zOne = this.z === this.curve.one;\n\n    // Use extended coordinates\n    if (this.curve.extended && !this.t) {\n      this.t = this.x.redMul(this.y);\n      if (!this.zOne)\n        this.t = this.t.redMul(this.z.redInvm());\n    }\n  }\n}\ninherits(Point, Base.BasePoint);\n\nEdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {\n  return Point.fromJSON(this, obj);\n};\n\nEdwardsCurve.prototype.point = function point(x, y, z, t) {\n  return new Point(this, x, y, z, t);\n};\n\nPoint.fromJSON = function fromJSON(curve, obj) {\n  return new Point(curve, obj[0], obj[1], obj[2]);\n};\n\nPoint.prototype.inspect = function inspect() {\n  if (this.isInfinity())\n    return '<EC Point Infinity>';\n  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +\n      ' y: ' + this.y.fromRed().toString(16, 2) +\n      ' z: ' + this.z.fromRed().toString(16, 2) + '>';\n};\n\nPoint.prototype.isInfinity = function isInfinity() {\n  // XXX This code assumes that zero is always zero in red\n  return this.x.cmpn(0) === 0 &&\n    (this.y.cmp(this.z) === 0 ||\n    (this.zOne && this.y.cmp(this.curve.c) === 0));\n};\n\nPoint.prototype._extDbl = function _extDbl() {\n  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html\n  //     #doubling-dbl-2008-hwcd\n  // 4M + 4S\n\n  // A = X1^2\n  var a = this.x.redSqr();\n  // B = Y1^2\n  var b = this.y.redSqr();\n  // C = 2 * Z1^2\n  var c = this.z.redSqr();\n  c = c.redIAdd(c);\n  // D = a * A\n  var d = this.curve._mulA(a);\n  // E = (X1 + Y1)^2 - A - B\n  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);\n  // G = D + B\n  var g = d.redAdd(b);\n  // F = G - C\n  var f = g.redSub(c);\n  // H = D - B\n  var h = d.redSub(b);\n  // X3 = E * F\n  var nx = e.redMul(f);\n  // Y3 = G * H\n  var ny = g.redMul(h);\n  // T3 = E * H\n  var nt = e.redMul(h);\n  // Z3 = F * G\n  var nz = f.redMul(g);\n  return this.curve.point(nx, ny, nz, nt);\n};\n\nPoint.prototype._projDbl = function _projDbl() {\n  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html\n  //     #doubling-dbl-2008-bbjlp\n  //     #doubling-dbl-2007-bl\n  // and others\n  // Generally 3M + 4S or 2M + 4S\n\n  // B = (X1 + Y1)^2\n  var b = this.x.redAdd(this.y).redSqr();\n  // C = X1^2\n  var c = this.x.redSqr();\n  // D = Y1^2\n  var d = this.y.redSqr();\n\n  var nx;\n  var ny;\n  var nz;\n  var e;\n  var h;\n  var j;\n  if (this.curve.twisted) {\n    // E = a * C\n    e = this.curve._mulA(c);\n    // F = E + D\n    var f = e.redAdd(d);\n    if (this.zOne) {\n      // X3 = (B - C - D) * (F - 2)\n      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));\n      // Y3 = F * (E - D)\n      ny = f.redMul(e.redSub(d));\n      // Z3 = F^2 - 2 * F\n      nz = f.redSqr().redSub(f).redSub(f);\n    } else {\n      // H = Z1^2\n      h = this.z.redSqr();\n      // J = F - 2 * H\n      j = f.redSub(h).redISub(h);\n      // X3 = (B-C-D)*J\n      nx = b.redSub(c).redISub(d).redMul(j);\n      // Y3 = F * (E - D)\n      ny = f.redMul(e.redSub(d));\n      // Z3 = F * J\n      nz = f.redMul(j);\n    }\n  } else {\n    // E = C + D\n    e = c.redAdd(d);\n    // H = (c * Z1)^2\n    h = this.curve._mulC(this.z).redSqr();\n    // J = E - 2 * H\n    j = e.redSub(h).redSub(h);\n    // X3 = c * (B - E) * J\n    nx = this.curve._mulC(b.redISub(e)).redMul(j);\n    // Y3 = c * E * (C - D)\n    ny = this.curve._mulC(e).redMul(c.redISub(d));\n    // Z3 = E * J\n    nz = e.redMul(j);\n  }\n  return this.curve.point(nx, ny, nz);\n};\n\nPoint.prototype.dbl = function dbl() {\n  if (this.isInfinity())\n    return this;\n\n  // Double in extended coordinates\n  if (this.curve.extended)\n    return this._extDbl();\n  else\n    return this._projDbl();\n};\n\nPoint.prototype._extAdd = function _extAdd(p) {\n  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html\n  //     #addition-add-2008-hwcd-3\n  // 8M\n\n  // A = (Y1 - X1) * (Y2 - X2)\n  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));\n  // B = (Y1 + X1) * (Y2 + X2)\n  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));\n  // C = T1 * k * T2\n  var c = this.t.redMul(this.curve.dd).redMul(p.t);\n  // D = Z1 * 2 * Z2\n  var d = this.z.redMul(p.z.redAdd(p.z));\n  // E = B - A\n  var e = b.redSub(a);\n  // F = D - C\n  var f = d.redSub(c);\n  // G = D + C\n  var g = d.redAdd(c);\n  // H = B + A\n  var h = b.redAdd(a);\n  // X3 = E * F\n  var nx = e.redMul(f);\n  // Y3 = G * H\n  var ny = g.redMul(h);\n  // T3 = E * H\n  var nt = e.redMul(h);\n  // Z3 = F * G\n  var nz = f.redMul(g);\n  return this.curve.point(nx, ny, nz, nt);\n};\n\nPoint.prototype._projAdd = function _projAdd(p) {\n  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html\n  //     #addition-add-2008-bbjlp\n  //     #addition-add-2007-bl\n  // 10M + 1S\n\n  // A = Z1 * Z2\n  var a = this.z.redMul(p.z);\n  // B = A^2\n  var b = a.redSqr();\n  // C = X1 * X2\n  var c = this.x.redMul(p.x);\n  // D = Y1 * Y2\n  var d = this.y.redMul(p.y);\n  // E = d * C * D\n  var e = this.curve.d.redMul(c).redMul(d);\n  // F = B - E\n  var f = b.redSub(e);\n  // G = B + E\n  var g = b.redAdd(e);\n  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)\n  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);\n  var nx = a.redMul(f).redMul(tmp);\n  var ny;\n  var nz;\n  if (this.curve.twisted) {\n    // Y3 = A * G * (D - a * C)\n    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));\n    // Z3 = F * G\n    nz = f.redMul(g);\n  } else {\n    // Y3 = A * G * (D - C)\n    ny = a.redMul(g).redMul(d.redSub(c));\n    // Z3 = c * F * G\n    nz = this.curve._mulC(f).redMul(g);\n  }\n  return this.curve.point(nx, ny, nz);\n};\n\nPoint.prototype.add = function add(p) {\n  if (this.isInfinity())\n    return p;\n  if (p.isInfinity())\n    return this;\n\n  if (this.curve.extended)\n    return this._extAdd(p);\n  else\n    return this._projAdd(p);\n};\n\nPoint.prototype.mul = function mul(k) {\n  if (this._hasDoubles(k))\n    return this.curve._fixedNafMul(this, k);\n  else\n    return this.curve._wnafMul(this, k);\n};\n\nPoint.prototype.mulAdd = function mulAdd(k1, p, k2) {\n  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);\n};\n\nPoint.prototype.jmulAdd = function jmulAdd(k1, p, k2) {\n  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);\n};\n\nPoint.prototype.normalize = function normalize() {\n  if (this.zOne)\n    return this;\n\n  // Normalize coordinates\n  var zi = this.z.redInvm();\n  this.x = this.x.redMul(zi);\n  this.y = this.y.redMul(zi);\n  if (this.t)\n    this.t = this.t.redMul(zi);\n  this.z = this.curve.one;\n  this.zOne = true;\n  return this;\n};\n\nPoint.prototype.neg = function neg() {\n  return this.curve.point(this.x.redNeg(),\n    this.y,\n    this.z,\n    this.t && this.t.redNeg());\n};\n\nPoint.prototype.getX = function getX() {\n  this.normalize();\n  return this.x.fromRed();\n};\n\nPoint.prototype.getY = function getY() {\n  this.normalize();\n  return this.y.fromRed();\n};\n\nPoint.prototype.eq = function eq(other) {\n  return this === other ||\n         this.getX().cmp(other.getX()) === 0 &&\n         this.getY().cmp(other.getY()) === 0;\n};\n\nPoint.prototype.eqXToP = function eqXToP(x) {\n  var rx = x.toRed(this.curve.red).redMul(this.z);\n  if (this.x.cmp(rx) === 0)\n    return true;\n\n  var xc = x.clone();\n  var t = this.curve.redN.redMul(this.z);\n  for (;;) {\n    xc.iadd(this.curve.n);\n    if (xc.cmp(this.curve.p) >= 0)\n      return false;\n\n    rx.redIAdd(t);\n    if (this.x.cmp(rx) === 0)\n      return true;\n  }\n};\n\n// Compatibility with BaseCurve\nPoint.prototype.toP = Point.prototype.normalize;\nPoint.prototype.mixedAdd = Point.prototype.add;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$elliptic$node_modules$bn_js$lib$bn","~$module$node_modules$inherits$inherits_browser","~$module$node_modules$elliptic$lib$elliptic$utils","~$module$node_modules$elliptic$lib$elliptic$curve$base"]],"~:properties",["^5",["d","z","mOneA","eqXToP","normalize","fromJSON","oneC","mixedAdd","extended","eq","validate","x","_mulA","inspect","toP","pointFromY","mulAdd","getY","_projDbl","jmulAdd","dd","pointFromX","neg","a","c2","_extDbl","getX","dbl","_projAdd","t","mul","jpoint","y","twisted","isInfinity","_mulC","add","_extAdd","zOne","point","c","pointFromJSON"]],"~:compiled-at",1695041440744,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$elliptic$lib$elliptic$curve$edwards.js\",\n\"lineCount\":12,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/elliptic/lib/elliptic/curve/edwards.js\"],\n\"sourcesContent\":[\"shadow$provide[79] = function(global,require,module,exports) {\\n'use strict';\\n\\nvar utils = require('../utils');\\nvar BN = require('bn.js');\\nvar inherits = require('inherits');\\nvar Base = require('./base');\\n\\nvar assert = utils.assert;\\n\\nfunction EdwardsCurve(conf) {\\n  // NOTE: Important as we are creating point in Base.call()\\n  this.twisted = (conf.a | 0) !== 1;\\n  this.mOneA = this.twisted && (conf.a | 0) === -1;\\n  this.extended = this.mOneA;\\n\\n  Base.call(this, 'edwards', conf);\\n\\n  this.a = new BN(conf.a, 16).umod(this.red.m);\\n  this.a = this.a.toRed(this.red);\\n  this.c = new BN(conf.c, 16).toRed(this.red);\\n  this.c2 = this.c.redSqr();\\n  this.d = new BN(conf.d, 16).toRed(this.red);\\n  this.dd = this.d.redAdd(this.d);\\n\\n  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);\\n  this.oneC = (conf.c | 0) === 1;\\n}\\ninherits(EdwardsCurve, Base);\\nmodule.exports = EdwardsCurve;\\n\\nEdwardsCurve.prototype._mulA = function _mulA(num) {\\n  if (this.mOneA)\\n    return num.redNeg();\\n  else\\n    return this.a.redMul(num);\\n};\\n\\nEdwardsCurve.prototype._mulC = function _mulC(num) {\\n  if (this.oneC)\\n    return num;\\n  else\\n    return this.c.redMul(num);\\n};\\n\\n// Just for compatibility with Short curve\\nEdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {\\n  return this.point(x, y, z, t);\\n};\\n\\nEdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {\\n  x = new BN(x, 16);\\n  if (!x.red)\\n    x = x.toRed(this.red);\\n\\n  var x2 = x.redSqr();\\n  var rhs = this.c2.redSub(this.a.redMul(x2));\\n  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));\\n\\n  var y2 = rhs.redMul(lhs.redInvm());\\n  var y = y2.redSqrt();\\n  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)\\n    throw new Error('invalid point');\\n\\n  var isOdd = y.fromRed().isOdd();\\n  if (odd && !isOdd || !odd && isOdd)\\n    y = y.redNeg();\\n\\n  return this.point(x, y);\\n};\\n\\nEdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {\\n  y = new BN(y, 16);\\n  if (!y.red)\\n    y = y.toRed(this.red);\\n\\n  // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)\\n  var y2 = y.redSqr();\\n  var lhs = y2.redSub(this.c2);\\n  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);\\n  var x2 = lhs.redMul(rhs.redInvm());\\n\\n  if (x2.cmp(this.zero) === 0) {\\n    if (odd)\\n      throw new Error('invalid point');\\n    else\\n      return this.point(this.zero, y);\\n  }\\n\\n  var x = x2.redSqrt();\\n  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)\\n    throw new Error('invalid point');\\n\\n  if (x.fromRed().isOdd() !== odd)\\n    x = x.redNeg();\\n\\n  return this.point(x, y);\\n};\\n\\nEdwardsCurve.prototype.validate = function validate(point) {\\n  if (point.isInfinity())\\n    return true;\\n\\n  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)\\n  point.normalize();\\n\\n  var x2 = point.x.redSqr();\\n  var y2 = point.y.redSqr();\\n  var lhs = x2.redMul(this.a).redAdd(y2);\\n  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));\\n\\n  return lhs.cmp(rhs) === 0;\\n};\\n\\nfunction Point(curve, x, y, z, t) {\\n  Base.BasePoint.call(this, curve, 'projective');\\n  if (x === null && y === null && z === null) {\\n    this.x = this.curve.zero;\\n    this.y = this.curve.one;\\n    this.z = this.curve.one;\\n    this.t = this.curve.zero;\\n    this.zOne = true;\\n  } else {\\n    this.x = new BN(x, 16);\\n    this.y = new BN(y, 16);\\n    this.z = z ? new BN(z, 16) : this.curve.one;\\n    this.t = t && new BN(t, 16);\\n    if (!this.x.red)\\n      this.x = this.x.toRed(this.curve.red);\\n    if (!this.y.red)\\n      this.y = this.y.toRed(this.curve.red);\\n    if (!this.z.red)\\n      this.z = this.z.toRed(this.curve.red);\\n    if (this.t && !this.t.red)\\n      this.t = this.t.toRed(this.curve.red);\\n    this.zOne = this.z === this.curve.one;\\n\\n    // Use extended coordinates\\n    if (this.curve.extended && !this.t) {\\n      this.t = this.x.redMul(this.y);\\n      if (!this.zOne)\\n        this.t = this.t.redMul(this.z.redInvm());\\n    }\\n  }\\n}\\ninherits(Point, Base.BasePoint);\\n\\nEdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {\\n  return Point.fromJSON(this, obj);\\n};\\n\\nEdwardsCurve.prototype.point = function point(x, y, z, t) {\\n  return new Point(this, x, y, z, t);\\n};\\n\\nPoint.fromJSON = function fromJSON(curve, obj) {\\n  return new Point(curve, obj[0], obj[1], obj[2]);\\n};\\n\\nPoint.prototype.inspect = function inspect() {\\n  if (this.isInfinity())\\n    return '<EC Point Infinity>';\\n  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +\\n      ' y: ' + this.y.fromRed().toString(16, 2) +\\n      ' z: ' + this.z.fromRed().toString(16, 2) + '>';\\n};\\n\\nPoint.prototype.isInfinity = function isInfinity() {\\n  // XXX This code assumes that zero is always zero in red\\n  return this.x.cmpn(0) === 0 &&\\n    (this.y.cmp(this.z) === 0 ||\\n    (this.zOne && this.y.cmp(this.curve.c) === 0));\\n};\\n\\nPoint.prototype._extDbl = function _extDbl() {\\n  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html\\n  //     #doubling-dbl-2008-hwcd\\n  // 4M + 4S\\n\\n  // A = X1^2\\n  var a = this.x.redSqr();\\n  // B = Y1^2\\n  var b = this.y.redSqr();\\n  // C = 2 * Z1^2\\n  var c = this.z.redSqr();\\n  c = c.redIAdd(c);\\n  // D = a * A\\n  var d = this.curve._mulA(a);\\n  // E = (X1 + Y1)^2 - A - B\\n  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);\\n  // G = D + B\\n  var g = d.redAdd(b);\\n  // F = G - C\\n  var f = g.redSub(c);\\n  // H = D - B\\n  var h = d.redSub(b);\\n  // X3 = E * F\\n  var nx = e.redMul(f);\\n  // Y3 = G * H\\n  var ny = g.redMul(h);\\n  // T3 = E * H\\n  var nt = e.redMul(h);\\n  // Z3 = F * G\\n  var nz = f.redMul(g);\\n  return this.curve.point(nx, ny, nz, nt);\\n};\\n\\nPoint.prototype._projDbl = function _projDbl() {\\n  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html\\n  //     #doubling-dbl-2008-bbjlp\\n  //     #doubling-dbl-2007-bl\\n  // and others\\n  // Generally 3M + 4S or 2M + 4S\\n\\n  // B = (X1 + Y1)^2\\n  var b = this.x.redAdd(this.y).redSqr();\\n  // C = X1^2\\n  var c = this.x.redSqr();\\n  // D = Y1^2\\n  var d = this.y.redSqr();\\n\\n  var nx;\\n  var ny;\\n  var nz;\\n  var e;\\n  var h;\\n  var j;\\n  if (this.curve.twisted) {\\n    // E = a * C\\n    e = this.curve._mulA(c);\\n    // F = E + D\\n    var f = e.redAdd(d);\\n    if (this.zOne) {\\n      // X3 = (B - C - D) * (F - 2)\\n      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));\\n      // Y3 = F * (E - D)\\n      ny = f.redMul(e.redSub(d));\\n      // Z3 = F^2 - 2 * F\\n      nz = f.redSqr().redSub(f).redSub(f);\\n    } else {\\n      // H = Z1^2\\n      h = this.z.redSqr();\\n      // J = F - 2 * H\\n      j = f.redSub(h).redISub(h);\\n      // X3 = (B-C-D)*J\\n      nx = b.redSub(c).redISub(d).redMul(j);\\n      // Y3 = F * (E - D)\\n      ny = f.redMul(e.redSub(d));\\n      // Z3 = F * J\\n      nz = f.redMul(j);\\n    }\\n  } else {\\n    // E = C + D\\n    e = c.redAdd(d);\\n    // H = (c * Z1)^2\\n    h = this.curve._mulC(this.z).redSqr();\\n    // J = E - 2 * H\\n    j = e.redSub(h).redSub(h);\\n    // X3 = c * (B - E) * J\\n    nx = this.curve._mulC(b.redISub(e)).redMul(j);\\n    // Y3 = c * E * (C - D)\\n    ny = this.curve._mulC(e).redMul(c.redISub(d));\\n    // Z3 = E * J\\n    nz = e.redMul(j);\\n  }\\n  return this.curve.point(nx, ny, nz);\\n};\\n\\nPoint.prototype.dbl = function dbl() {\\n  if (this.isInfinity())\\n    return this;\\n\\n  // Double in extended coordinates\\n  if (this.curve.extended)\\n    return this._extDbl();\\n  else\\n    return this._projDbl();\\n};\\n\\nPoint.prototype._extAdd = function _extAdd(p) {\\n  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html\\n  //     #addition-add-2008-hwcd-3\\n  // 8M\\n\\n  // A = (Y1 - X1) * (Y2 - X2)\\n  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));\\n  // B = (Y1 + X1) * (Y2 + X2)\\n  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));\\n  // C = T1 * k * T2\\n  var c = this.t.redMul(this.curve.dd).redMul(p.t);\\n  // D = Z1 * 2 * Z2\\n  var d = this.z.redMul(p.z.redAdd(p.z));\\n  // E = B - A\\n  var e = b.redSub(a);\\n  // F = D - C\\n  var f = d.redSub(c);\\n  // G = D + C\\n  var g = d.redAdd(c);\\n  // H = B + A\\n  var h = b.redAdd(a);\\n  // X3 = E * F\\n  var nx = e.redMul(f);\\n  // Y3 = G * H\\n  var ny = g.redMul(h);\\n  // T3 = E * H\\n  var nt = e.redMul(h);\\n  // Z3 = F * G\\n  var nz = f.redMul(g);\\n  return this.curve.point(nx, ny, nz, nt);\\n};\\n\\nPoint.prototype._projAdd = function _projAdd(p) {\\n  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html\\n  //     #addition-add-2008-bbjlp\\n  //     #addition-add-2007-bl\\n  // 10M + 1S\\n\\n  // A = Z1 * Z2\\n  var a = this.z.redMul(p.z);\\n  // B = A^2\\n  var b = a.redSqr();\\n  // C = X1 * X2\\n  var c = this.x.redMul(p.x);\\n  // D = Y1 * Y2\\n  var d = this.y.redMul(p.y);\\n  // E = d * C * D\\n  var e = this.curve.d.redMul(c).redMul(d);\\n  // F = B - E\\n  var f = b.redSub(e);\\n  // G = B + E\\n  var g = b.redAdd(e);\\n  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)\\n  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);\\n  var nx = a.redMul(f).redMul(tmp);\\n  var ny;\\n  var nz;\\n  if (this.curve.twisted) {\\n    // Y3 = A * G * (D - a * C)\\n    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));\\n    // Z3 = F * G\\n    nz = f.redMul(g);\\n  } else {\\n    // Y3 = A * G * (D - C)\\n    ny = a.redMul(g).redMul(d.redSub(c));\\n    // Z3 = c * F * G\\n    nz = this.curve._mulC(f).redMul(g);\\n  }\\n  return this.curve.point(nx, ny, nz);\\n};\\n\\nPoint.prototype.add = function add(p) {\\n  if (this.isInfinity())\\n    return p;\\n  if (p.isInfinity())\\n    return this;\\n\\n  if (this.curve.extended)\\n    return this._extAdd(p);\\n  else\\n    return this._projAdd(p);\\n};\\n\\nPoint.prototype.mul = function mul(k) {\\n  if (this._hasDoubles(k))\\n    return this.curve._fixedNafMul(this, k);\\n  else\\n    return this.curve._wnafMul(this, k);\\n};\\n\\nPoint.prototype.mulAdd = function mulAdd(k1, p, k2) {\\n  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);\\n};\\n\\nPoint.prototype.jmulAdd = function jmulAdd(k1, p, k2) {\\n  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);\\n};\\n\\nPoint.prototype.normalize = function normalize() {\\n  if (this.zOne)\\n    return this;\\n\\n  // Normalize coordinates\\n  var zi = this.z.redInvm();\\n  this.x = this.x.redMul(zi);\\n  this.y = this.y.redMul(zi);\\n  if (this.t)\\n    this.t = this.t.redMul(zi);\\n  this.z = this.curve.one;\\n  this.zOne = true;\\n  return this;\\n};\\n\\nPoint.prototype.neg = function neg() {\\n  return this.curve.point(this.x.redNeg(),\\n    this.y,\\n    this.z,\\n    this.t && this.t.redNeg());\\n};\\n\\nPoint.prototype.getX = function getX() {\\n  this.normalize();\\n  return this.x.fromRed();\\n};\\n\\nPoint.prototype.getY = function getY() {\\n  this.normalize();\\n  return this.y.fromRed();\\n};\\n\\nPoint.prototype.eq = function eq(other) {\\n  return this === other ||\\n         this.getX().cmp(other.getX()) === 0 &&\\n         this.getY().cmp(other.getY()) === 0;\\n};\\n\\nPoint.prototype.eqXToP = function eqXToP(x) {\\n  var rx = x.toRed(this.curve.red).redMul(this.z);\\n  if (this.x.cmp(rx) === 0)\\n    return true;\\n\\n  var xc = x.clone();\\n  var t = this.curve.redN.redMul(this.z);\\n  for (;;) {\\n    xc.iadd(this.curve.n);\\n    if (xc.cmp(this.curve.p) >= 0)\\n      return false;\\n\\n    rx.redIAdd(t);\\n    if (this.x.cmp(rx) === 0)\\n      return true;\\n  }\\n};\\n\\n// Compatibility with BaseCurve\\nPoint.prototype.toP = Point.prototype.normalize;\\nPoint.prototype.mixedAdd = Point.prototype.add;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"EdwardsCurve\",\"conf\",\"extended\",\"mOneA\",\"twisted\",\"a\",\"Base\",\"call\",\"umod\",\"BN\",\"red\",\"m\",\"toRed\",\"c\",\"c2\",\"redSqr\",\"d\",\"dd\",\"redAdd\",\"assert\",\"fromRed\",\"cmpn\",\"oneC\",\"Point\",\"curve\",\"x\",\"y\",\"z\",\"t\",\"BasePoint\",\"zero\",\"one\",\"zOne\",\"redMul\",\"redInvm\",\"utils\",\"inherits\",\"prototype\",\"_mulA\",\"EdwardsCurve.prototype._mulA\",\"num\",\"redNeg\",\"_mulC\",\"EdwardsCurve.prototype._mulC\",\"jpoint\",\"EdwardsCurve.prototype.jpoint\",\"point\",\"pointFromX\",\"EdwardsCurve.prototype.pointFromX\",\"odd\",\"x2\",\"rhs\",\"redSub\",\"lhs\",\"y2\",\"redSqrt\",\"cmp\",\"Error\",\"isOdd\",\"pointFromY\",\"EdwardsCurve.prototype.pointFromY\",\"validate\",\"EdwardsCurve.prototype.validate\",\"isInfinity\",\"normalize\",\"pointFromJSON\",\"EdwardsCurve.prototype.pointFromJSON\",\"obj\",\"fromJSON\",\"EdwardsCurve.prototype.point\",\"Point.fromJSON\",\"inspect\",\"Point.prototype.inspect\",\"toString\",\"Point.prototype.isInfinity\",\"_extDbl\",\"Point.prototype._extDbl\",\"b\",\"redIAdd\",\"e\",\"redISub\",\"g\",\"f\",\"h\",\"nx\",\"ny\",\"nt\",\"nz\",\"_projDbl\",\"Point.prototype._projDbl\",\"two\",\"j\",\"dbl\",\"Point.prototype.dbl\",\"_extAdd\",\"Point.prototype._extAdd\",\"p\",\"_projAdd\",\"Point.prototype._projAdd\",\"tmp\",\"add\",\"Point.prototype.add\",\"mul\",\"Point.prototype.mul\",\"k\",\"_hasDoubles\",\"_fixedNafMul\",\"_wnafMul\",\"mulAdd\",\"Point.prototype.mulAdd\",\"k1\",\"k2\",\"_wnafMulAdd\",\"jmulAdd\",\"Point.prototype.jmulAdd\",\"Point.prototype.normalize\",\"zi\",\"neg\",\"Point.prototype.neg\",\"getX\",\"Point.prototype.getX\",\"getY\",\"Point.prototype.getY\",\"eq\",\"Point.prototype.eq\",\"other\",\"eqXToP\",\"Point.prototype.eqXToP\",\"rx\",\"xc\",\"clone\",\"redN\",\"iadd\",\"n\",\"toP\",\"mixedAdd\"]\n}\n"]