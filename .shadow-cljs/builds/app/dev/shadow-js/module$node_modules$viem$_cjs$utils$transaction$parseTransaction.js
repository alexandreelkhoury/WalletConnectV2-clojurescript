["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/viem/_cjs/utils/transaction/parseTransaction.js"],"~:js","shadow$provide.module$node_modules$viem$_cjs$utils$transaction$parseTransaction=function(global,require,module,exports){function toTransactionArray(serializedTransaction){return(0,fromRlp_js_1.fromRlp)(`0x${serializedTransaction.slice(4)}`,\"hex\")}function parseAccessList(accessList_){const accessList=[];for(let i=0;i<accessList_.length;i++){const [address,storageKeys]=accessList_[i];if(!(0,isAddress_js_1.isAddress)(address))throw new address_js_1.InvalidAddressError({address});accessList.push({address,\nstorageKeys:storageKeys.map(key=>(0,isHash_js_1.isHash)(key)?key:(0,trim_js_1.trim)(key))})}return accessList}function parseEIP155Signature(transactionArray){transactionArray=transactionArray.slice(-3);const v=\"0x\"===transactionArray[0]||0n===(0,fromHex_js_1.hexToBigInt)(transactionArray[0])?27n:28n;return{r:(0,pad_js_1.padHex)(transactionArray[1],{size:32}),s:(0,pad_js_1.padHex)(transactionArray[2],{size:32}),v,yParity:27n===v?0:1}}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.parseAccessList=\nexports.toTransactionArray=exports.parseTransaction=void 0;const address_js_1=require(\"module$node_modules$viem$_cjs$errors$address\"),transaction_js_1=require(\"module$node_modules$viem$_cjs$errors$transaction\"),isAddress_js_1=require(\"module$node_modules$viem$_cjs$utils$address$isAddress\"),isHex_js_1=require(\"module$node_modules$viem$_cjs$utils$data$isHex\"),pad_js_1=require(\"module$node_modules$viem$_cjs$utils$data$pad\"),trim_js_1=require(\"module$node_modules$viem$_cjs$utils$data$trim\"),fromHex_js_1=\nrequire(\"module$node_modules$viem$_cjs$utils$encoding$fromHex\"),fromRlp_js_1=require(\"module$node_modules$viem$_cjs$utils$encoding$fromRlp\"),isHash_js_1=require(\"module$node_modules$viem$_cjs$utils$hash$isHash\"),assertTransaction_js_1=require(\"module$node_modules$viem$_cjs$utils$transaction$assertTransaction\"),getSerializedTransactionType_js_1=require(\"module$node_modules$viem$_cjs$utils$transaction$getSerializedTransactionType\");exports.parseTransaction=function(serializedTransaction){var type=(0,getSerializedTransactionType_js_1.getSerializedTransactionType)(serializedTransaction);\nif(\"eip1559\"===type){type=toTransactionArray(serializedTransaction);const [chainId,nonce,maxPriorityFeePerGas,maxFeePerGas,gas,to,value,data,accessList,v,r,s]=type;if(9!==type.length&&12!==type.length)throw new transaction_js_1.InvalidSerializedTransactionError({attributes:{chainId,nonce,maxPriorityFeePerGas,maxFeePerGas,gas,to,value,data,accessList,...(9<type.length?{v,r,s}:{})},serializedTransaction,type:\"eip1559\"});serializedTransaction={chainId:(0,fromHex_js_1.hexToNumber)(chainId),type:\"eip1559\"};\n(0,isHex_js_1.isHex)(to)&&\"0x\"!==to&&(serializedTransaction.to=to);(0,isHex_js_1.isHex)(gas)&&\"0x\"!==gas&&(serializedTransaction.gas=(0,fromHex_js_1.hexToBigInt)(gas));(0,isHex_js_1.isHex)(data)&&\"0x\"!==data&&(serializedTransaction.data=data);(0,isHex_js_1.isHex)(nonce)&&\"0x\"!==nonce&&(serializedTransaction.nonce=(0,fromHex_js_1.hexToNumber)(nonce));(0,isHex_js_1.isHex)(value)&&\"0x\"!==value&&(serializedTransaction.value=(0,fromHex_js_1.hexToBigInt)(value));(0,isHex_js_1.isHex)(maxFeePerGas)&&\"0x\"!==\nmaxFeePerGas&&(serializedTransaction.maxFeePerGas=(0,fromHex_js_1.hexToBigInt)(maxFeePerGas));(0,isHex_js_1.isHex)(maxPriorityFeePerGas)&&\"0x\"!==maxPriorityFeePerGas&&(serializedTransaction.maxPriorityFeePerGas=(0,fromHex_js_1.hexToBigInt)(maxPriorityFeePerGas));0!==accessList.length&&\"0x\"!==accessList&&(serializedTransaction.accessList=parseAccessList(accessList));(0,assertTransaction_js_1.assertTransactionEIP1559)(serializedTransaction);return{...(12===type.length?parseEIP155Signature(type):void 0),\n...serializedTransaction}}if(\"eip2930\"===type){type=toTransactionArray(serializedTransaction);const [chainId,nonce,gasPrice,gas,to,value,data,accessList,v,r,s]=type;if(8!==type.length&&11!==type.length)throw new transaction_js_1.InvalidSerializedTransactionError({attributes:{chainId,nonce,gasPrice,gas,to,value,data,accessList,...(8<type.length?{v,r,s}:{})},serializedTransaction,type:\"eip2930\"});serializedTransaction={chainId:(0,fromHex_js_1.hexToNumber)(chainId),type:\"eip2930\"};(0,isHex_js_1.isHex)(to)&&\n\"0x\"!==to&&(serializedTransaction.to=to);(0,isHex_js_1.isHex)(gas)&&\"0x\"!==gas&&(serializedTransaction.gas=(0,fromHex_js_1.hexToBigInt)(gas));(0,isHex_js_1.isHex)(data)&&\"0x\"!==data&&(serializedTransaction.data=data);(0,isHex_js_1.isHex)(nonce)&&\"0x\"!==nonce&&(serializedTransaction.nonce=(0,fromHex_js_1.hexToNumber)(nonce));(0,isHex_js_1.isHex)(value)&&\"0x\"!==value&&(serializedTransaction.value=(0,fromHex_js_1.hexToBigInt)(value));(0,isHex_js_1.isHex)(gasPrice)&&\"0x\"!==gasPrice&&(serializedTransaction.gasPrice=\n(0,fromHex_js_1.hexToBigInt)(gasPrice));0!==accessList.length&&\"0x\"!==accessList&&(serializedTransaction.accessList=parseAccessList(accessList));(0,assertTransaction_js_1.assertTransactionEIP2930)(serializedTransaction);return{...(11===type.length?parseEIP155Signature(type):void 0),...serializedTransaction}}{type=(0,fromRlp_js_1.fromRlp)(serializedTransaction,\"hex\");const [nonce,gasPrice,gas,to,value,data,chainIdOrV_,r,s]=type;if(6!==type.length&&9!==type.length)throw new transaction_js_1.InvalidSerializedTransactionError({attributes:{nonce,\ngasPrice,gas,to,value,data,...(6<type.length?{v:chainIdOrV_,r,s}:{})},serializedTransaction,type:\"legacy\"});serializedTransaction={type:\"legacy\"};(0,isHex_js_1.isHex)(to)&&\"0x\"!==to&&(serializedTransaction.to=to);(0,isHex_js_1.isHex)(gas)&&\"0x\"!==gas&&(serializedTransaction.gas=(0,fromHex_js_1.hexToBigInt)(gas));(0,isHex_js_1.isHex)(data)&&\"0x\"!==data&&(serializedTransaction.data=data);(0,isHex_js_1.isHex)(nonce)&&\"0x\"!==nonce&&(serializedTransaction.nonce=(0,fromHex_js_1.hexToNumber)(nonce));(0,isHex_js_1.isHex)(value)&&\n\"0x\"!==value&&(serializedTransaction.value=(0,fromHex_js_1.hexToBigInt)(value));(0,isHex_js_1.isHex)(gasPrice)&&\"0x\"!==gasPrice&&(serializedTransaction.gasPrice=(0,fromHex_js_1.hexToBigInt)(gasPrice));(0,assertTransaction_js_1.assertTransactionLegacy)(serializedTransaction);if(6!==type.length)if(type=(0,isHex_js_1.isHex)(chainIdOrV_)&&\"0x\"!==chainIdOrV_?(0,fromHex_js_1.hexToBigInt)(chainIdOrV_):0n,\"0x\"===s&&\"0x\"===r)0<type&&(serializedTransaction.chainId=Number(type));else{var chainId$jscomp$0=Number((type-\n35n)/2n);if(0<chainId$jscomp$0)serializedTransaction.chainId=chainId$jscomp$0;else if(27n!==type&&28n!==type)throw new transaction_js_1.InvalidLegacyVError({v:type});serializedTransaction.v=type;serializedTransaction.s=s;serializedTransaction.r=r}}return serializedTransaction};exports.toTransactionArray=toTransactionArray;exports.parseAccessList=parseAccessList}","~:source","shadow$provide[\"module$node_modules$viem$_cjs$utils$transaction$parseTransaction\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseAccessList = exports.toTransactionArray = exports.parseTransaction = void 0;\nconst address_js_1 = require(\"../../errors/address.js\");\nconst transaction_js_1 = require(\"../../errors/transaction.js\");\nconst isAddress_js_1 = require(\"../address/isAddress.js\");\nconst isHex_js_1 = require(\"../data/isHex.js\");\nconst pad_js_1 = require(\"../data/pad.js\");\nconst trim_js_1 = require(\"../data/trim.js\");\nconst fromHex_js_1 = require(\"../encoding/fromHex.js\");\nconst fromRlp_js_1 = require(\"../encoding/fromRlp.js\");\nconst isHash_js_1 = require(\"../hash/isHash.js\");\nconst assertTransaction_js_1 = require(\"./assertTransaction.js\");\nconst getSerializedTransactionType_js_1 = require(\"./getSerializedTransactionType.js\");\nfunction parseTransaction(serializedTransaction) {\n    const type = (0, getSerializedTransactionType_js_1.getSerializedTransactionType)(serializedTransaction);\n    if (type === 'eip1559')\n        return parseTransactionEIP1559(serializedTransaction);\n    if (type === 'eip2930')\n        return parseTransactionEIP2930(serializedTransaction);\n    return parseTransactionLegacy(serializedTransaction);\n}\nexports.parseTransaction = parseTransaction;\nfunction parseTransactionEIP1559(serializedTransaction) {\n    const transactionArray = toTransactionArray(serializedTransaction);\n    const [chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gas, to, value, data, accessList, v, r, s,] = transactionArray;\n    if (!(transactionArray.length === 9 || transactionArray.length === 12))\n        throw new transaction_js_1.InvalidSerializedTransactionError({\n            attributes: {\n                chainId,\n                nonce,\n                maxPriorityFeePerGas,\n                maxFeePerGas,\n                gas,\n                to,\n                value,\n                data,\n                accessList,\n                ...(transactionArray.length > 9\n                    ? {\n                        v,\n                        r,\n                        s,\n                    }\n                    : {}),\n            },\n            serializedTransaction,\n            type: 'eip1559',\n        });\n    const transaction = {\n        chainId: (0, fromHex_js_1.hexToNumber)(chainId),\n        type: 'eip1559',\n    };\n    if ((0, isHex_js_1.isHex)(to) && to !== '0x')\n        transaction.to = to;\n    if ((0, isHex_js_1.isHex)(gas) && gas !== '0x')\n        transaction.gas = (0, fromHex_js_1.hexToBigInt)(gas);\n    if ((0, isHex_js_1.isHex)(data) && data !== '0x')\n        transaction.data = data;\n    if ((0, isHex_js_1.isHex)(nonce) && nonce !== '0x')\n        transaction.nonce = (0, fromHex_js_1.hexToNumber)(nonce);\n    if ((0, isHex_js_1.isHex)(value) && value !== '0x')\n        transaction.value = (0, fromHex_js_1.hexToBigInt)(value);\n    if ((0, isHex_js_1.isHex)(maxFeePerGas) && maxFeePerGas !== '0x')\n        transaction.maxFeePerGas = (0, fromHex_js_1.hexToBigInt)(maxFeePerGas);\n    if ((0, isHex_js_1.isHex)(maxPriorityFeePerGas) && maxPriorityFeePerGas !== '0x')\n        transaction.maxPriorityFeePerGas = (0, fromHex_js_1.hexToBigInt)(maxPriorityFeePerGas);\n    if (accessList.length !== 0 && accessList !== '0x')\n        transaction.accessList = parseAccessList(accessList);\n    (0, assertTransaction_js_1.assertTransactionEIP1559)(transaction);\n    const signature = transactionArray.length === 12\n        ? parseEIP155Signature(transactionArray)\n        : undefined;\n    return { ...signature, ...transaction };\n}\nfunction parseTransactionEIP2930(serializedTransaction) {\n    const transactionArray = toTransactionArray(serializedTransaction);\n    const [chainId, nonce, gasPrice, gas, to, value, data, accessList, v, r, s] = transactionArray;\n    if (!(transactionArray.length === 8 || transactionArray.length === 11))\n        throw new transaction_js_1.InvalidSerializedTransactionError({\n            attributes: {\n                chainId,\n                nonce,\n                gasPrice,\n                gas,\n                to,\n                value,\n                data,\n                accessList,\n                ...(transactionArray.length > 8\n                    ? {\n                        v,\n                        r,\n                        s,\n                    }\n                    : {}),\n            },\n            serializedTransaction,\n            type: 'eip2930',\n        });\n    const transaction = {\n        chainId: (0, fromHex_js_1.hexToNumber)(chainId),\n        type: 'eip2930',\n    };\n    if ((0, isHex_js_1.isHex)(to) && to !== '0x')\n        transaction.to = to;\n    if ((0, isHex_js_1.isHex)(gas) && gas !== '0x')\n        transaction.gas = (0, fromHex_js_1.hexToBigInt)(gas);\n    if ((0, isHex_js_1.isHex)(data) && data !== '0x')\n        transaction.data = data;\n    if ((0, isHex_js_1.isHex)(nonce) && nonce !== '0x')\n        transaction.nonce = (0, fromHex_js_1.hexToNumber)(nonce);\n    if ((0, isHex_js_1.isHex)(value) && value !== '0x')\n        transaction.value = (0, fromHex_js_1.hexToBigInt)(value);\n    if ((0, isHex_js_1.isHex)(gasPrice) && gasPrice !== '0x')\n        transaction.gasPrice = (0, fromHex_js_1.hexToBigInt)(gasPrice);\n    if (accessList.length !== 0 && accessList !== '0x')\n        transaction.accessList = parseAccessList(accessList);\n    (0, assertTransaction_js_1.assertTransactionEIP2930)(transaction);\n    const signature = transactionArray.length === 11\n        ? parseEIP155Signature(transactionArray)\n        : undefined;\n    return { ...signature, ...transaction };\n}\nfunction parseTransactionLegacy(serializedTransaction) {\n    const transactionArray = (0, fromRlp_js_1.fromRlp)(serializedTransaction, 'hex');\n    const [nonce, gasPrice, gas, to, value, data, chainIdOrV_, r, s] = transactionArray;\n    if (!(transactionArray.length === 6 || transactionArray.length === 9))\n        throw new transaction_js_1.InvalidSerializedTransactionError({\n            attributes: {\n                nonce,\n                gasPrice,\n                gas,\n                to,\n                value,\n                data,\n                ...(transactionArray.length > 6\n                    ? {\n                        v: chainIdOrV_,\n                        r,\n                        s,\n                    }\n                    : {}),\n            },\n            serializedTransaction,\n            type: 'legacy',\n        });\n    const transaction = {\n        type: 'legacy',\n    };\n    if ((0, isHex_js_1.isHex)(to) && to !== '0x')\n        transaction.to = to;\n    if ((0, isHex_js_1.isHex)(gas) && gas !== '0x')\n        transaction.gas = (0, fromHex_js_1.hexToBigInt)(gas);\n    if ((0, isHex_js_1.isHex)(data) && data !== '0x')\n        transaction.data = data;\n    if ((0, isHex_js_1.isHex)(nonce) && nonce !== '0x')\n        transaction.nonce = (0, fromHex_js_1.hexToNumber)(nonce);\n    if ((0, isHex_js_1.isHex)(value) && value !== '0x')\n        transaction.value = (0, fromHex_js_1.hexToBigInt)(value);\n    if ((0, isHex_js_1.isHex)(gasPrice) && gasPrice !== '0x')\n        transaction.gasPrice = (0, fromHex_js_1.hexToBigInt)(gasPrice);\n    (0, assertTransaction_js_1.assertTransactionLegacy)(transaction);\n    if (transactionArray.length === 6)\n        return transaction;\n    const chainIdOrV = (0, isHex_js_1.isHex)(chainIdOrV_) && chainIdOrV_ !== '0x'\n        ? (0, fromHex_js_1.hexToBigInt)(chainIdOrV_)\n        : 0n;\n    if (s === '0x' && r === '0x') {\n        if (chainIdOrV > 0)\n            transaction.chainId = Number(chainIdOrV);\n        return transaction;\n    }\n    const v = chainIdOrV;\n    const chainId = Number((v - 35n) / 2n);\n    if (chainId > 0)\n        transaction.chainId = chainId;\n    else if (v !== 27n && v !== 28n)\n        throw new transaction_js_1.InvalidLegacyVError({ v });\n    transaction.v = v;\n    transaction.s = s;\n    transaction.r = r;\n    return transaction;\n}\nfunction toTransactionArray(serializedTransaction) {\n    return (0, fromRlp_js_1.fromRlp)(`0x${serializedTransaction.slice(4)}`, 'hex');\n}\nexports.toTransactionArray = toTransactionArray;\nfunction parseAccessList(accessList_) {\n    const accessList = [];\n    for (let i = 0; i < accessList_.length; i++) {\n        const [address, storageKeys] = accessList_[i];\n        if (!(0, isAddress_js_1.isAddress)(address))\n            throw new address_js_1.InvalidAddressError({ address });\n        accessList.push({\n            address: address,\n            storageKeys: storageKeys.map((key) => ((0, isHash_js_1.isHash)(key) ? key : (0, trim_js_1.trim)(key))),\n        });\n    }\n    return accessList;\n}\nexports.parseAccessList = parseAccessList;\nfunction parseEIP155Signature(transactionArray) {\n    const signature = transactionArray.slice(-3);\n    const v = signature[0] === '0x' || (0, fromHex_js_1.hexToBigInt)(signature[0]) === 0n ? 27n : 28n;\n    return {\n        r: (0, pad_js_1.padHex)(signature[1], { size: 32 }),\n        s: (0, pad_js_1.padHex)(signature[2], { size: 32 }),\n        v,\n        yParity: v === 27n ? 0 : 1,\n    };\n}\n//# sourceMappingURL=parseTransaction.js.map\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$viem$_cjs$utils$data$pad","~$module$node_modules$viem$_cjs$utils$encoding$fromRlp","~$module$node_modules$viem$_cjs$utils$transaction$assertTransaction","~$module$node_modules$viem$_cjs$utils$data$trim","~$module$node_modules$viem$_cjs$utils$hash$isHash","~$module$node_modules$viem$_cjs$errors$address","~$shadow.js","~$module$node_modules$viem$_cjs$utils$encoding$fromHex","~$module$node_modules$viem$_cjs$utils$address$isAddress","~$module$node_modules$viem$_cjs$utils$data$isHex","~$module$node_modules$viem$_cjs$errors$transaction","~$module$node_modules$viem$_cjs$utils$transaction$getSerializedTransactionType"]],"~:properties",["^5",["s","chainId","parseTransaction","gasPrice","accessList","parseAccessList","__esModule","v","storageKeys","gas","maxPriorityFeePerGas","maxFeePerGas","value","address","toTransactionArray","attributes","type","r","serializedTransaction","nonce","size","to","yParity","data"]],"~:compiled-at",1695111490342,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$viem$_cjs$utils$transaction$parseTransaction.js\",\n\"lineCount\":13,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/viem/_cjs/utils/transaction/parseTransaction.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$viem$_cjs$utils$transaction$parseTransaction\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nexports.parseAccessList = exports.toTransactionArray = exports.parseTransaction = void 0;\\nconst address_js_1 = require(\\\"../../errors/address.js\\\");\\nconst transaction_js_1 = require(\\\"../../errors/transaction.js\\\");\\nconst isAddress_js_1 = require(\\\"../address/isAddress.js\\\");\\nconst isHex_js_1 = require(\\\"../data/isHex.js\\\");\\nconst pad_js_1 = require(\\\"../data/pad.js\\\");\\nconst trim_js_1 = require(\\\"../data/trim.js\\\");\\nconst fromHex_js_1 = require(\\\"../encoding/fromHex.js\\\");\\nconst fromRlp_js_1 = require(\\\"../encoding/fromRlp.js\\\");\\nconst isHash_js_1 = require(\\\"../hash/isHash.js\\\");\\nconst assertTransaction_js_1 = require(\\\"./assertTransaction.js\\\");\\nconst getSerializedTransactionType_js_1 = require(\\\"./getSerializedTransactionType.js\\\");\\nfunction parseTransaction(serializedTransaction) {\\n    const type = (0, getSerializedTransactionType_js_1.getSerializedTransactionType)(serializedTransaction);\\n    if (type === 'eip1559')\\n        return parseTransactionEIP1559(serializedTransaction);\\n    if (type === 'eip2930')\\n        return parseTransactionEIP2930(serializedTransaction);\\n    return parseTransactionLegacy(serializedTransaction);\\n}\\nexports.parseTransaction = parseTransaction;\\nfunction parseTransactionEIP1559(serializedTransaction) {\\n    const transactionArray = toTransactionArray(serializedTransaction);\\n    const [chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gas, to, value, data, accessList, v, r, s,] = transactionArray;\\n    if (!(transactionArray.length === 9 || transactionArray.length === 12))\\n        throw new transaction_js_1.InvalidSerializedTransactionError({\\n            attributes: {\\n                chainId,\\n                nonce,\\n                maxPriorityFeePerGas,\\n                maxFeePerGas,\\n                gas,\\n                to,\\n                value,\\n                data,\\n                accessList,\\n                ...(transactionArray.length > 9\\n                    ? {\\n                        v,\\n                        r,\\n                        s,\\n                    }\\n                    : {}),\\n            },\\n            serializedTransaction,\\n            type: 'eip1559',\\n        });\\n    const transaction = {\\n        chainId: (0, fromHex_js_1.hexToNumber)(chainId),\\n        type: 'eip1559',\\n    };\\n    if ((0, isHex_js_1.isHex)(to) && to !== '0x')\\n        transaction.to = to;\\n    if ((0, isHex_js_1.isHex)(gas) && gas !== '0x')\\n        transaction.gas = (0, fromHex_js_1.hexToBigInt)(gas);\\n    if ((0, isHex_js_1.isHex)(data) && data !== '0x')\\n        transaction.data = data;\\n    if ((0, isHex_js_1.isHex)(nonce) && nonce !== '0x')\\n        transaction.nonce = (0, fromHex_js_1.hexToNumber)(nonce);\\n    if ((0, isHex_js_1.isHex)(value) && value !== '0x')\\n        transaction.value = (0, fromHex_js_1.hexToBigInt)(value);\\n    if ((0, isHex_js_1.isHex)(maxFeePerGas) && maxFeePerGas !== '0x')\\n        transaction.maxFeePerGas = (0, fromHex_js_1.hexToBigInt)(maxFeePerGas);\\n    if ((0, isHex_js_1.isHex)(maxPriorityFeePerGas) && maxPriorityFeePerGas !== '0x')\\n        transaction.maxPriorityFeePerGas = (0, fromHex_js_1.hexToBigInt)(maxPriorityFeePerGas);\\n    if (accessList.length !== 0 && accessList !== '0x')\\n        transaction.accessList = parseAccessList(accessList);\\n    (0, assertTransaction_js_1.assertTransactionEIP1559)(transaction);\\n    const signature = transactionArray.length === 12\\n        ? parseEIP155Signature(transactionArray)\\n        : undefined;\\n    return { ...signature, ...transaction };\\n}\\nfunction parseTransactionEIP2930(serializedTransaction) {\\n    const transactionArray = toTransactionArray(serializedTransaction);\\n    const [chainId, nonce, gasPrice, gas, to, value, data, accessList, v, r, s] = transactionArray;\\n    if (!(transactionArray.length === 8 || transactionArray.length === 11))\\n        throw new transaction_js_1.InvalidSerializedTransactionError({\\n            attributes: {\\n                chainId,\\n                nonce,\\n                gasPrice,\\n                gas,\\n                to,\\n                value,\\n                data,\\n                accessList,\\n                ...(transactionArray.length > 8\\n                    ? {\\n                        v,\\n                        r,\\n                        s,\\n                    }\\n                    : {}),\\n            },\\n            serializedTransaction,\\n            type: 'eip2930',\\n        });\\n    const transaction = {\\n        chainId: (0, fromHex_js_1.hexToNumber)(chainId),\\n        type: 'eip2930',\\n    };\\n    if ((0, isHex_js_1.isHex)(to) && to !== '0x')\\n        transaction.to = to;\\n    if ((0, isHex_js_1.isHex)(gas) && gas !== '0x')\\n        transaction.gas = (0, fromHex_js_1.hexToBigInt)(gas);\\n    if ((0, isHex_js_1.isHex)(data) && data !== '0x')\\n        transaction.data = data;\\n    if ((0, isHex_js_1.isHex)(nonce) && nonce !== '0x')\\n        transaction.nonce = (0, fromHex_js_1.hexToNumber)(nonce);\\n    if ((0, isHex_js_1.isHex)(value) && value !== '0x')\\n        transaction.value = (0, fromHex_js_1.hexToBigInt)(value);\\n    if ((0, isHex_js_1.isHex)(gasPrice) && gasPrice !== '0x')\\n        transaction.gasPrice = (0, fromHex_js_1.hexToBigInt)(gasPrice);\\n    if (accessList.length !== 0 && accessList !== '0x')\\n        transaction.accessList = parseAccessList(accessList);\\n    (0, assertTransaction_js_1.assertTransactionEIP2930)(transaction);\\n    const signature = transactionArray.length === 11\\n        ? parseEIP155Signature(transactionArray)\\n        : undefined;\\n    return { ...signature, ...transaction };\\n}\\nfunction parseTransactionLegacy(serializedTransaction) {\\n    const transactionArray = (0, fromRlp_js_1.fromRlp)(serializedTransaction, 'hex');\\n    const [nonce, gasPrice, gas, to, value, data, chainIdOrV_, r, s] = transactionArray;\\n    if (!(transactionArray.length === 6 || transactionArray.length === 9))\\n        throw new transaction_js_1.InvalidSerializedTransactionError({\\n            attributes: {\\n                nonce,\\n                gasPrice,\\n                gas,\\n                to,\\n                value,\\n                data,\\n                ...(transactionArray.length > 6\\n                    ? {\\n                        v: chainIdOrV_,\\n                        r,\\n                        s,\\n                    }\\n                    : {}),\\n            },\\n            serializedTransaction,\\n            type: 'legacy',\\n        });\\n    const transaction = {\\n        type: 'legacy',\\n    };\\n    if ((0, isHex_js_1.isHex)(to) && to !== '0x')\\n        transaction.to = to;\\n    if ((0, isHex_js_1.isHex)(gas) && gas !== '0x')\\n        transaction.gas = (0, fromHex_js_1.hexToBigInt)(gas);\\n    if ((0, isHex_js_1.isHex)(data) && data !== '0x')\\n        transaction.data = data;\\n    if ((0, isHex_js_1.isHex)(nonce) && nonce !== '0x')\\n        transaction.nonce = (0, fromHex_js_1.hexToNumber)(nonce);\\n    if ((0, isHex_js_1.isHex)(value) && value !== '0x')\\n        transaction.value = (0, fromHex_js_1.hexToBigInt)(value);\\n    if ((0, isHex_js_1.isHex)(gasPrice) && gasPrice !== '0x')\\n        transaction.gasPrice = (0, fromHex_js_1.hexToBigInt)(gasPrice);\\n    (0, assertTransaction_js_1.assertTransactionLegacy)(transaction);\\n    if (transactionArray.length === 6)\\n        return transaction;\\n    const chainIdOrV = (0, isHex_js_1.isHex)(chainIdOrV_) && chainIdOrV_ !== '0x'\\n        ? (0, fromHex_js_1.hexToBigInt)(chainIdOrV_)\\n        : 0n;\\n    if (s === '0x' && r === '0x') {\\n        if (chainIdOrV > 0)\\n            transaction.chainId = Number(chainIdOrV);\\n        return transaction;\\n    }\\n    const v = chainIdOrV;\\n    const chainId = Number((v - 35n) / 2n);\\n    if (chainId > 0)\\n        transaction.chainId = chainId;\\n    else if (v !== 27n && v !== 28n)\\n        throw new transaction_js_1.InvalidLegacyVError({ v });\\n    transaction.v = v;\\n    transaction.s = s;\\n    transaction.r = r;\\n    return transaction;\\n}\\nfunction toTransactionArray(serializedTransaction) {\\n    return (0, fromRlp_js_1.fromRlp)(`0x${serializedTransaction.slice(4)}`, 'hex');\\n}\\nexports.toTransactionArray = toTransactionArray;\\nfunction parseAccessList(accessList_) {\\n    const accessList = [];\\n    for (let i = 0; i < accessList_.length; i++) {\\n        const [address, storageKeys] = accessList_[i];\\n        if (!(0, isAddress_js_1.isAddress)(address))\\n            throw new address_js_1.InvalidAddressError({ address });\\n        accessList.push({\\n            address: address,\\n            storageKeys: storageKeys.map((key) => ((0, isHash_js_1.isHash)(key) ? key : (0, trim_js_1.trim)(key))),\\n        });\\n    }\\n    return accessList;\\n}\\nexports.parseAccessList = parseAccessList;\\nfunction parseEIP155Signature(transactionArray) {\\n    const signature = transactionArray.slice(-3);\\n    const v = signature[0] === '0x' || (0, fromHex_js_1.hexToBigInt)(signature[0]) === 0n ? 27n : 28n;\\n    return {\\n        r: (0, pad_js_1.padHex)(signature[1], { size: 32 }),\\n        s: (0, pad_js_1.padHex)(signature[2], { size: 32 }),\\n        v,\\n        yParity: v === 27n ? 0 : 1,\\n    };\\n}\\n//# sourceMappingURL=parseTransaction.js.map\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"toTransactionArray\",\"serializedTransaction\",\"fromRlp_js_1\",\"fromRlp\",\"slice\",\"parseAccessList\",\"accessList_\",\"accessList\",\"i\",\"length\",\"address\",\"storageKeys\",\"isAddress_js_1\",\"isAddress\",\"address_js_1\",\"InvalidAddressError\",\"push\",\"map\",\"key\",\"isHash_js_1\",\"isHash\",\"trim_js_1\",\"trim\",\"parseEIP155Signature\",\"transactionArray\",\"signature\",\"v\",\"fromHex_js_1\",\"hexToBigInt\",\"r\",\"pad_js_1\",\"padHex\",\"size\",\"s\",\"yParity\",\"Object\",\"defineProperty\",\"value\",\"parseTransaction\",\"transaction_js_1\",\"isHex_js_1\",\"assertTransaction_js_1\",\"getSerializedTransactionType_js_1\",\"type\",\"getSerializedTransactionType\",\"chainId\",\"nonce\",\"maxPriorityFeePerGas\",\"maxFeePerGas\",\"gas\",\"to\",\"data\",\"InvalidSerializedTransactionError\",\"attributes\",\"transaction\",\"hexToNumber\",\"isHex\",\"assertTransactionEIP1559\",\"undefined\",\"gasPrice\",\"assertTransactionEIP2930\",\"chainIdOrV_\",\"assertTransactionLegacy\",\"chainIdOrV\",\"Number\",\"InvalidLegacyVError\"]\n}\n"]