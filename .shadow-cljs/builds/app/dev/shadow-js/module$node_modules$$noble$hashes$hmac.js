["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@noble/hashes/hmac.js"],"~:js","shadow$provide.module$node_modules$$noble$hashes$hmac=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.hmac=exports.HMAC=void 0;const _assert_js_1=require(\"module$node_modules$$noble$hashes$_assert\"),utils_js_1=require(\"module$node_modules$$noble$hashes$utils\");class HMAC extends utils_js_1.Hash{constructor(hash,_key){super();this.destroyed=this.finished=!1;(0,_assert_js_1.hash)(hash);var key=(0,utils_js_1.toBytes)(_key);this.iHash=hash.create();\nif(\"function\"!==typeof this.iHash.update)throw Error(\"Expected instance of class which extends utils.Hash\");this.blockLen=this.iHash.blockLen;this.outputLen=this.iHash.outputLen;const blockLen=this.blockLen;_key=new Uint8Array(blockLen);_key.set(key.length>blockLen?hash.create().update(key).digest():key);for(key=0;key<_key.length;key++)_key[key]^=54;this.iHash.update(_key);this.oHash=hash.create();for(hash=0;hash<_key.length;hash++)_key[hash]^=106;this.oHash.update(_key);_key.fill(0)}update(buf){(0,_assert_js_1.exists)(this);\nthis.iHash.update(buf);return this}digestInto(out){(0,_assert_js_1.exists)(this);(0,_assert_js_1.bytes)(out,this.outputLen);this.finished=!0;this.iHash.digestInto(out);this.oHash.update(out);this.oHash.digestInto(out);this.destroy()}digest(){const out=new Uint8Array(this.oHash.outputLen);this.digestInto(out);return out}_cloneInto(to){to||(to=Object.create(Object.getPrototypeOf(this),{}));const {oHash,iHash,finished,destroyed,blockLen,outputLen}=this;to.finished=finished;to.destroyed=destroyed;to.blockLen=\nblockLen;to.outputLen=outputLen;to.oHash=oHash._cloneInto(to.oHash);to.iHash=iHash._cloneInto(to.iHash);return to}destroy(){this.destroyed=!0;this.oHash.destroy();this.iHash.destroy()}}exports.HMAC=HMAC;exports.hmac=(hash,key,message)=>(new HMAC(hash,key)).update(message).digest();exports.hmac.create=(hash,key)=>new HMAC(hash,key)}","~:source","shadow$provide[\"module$node_modules$$noble$hashes$hmac\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hmac = exports.HMAC = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// HMAC (RFC 2104)\nclass HMAC extends utils_js_1.Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        (0, _assert_js_1.hash)(hash);\n        const key = (0, utils_js_1.toBytes)(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        (0, _assert_js_1.exists)(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        (0, _assert_js_1.exists)(this);\n        (0, _assert_js_1.bytes)(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\nexports.HMAC = HMAC;\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nconst hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nexports.hmac = hmac;\nexports.hmac.create = (hash, key) => new HMAC(hash, key);\n//# sourceMappingURL=hmac.js.map\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$$noble$hashes$_assert","~$shadow.js","~$module$node_modules$$noble$hashes$utils"]],"~:properties",["^5",["hmac","outputLen","oHash","iHash","__esModule","HMAC","value","create","blockLen","destroyed","finished"]],"~:compiled-at",1695111490334,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$noble$hashes$hmac.js\",\n\"lineCount\":4,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/@noble/hashes/hmac.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$noble$hashes$hmac\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nexports.hmac = exports.HMAC = void 0;\\nconst _assert_js_1 = require(\\\"./_assert.js\\\");\\nconst utils_js_1 = require(\\\"./utils.js\\\");\\n// HMAC (RFC 2104)\\nclass HMAC extends utils_js_1.Hash {\\n    constructor(hash, _key) {\\n        super();\\n        this.finished = false;\\n        this.destroyed = false;\\n        (0, _assert_js_1.hash)(hash);\\n        const key = (0, utils_js_1.toBytes)(_key);\\n        this.iHash = hash.create();\\n        if (typeof this.iHash.update !== 'function')\\n            throw new Error('Expected instance of class which extends utils.Hash');\\n        this.blockLen = this.iHash.blockLen;\\n        this.outputLen = this.iHash.outputLen;\\n        const blockLen = this.blockLen;\\n        const pad = new Uint8Array(blockLen);\\n        // blockLen can be bigger than outputLen\\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\\n        for (let i = 0; i < pad.length; i++)\\n            pad[i] ^= 0x36;\\n        this.iHash.update(pad);\\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\\n        this.oHash = hash.create();\\n        // Undo internal XOR && apply outer XOR\\n        for (let i = 0; i < pad.length; i++)\\n            pad[i] ^= 0x36 ^ 0x5c;\\n        this.oHash.update(pad);\\n        pad.fill(0);\\n    }\\n    update(buf) {\\n        (0, _assert_js_1.exists)(this);\\n        this.iHash.update(buf);\\n        return this;\\n    }\\n    digestInto(out) {\\n        (0, _assert_js_1.exists)(this);\\n        (0, _assert_js_1.bytes)(out, this.outputLen);\\n        this.finished = true;\\n        this.iHash.digestInto(out);\\n        this.oHash.update(out);\\n        this.oHash.digestInto(out);\\n        this.destroy();\\n    }\\n    digest() {\\n        const out = new Uint8Array(this.oHash.outputLen);\\n        this.digestInto(out);\\n        return out;\\n    }\\n    _cloneInto(to) {\\n        // Create new instance without calling constructor since key already in state and we don't know it.\\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\\n        to = to;\\n        to.finished = finished;\\n        to.destroyed = destroyed;\\n        to.blockLen = blockLen;\\n        to.outputLen = outputLen;\\n        to.oHash = oHash._cloneInto(to.oHash);\\n        to.iHash = iHash._cloneInto(to.iHash);\\n        return to;\\n    }\\n    destroy() {\\n        this.destroyed = true;\\n        this.oHash.destroy();\\n        this.iHash.destroy();\\n    }\\n}\\nexports.HMAC = HMAC;\\n/**\\n * HMAC: RFC2104 message authentication code.\\n * @param hash - function that would be used e.g. sha256\\n * @param key - message key\\n * @param message - message data\\n */\\nconst hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\\nexports.hmac = hmac;\\nexports.hmac.create = (hash, key) => new HMAC(hash, key);\\n//# sourceMappingURL=hmac.js.map\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"hmac\",\"HMAC\",\"_assert_js_1\",\"utils_js_1\",\"Hash\",\"constructor\",\"hash\",\"_key\",\"destroyed\",\"finished\",\"key\",\"toBytes\",\"iHash\",\"create\",\"update\",\"Error\",\"blockLen\",\"outputLen\",\"pad\",\"Uint8Array\",\"set\",\"length\",\"digest\",\"i\",\"oHash\",\"fill\",\"buf\",\"exists\",\"digestInto\",\"out\",\"bytes\",\"destroy\",\"_cloneInto\",\"to\",\"getPrototypeOf\",\"message\",\"exports.hmac.create\"]\n}\n"]