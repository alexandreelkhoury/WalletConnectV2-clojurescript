["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/asn1_DOT_js/lib/asn1/decoders/pem.js"],"~:js","shadow$provide[236]=function(S,A,V,q){function F(y){r.call(this,y);this.enc=\"pem\"}S=A(76);const G=A(227).Buffer,r=A(235);S(F,r);V.exports=F;F.prototype.decode=function(y,e){y=y.toString().split(/[\\r\\n]+/g);const u=e.label.toUpperCase(),p=/^-----(BEGIN|END) ([^-]+)-----$/;let n=-1,l=-1;for(let h=0;h<y.length;h++){const k=y[h].match(p);if(null!==k&&k[2]===u)if(-1===n){if(\"BEGIN\"!==k[1])break;n=h}else{if(\"END\"!==k[1])break;l=h;break}}if(-1===n||-1===l)throw Error(\"PEM section not found for: \"+u);y=y.slice(n+\n1,l).join(\"\");y.replace(/[^a-z0-9+/=]+/gi,\"\");y=G.from(y,\"base64\");return r.prototype.decode.call(this,y,e)}}","~:source","shadow$provide[236] = function(global,require,module,exports) {\n'use strict';\n\nconst inherits = require('inherits');\nconst Buffer = require('safer-buffer').Buffer;\n\nconst DERDecoder = require('./der');\n\nfunction PEMDecoder(entity) {\n  DERDecoder.call(this, entity);\n  this.enc = 'pem';\n}\ninherits(PEMDecoder, DERDecoder);\nmodule.exports = PEMDecoder;\n\nPEMDecoder.prototype.decode = function decode(data, options) {\n  const lines = data.toString().split(/[\\r\\n]+/g);\n\n  const label = options.label.toUpperCase();\n\n  const re = /^-----(BEGIN|END) ([^-]+)-----$/;\n  let start = -1;\n  let end = -1;\n  for (let i = 0; i < lines.length; i++) {\n    const match = lines[i].match(re);\n    if (match === null)\n      continue;\n\n    if (match[2] !== label)\n      continue;\n\n    if (start === -1) {\n      if (match[1] !== 'BEGIN')\n        break;\n      start = i;\n    } else {\n      if (match[1] !== 'END')\n        break;\n      end = i;\n      break;\n    }\n  }\n  if (start === -1 || end === -1)\n    throw new Error('PEM section not found for: ' + label);\n\n  const base64 = lines.slice(start + 1, end).join('');\n  // Remove excessive symbols\n  base64.replace(/[^a-z0-9+/=]+/gi, '');\n\n  const input = Buffer.from(base64, 'base64');\n  return DERDecoder.prototype.decode.call(this, input, options);\n};\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$inherits$inherits_browser","~$module$node_modules$safer_buffer$safer","~$module$node_modules$asn1_DOT_js$lib$asn1$decoders$der"]],"~:properties",["^5",["decode","enc"]],"~:compiled-at",1695041440859,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$asn1_DOT_js$lib$asn1$decoders$pem.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAQ9DC,QAASA,EAAU,CAACC,CAAD,CAAS,CAC1BC,CAAWC,CAAAA,IAAX,CAAgB,IAAhB,CAAsBF,CAAtB,CACA,KAAKG,CAAAA,GAAL,CAAW,KAFe,CALtBC,CAAAA,CAAWR,CAAA,CAAQ,EAAR,CACjB,OAAMS,EAAST,CAAA,CAAQ,GAAR,CAAwBS,CAAAA,MAAvC,CAEMJ,EAAaL,CAAA,CAAQ,GAAR,CAMnBQ,EAAA,CAASL,CAAT,CAAqBE,CAArB,CACAJ,EAAOC,CAAAA,OAAP,CAAiBC,CAEjBA,EAAWO,CAAAA,SAAUC,CAAAA,MAArB,CAA8BC,QAAe,CAACC,CAAD,CAAOC,CAAP,CAAgB,CACrDC,CAAAA,CAAQF,CAAKG,CAAAA,QAAL,EAAgBC,CAAAA,KAAhB,CAAsB,UAAtB,CAEd,OAAMC,EAAQJ,CAAQI,CAAAA,KAAMC,CAAAA,WAAd,EAAd,CAEMC,EAAK,iCACX,KAAIC,EAAQ,CAAC,CAAb,CACIC,EAAM,CAAC,CACX,KAAK,IAAIC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBR,CAAMS,CAAAA,MAA1B,CAAkCD,CAAA,EAAlC,CAAuC,CACrC,MAAME,EAAQV,CAAA,CAAMQ,CAAN,CAASE,CAAAA,KAAT,CAAeL,CAAf,CACd,IAAc,IAAd,GAAIK,CAAJ,EAGIA,CAAA,CAAM,CAAN,CAHJ,GAGiBP,CAHjB,CAMA,GAAc,CAAC,CAAf,GAAIG,CAAJ,CAAkB,CAChB,GAAiB,OAAjB,GAAII,CAAA,CAAM,CAAN,CAAJ,CACE,KACFJ,EAAA,CAAQE,CAHQ,CAAlB,IAIO,CACL,GAAiB,KAAjB,GAAIE,CAAA,CAAM,CAAN,CAAJ,CACE,KACFH,EAAA,CAAMC,CACN,MAJK,CAZ8B,CAmBvC,GAAc,CAAC,CAAf,GAAIF,CAAJ,EAA4B,CAAC,CAA7B,GAAoBC,CAApB,CACE,KAAUI,MAAJ,CAAU,6BAAV,CAA0CR,CAA1C,CAAN,CAEIS,CAAAA,CAASZ,CAAMa,CAAAA,KAAN,CAAYP,CAAZ;AAAoB,CAApB,CAAuBC,CAAvB,CAA4BO,CAAAA,IAA5B,CAAiC,EAAjC,CAEfF,EAAOG,CAAAA,OAAP,CAAe,iBAAf,CAAkC,EAAlC,CAEMC,EAAAA,CAAQtB,CAAOuB,CAAAA,IAAP,CAAYL,CAAZ,CAAoB,QAApB,CACd,OAAOtB,EAAWK,CAAAA,SAAUC,CAAAA,MAAOL,CAAAA,IAA5B,CAAiC,IAAjC,CAAuCyB,CAAvC,CAA8CjB,CAA9C,CAnCoD,CAfC;\",\n\"sources\":[\"node_modules/asn1_DOT_js/lib/asn1/decoders/pem.js\"],\n\"sourcesContent\":[\"shadow$provide[236] = function(global,require,module,exports) {\\n'use strict';\\n\\nconst inherits = require('inherits');\\nconst Buffer = require('safer-buffer').Buffer;\\n\\nconst DERDecoder = require('./der');\\n\\nfunction PEMDecoder(entity) {\\n  DERDecoder.call(this, entity);\\n  this.enc = 'pem';\\n}\\ninherits(PEMDecoder, DERDecoder);\\nmodule.exports = PEMDecoder;\\n\\nPEMDecoder.prototype.decode = function decode(data, options) {\\n  const lines = data.toString().split(/[\\\\r\\\\n]+/g);\\n\\n  const label = options.label.toUpperCase();\\n\\n  const re = /^-----(BEGIN|END) ([^-]+)-----$/;\\n  let start = -1;\\n  let end = -1;\\n  for (let i = 0; i < lines.length; i++) {\\n    const match = lines[i].match(re);\\n    if (match === null)\\n      continue;\\n\\n    if (match[2] !== label)\\n      continue;\\n\\n    if (start === -1) {\\n      if (match[1] !== 'BEGIN')\\n        break;\\n      start = i;\\n    } else {\\n      if (match[1] !== 'END')\\n        break;\\n      end = i;\\n      break;\\n    }\\n  }\\n  if (start === -1 || end === -1)\\n    throw new Error('PEM section not found for: ' + label);\\n\\n  const base64 = lines.slice(start + 1, end).join('');\\n  // Remove excessive symbols\\n  base64.replace(/[^a-z0-9+/=]+/gi, '');\\n\\n  const input = Buffer.from(base64, 'base64');\\n  return DERDecoder.prototype.decode.call(this, input, options);\\n};\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"PEMDecoder\",\"entity\",\"DERDecoder\",\"call\",\"enc\",\"inherits\",\"Buffer\",\"prototype\",\"decode\",\"PEMDecoder.prototype.decode\",\"data\",\"options\",\"lines\",\"toString\",\"split\",\"label\",\"toUpperCase\",\"re\",\"start\",\"end\",\"i\",\"length\",\"match\",\"Error\",\"base64\",\"slice\",\"join\",\"replace\",\"input\",\"from\"]\n}\n"]