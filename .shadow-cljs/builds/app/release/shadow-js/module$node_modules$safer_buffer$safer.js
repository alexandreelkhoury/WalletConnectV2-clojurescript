["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/safer-buffer/safer.js"],"~:js","shadow$provide[227]=function(S,A,V,q){S=A(1);\"use strict\";q=A(53);var F=q.Buffer;A={};for(var G in q)q.hasOwnProperty(G)&&\"SlowBuffer\"!==G&&\"Buffer\"!==G&&(A[G]=q[G]);q=A.Buffer={};for(G in F)F.hasOwnProperty(G)&&\"allocUnsafe\"!==G&&\"allocUnsafeSlow\"!==G&&(q[G]=F[G]);A.Buffer.prototype=F.prototype;q.from&&q.from!==Uint8Array.from||(q.from=function(r,y,e){if(\"number\"===typeof r)throw new TypeError('The \"value\" argument must not be of type number. Received type '+typeof r);if(r&&\"undefined\"===typeof r.length)throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \"+\ntypeof r);return F(r,y,e)});q.alloc||(q.alloc=function(r,y,e){if(\"number\"!==typeof r)throw new TypeError('The \"size\" argument must be of type number. Received type '+typeof r);if(0>r||2147483648<=r)throw new RangeError('The value \"'+r+'\" is invalid for option \"size\"');r=F(r);y&&0!==y.length?\"string\"===typeof e?r.fill(y,e):r.fill(y):r.fill(0);return r});if(!A.kStringMaxLength)try{A.kStringMaxLength=S.binding(\"buffer\").kStringMaxLength}catch(r){}A.constants||(A.constants={MAX_LENGTH:A.kMaxLength},A.kStringMaxLength&&\n(A.constants.MAX_STRING_LENGTH=A.kStringMaxLength));V.exports=A}","~:source","shadow$provide[227] = function(global,require,module,exports) {\nvar process = require('process');\n/* eslint-disable node/no-deprecated-api */\n\n'use strict'\n\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\nvar safer = {}\n\nvar key\n\nfor (key in buffer) {\n  if (!buffer.hasOwnProperty(key)) continue\n  if (key === 'SlowBuffer' || key === 'Buffer') continue\n  safer[key] = buffer[key]\n}\n\nvar Safer = safer.Buffer = {}\nfor (key in Buffer) {\n  if (!Buffer.hasOwnProperty(key)) continue\n  if (key === 'allocUnsafe' || key === 'allocUnsafeSlow') continue\n  Safer[key] = Buffer[key]\n}\n\nsafer.Buffer.prototype = Buffer.prototype\n\nif (!Safer.from || Safer.from === Uint8Array.from) {\n  Safer.from = function (value, encodingOrOffset, length) {\n    if (typeof value === 'number') {\n      throw new TypeError('The \"value\" argument must not be of type number. Received type ' + typeof value)\n    }\n    if (value && typeof value.length === 'undefined') {\n      throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + typeof value)\n    }\n    return Buffer(value, encodingOrOffset, length)\n  }\n}\n\nif (!Safer.alloc) {\n  Safer.alloc = function (size, fill, encoding) {\n    if (typeof size !== 'number') {\n      throw new TypeError('The \"size\" argument must be of type number. Received type ' + typeof size)\n    }\n    if (size < 0 || size >= 2 * (1 << 30)) {\n      throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n    }\n    var buf = Buffer(size)\n    if (!fill || fill.length === 0) {\n      buf.fill(0)\n    } else if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n    return buf\n  }\n}\n\nif (!safer.kStringMaxLength) {\n  try {\n    safer.kStringMaxLength = process.binding('buffer').kStringMaxLength\n  } catch (e) {\n    // we can't determine kStringMaxLength in environments where process.binding\n    // is unsupported, so let's not set it\n  }\n}\n\nif (!safer.constants) {\n  safer.constants = {\n    MAX_LENGTH: safer.kMaxLength\n  }\n  if (safer.kStringMaxLength) {\n    safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength\n  }\n}\n\nmodule.exports = safer\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$process$browser","~$shadow.js","~$module$node_modules$buffer$index"]],"~:properties",["^5",["constants","kStringMaxLength","prototype","MAX_STRING_LENGTH","Buffer","alloc","from","MAX_LENGTH"]],"~:compiled-at",1695041440856,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$safer_buffer$safer.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAC1DC,CAAAA,CAAUH,CAAA,CAAQ,CAAR,CAGd,aAEII,EAAAA,CAASJ,CAAA,CAAQ,EAAR,CACb,KAAIK,EAASD,CAAOC,CAAAA,MAEhBC,EAAAA,CAAQ,EAIZ,KAFAC,IAAIA,CAEJ,GAAYH,EAAZ,CACOA,CAAOI,CAAAA,cAAP,CAAsBD,CAAtB,CAAL,EACY,YADZ,GACIA,CADJ,EACoC,QADpC,GAC4BA,CAD5B,GAEAD,CAAA,CAAMC,CAAN,CAFA,CAEaH,CAAA,CAAOG,CAAP,CAFb,CAKEE,EAAAA,CAAQH,CAAMD,CAAAA,MAAdI,CAAuB,EAC3B,KAAKF,CAAL,GAAYF,EAAZ,CACOA,CAAOG,CAAAA,cAAP,CAAsBD,CAAtB,CAAL,EACY,aADZ,GACIA,CADJ,EACqC,iBADrC,GAC6BA,CAD7B,GAEAE,CAAA,CAAMF,CAAN,CAFA,CAEaF,CAAA,CAAOE,CAAP,CAFb,CAKFD,EAAMD,CAAAA,MAAOK,CAAAA,SAAb,CAAyBL,CAAOK,CAAAA,SAE3BD,EAAME,CAAAA,IAAX,EAAmBF,CAAME,CAAAA,IAAzB,GAAkCC,UAAWD,CAAAA,IAA7C,GACEF,CAAME,CAAAA,IADR,CACeE,QAAS,CAACC,CAAD,CAAQC,CAAR,CAA0BC,CAA1B,CAAkC,CACtD,GAAqB,QAArB,GAAI,MAAOF,EAAX,CACE,KAAM,KAAIG,SAAJ,CAAc,iEAAd,CAAkF,MAAOH,EAAzF,CAAN,CAEF,GAAIA,CAAJ,EAAqC,WAArC,GAAa,MAAOA,EAAME,CAAAA,MAA1B,CACE,KAAM,KAAIC,SAAJ,CAAc,iHAAd;AAAkI,MAAOH,EAAzI,CAAN,CAEF,MAAOT,EAAA,CAAOS,CAAP,CAAcC,CAAd,CAAgCC,CAAhC,CAP+C,CAD1D,CAYKP,EAAMS,CAAAA,KAAX,GACET,CAAMS,CAAAA,KADR,CACgBC,QAAS,CAACC,CAAD,CAAOC,CAAP,CAAaC,CAAb,CAAuB,CAC5C,GAAoB,QAApB,GAAI,MAAOF,EAAX,CACE,KAAM,KAAIH,SAAJ,CAAc,4DAAd,CAA6E,MAAOG,EAApF,CAAN,CAEF,GAAW,CAAX,CAAIA,CAAJ,EAAwB,UAAxB,EAAgBA,CAAhB,CACE,KAAM,KAAIG,UAAJ,CAAe,aAAf,CAA+BH,CAA/B,CAAsC,gCAAtC,CAAN,CAEEI,CAAAA,CAAMnB,CAAA,CAAOe,CAAP,CACLC,EAAL,EAA6B,CAA7B,GAAaA,CAAKL,CAAAA,MAAlB,CAE+B,QAAxB,GAAI,MAAOM,EAAX,CACLE,CAAIH,CAAAA,IAAJ,CAASA,CAAT,CAAeC,CAAf,CADK,CAGLE,CAAIH,CAAAA,IAAJ,CAASA,CAAT,CALF,CACEG,CAAIH,CAAAA,IAAJ,CAAS,CAAT,CAMF,OAAOG,EAfqC,CADhD,CAoBA,IAAI,CAAClB,CAAMmB,CAAAA,gBAAX,CACE,GAAI,CACFnB,CAAMmB,CAAAA,gBAAN,CAAyBtB,CAAQuB,CAAAA,OAAR,CAAgB,QAAhB,CAA0BD,CAAAA,gBADjD,CAEF,MAAOE,CAAP,CAAU,EAMTrB,CAAMsB,CAAAA,SAAX,GACEtB,CAAMsB,CAAAA,SAGN,CAHkB,CAChBC,WAAYvB,CAAMwB,CAAAA,UADF,CAGlB,CAAIxB,CAAMmB,CAAAA,gBAAV;CACEnB,CAAMsB,CAAAA,SAAUG,CAAAA,iBADlB,CACsCzB,CAAMmB,CAAAA,gBAD5C,CAJF,CASAxB,EAAOC,CAAAA,OAAP,CAAiBI,CA9E6C;\",\n\"sources\":[\"node_modules/safer-buffer/safer.js\"],\n\"sourcesContent\":[\"shadow$provide[227] = function(global,require,module,exports) {\\nvar process = require('process');\\n/* eslint-disable node/no-deprecated-api */\\n\\n'use strict'\\n\\nvar buffer = require('buffer')\\nvar Buffer = buffer.Buffer\\n\\nvar safer = {}\\n\\nvar key\\n\\nfor (key in buffer) {\\n  if (!buffer.hasOwnProperty(key)) continue\\n  if (key === 'SlowBuffer' || key === 'Buffer') continue\\n  safer[key] = buffer[key]\\n}\\n\\nvar Safer = safer.Buffer = {}\\nfor (key in Buffer) {\\n  if (!Buffer.hasOwnProperty(key)) continue\\n  if (key === 'allocUnsafe' || key === 'allocUnsafeSlow') continue\\n  Safer[key] = Buffer[key]\\n}\\n\\nsafer.Buffer.prototype = Buffer.prototype\\n\\nif (!Safer.from || Safer.from === Uint8Array.from) {\\n  Safer.from = function (value, encodingOrOffset, length) {\\n    if (typeof value === 'number') {\\n      throw new TypeError('The \\\"value\\\" argument must not be of type number. Received type ' + typeof value)\\n    }\\n    if (value && typeof value.length === 'undefined') {\\n      throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + typeof value)\\n    }\\n    return Buffer(value, encodingOrOffset, length)\\n  }\\n}\\n\\nif (!Safer.alloc) {\\n  Safer.alloc = function (size, fill, encoding) {\\n    if (typeof size !== 'number') {\\n      throw new TypeError('The \\\"size\\\" argument must be of type number. Received type ' + typeof size)\\n    }\\n    if (size < 0 || size >= 2 * (1 << 30)) {\\n      throw new RangeError('The value \\\"' + size + '\\\" is invalid for option \\\"size\\\"')\\n    }\\n    var buf = Buffer(size)\\n    if (!fill || fill.length === 0) {\\n      buf.fill(0)\\n    } else if (typeof encoding === 'string') {\\n      buf.fill(fill, encoding)\\n    } else {\\n      buf.fill(fill)\\n    }\\n    return buf\\n  }\\n}\\n\\nif (!safer.kStringMaxLength) {\\n  try {\\n    safer.kStringMaxLength = process.binding('buffer').kStringMaxLength\\n  } catch (e) {\\n    // we can't determine kStringMaxLength in environments where process.binding\\n    // is unsupported, so let's not set it\\n  }\\n}\\n\\nif (!safer.constants) {\\n  safer.constants = {\\n    MAX_LENGTH: safer.kMaxLength\\n  }\\n  if (safer.kStringMaxLength) {\\n    safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength\\n  }\\n}\\n\\nmodule.exports = safer\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"process\",\"buffer\",\"Buffer\",\"safer\",\"key\",\"hasOwnProperty\",\"Safer\",\"prototype\",\"from\",\"Uint8Array\",\"Safer.from\",\"value\",\"encodingOrOffset\",\"length\",\"TypeError\",\"alloc\",\"Safer.alloc\",\"size\",\"fill\",\"encoding\",\"RangeError\",\"buf\",\"kStringMaxLength\",\"binding\",\"e\",\"constants\",\"MAX_LENGTH\",\"kMaxLength\",\"MAX_STRING_LENGTH\"]\n}\n"]