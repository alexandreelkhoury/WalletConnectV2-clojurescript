{
"version":3,
"file":"module$node_modules$$noble$curves$abstract$utils.js",
"lineCount":11,
"mappings":"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",
"sources":["node_modules/@noble/curves/abstract/utils.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$noble$curves$abstract$utils\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateObject = exports.createHmacDrbg = exports.bitMask = exports.bitSet = exports.bitGet = exports.bitLen = exports.utf8ToBytes = exports.equalBytes = exports.concatBytes = exports.ensureBytes = exports.numberToVarBytesBE = exports.numberToBytesLE = exports.numberToBytesBE = exports.bytesToNumberLE = exports.bytesToNumberBE = exports.hexToBytes = exports.hexToNumber = exports.numberToHexUnpadded = exports.bytesToHex = void 0;\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst u8a = (a) => a instanceof Uint8Array;\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nfunction bytesToHex(bytes) {\n    if (!u8a(bytes))\n        throw new Error('Uint8Array expected');\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\nexports.bytesToHex = bytesToHex;\nfunction numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nexports.numberToHexUnpadded = numberToHexUnpadded;\nfunction hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    // Big Endian\n    return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\nexports.hexToNumber = hexToNumber;\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const len = hex.length;\n    if (len % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n    const array = new Uint8Array(len / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nexports.hexToBytes = hexToBytes;\n// BE: Big Endian, LE: Little Endian\nfunction bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nexports.bytesToNumberBE = bytesToNumberBE;\nfunction bytesToNumberLE(bytes) {\n    if (!u8a(bytes))\n        throw new Error('Uint8Array expected');\n    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\nexports.bytesToNumberLE = bytesToNumberLE;\nfunction numberToBytesBE(n, len) {\n    return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexports.numberToBytesBE = numberToBytesBE;\nfunction numberToBytesLE(n, len) {\n    return numberToBytesBE(n, len).reverse();\n}\nexports.numberToBytesLE = numberToBytesLE;\n// Unpadded, rarely used\nfunction numberToVarBytesBE(n) {\n    return hexToBytes(numberToHexUnpadded(n));\n}\nexports.numberToVarBytesBE = numberToVarBytesBE;\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nfunction ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === 'string') {\n        try {\n            res = hexToBytes(hex);\n        }\n        catch (e) {\n            throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n        }\n    }\n    else if (u8a(hex)) {\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\n        res = Uint8Array.from(hex);\n    }\n    else {\n        throw new Error(`${title} must be hex string or Uint8Array`);\n    }\n    const len = res.length;\n    if (typeof expectedLength === 'number' && len !== expectedLength)\n        throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n    return res;\n}\nexports.ensureBytes = ensureBytes;\n/**\n * Copies several Uint8Arrays into one.\n */\nfunction concatBytes(...arrays) {\n    const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n    let pad = 0; // walk through each item, ensure they have proper type\n    arrays.forEach((a) => {\n        if (!u8a(a))\n            throw new Error('Uint8Array expected');\n        r.set(a, pad);\n        pad += a.length;\n    });\n    return r;\n}\nexports.concatBytes = concatBytes;\nfunction equalBytes(b1, b2) {\n    // We don't care about timing attacks here\n    if (b1.length !== b2.length)\n        return false;\n    for (let i = 0; i < b1.length; i++)\n        if (b1[i] !== b2[i])\n            return false;\n    return true;\n}\nexports.equalBytes = equalBytes;\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\nexports.utf8ToBytes = utf8ToBytes;\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nfunction bitLen(n) {\n    let len;\n    for (len = 0; n > _0n; n >>= _1n, len += 1)\n        ;\n    return len;\n}\nexports.bitLen = bitLen;\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nfunction bitGet(n, pos) {\n    return (n >> BigInt(pos)) & _1n;\n}\nexports.bitGet = bitGet;\n/**\n * Sets single bit at position.\n */\nconst bitSet = (n, pos, value) => {\n    return n | ((value ? _1n : _0n) << BigInt(pos));\n};\nexports.bitSet = bitSet;\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nconst bitMask = (n) => (_2n << BigInt(n - 1)) - _1n;\nexports.bitMask = bitMask;\n// DRBG\nconst u8n = (data) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr) => Uint8Array.from(arr); // another shortcut\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nfunction createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== 'number' || hashLen < 2)\n        throw new Error('hashLen must be a number');\n    if (typeof qByteLen !== 'number' || qByteLen < 2)\n        throw new Error('qByteLen must be a number');\n    if (typeof hmacFn !== 'function')\n        throw new Error('hmacFn must be a function');\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = () => {\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = u8n()) => {\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0)\n            return;\n        k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = () => {\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000)\n            throw new Error('drbg: tried 1000 values');\n        let len = 0;\n        const out = [];\n        while (len < qByteLen) {\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return concatBytes(...out);\n    };\n    const genUntil = (seed, pred) => {\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while (!(res = pred(gen())))\n            reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\nexports.createHmacDrbg = createHmacDrbg;\n// Validating curves and fields\nconst validatorFns = {\n    bigint: (val) => typeof val === 'bigint',\n    function: (val) => typeof val === 'function',\n    boolean: (val) => typeof val === 'boolean',\n    string: (val) => typeof val === 'string',\n    stringOrUint8Array: (val) => typeof val === 'string' || val instanceof Uint8Array,\n    isSafeInteger: (val) => Number.isSafeInteger(val),\n    array: (val) => Array.isArray(val),\n    field: (val, object) => object.Fp.isValid(val),\n    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nfunction validateObject(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional) => {\n        const checkVal = validatorFns[type];\n        if (typeof checkVal !== 'function')\n            throw new Error(`Invalid validator \"${type}\", expected function`);\n        const val = object[fieldName];\n        if (isOptional && val === undefined)\n            return;\n        if (!checkVal(val, object)) {\n            throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);\n        }\n    };\n    for (const [fieldName, type] of Object.entries(validators))\n        checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))\n        checkField(fieldName, type, true);\n    return object;\n}\nexports.validateObject = validateObject;\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n//# sourceMappingURL=utils.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","bytesToHex","bytes","Uint8Array","Error","hex","i","length","hexes","numberToHexUnpadded","num","toString","hexToNumber","BigInt","hexToBytes","len","array","j","hexByte","slice","byte","Number","parseInt","isNaN","numberToBytesBE","n","padStart","concatBytes","arrays","r","reduce","sum","a","pad","forEach","set","Object","defineProperty","value","validateObject","createHmacDrbg","bitMask","bitSet","bitGet","bitLen","utf8ToBytes","equalBytes","ensureBytes","numberToVarBytesBE","numberToBytesLE","bytesToNumberLE","bytesToNumberBE","_0n","_1n","_2n","Array","from","_","reverse","title","expectedLength","res","e","b1","b2","str","encode","TextEncoder","pos","hashLen","qByteLen","hmacFn","v","k","reseed","seed","data","b","arr","gen","out","sl","push","pred","genUntil","fill","validatorFns","bigint","val","function","boolean","string","stringOrUint8Array","isSafeInteger","isArray","field","object","Fp","isValid","hash","outputLen","validators","optValidators","checkField","fieldName","type","isOptional","checkVal","undefined","String","entries"]
}
