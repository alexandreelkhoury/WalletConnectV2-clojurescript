["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/viem/_cjs/actions/wallet/signTransaction.js"],"~:js","shadow$provide.module$node_modules$viem$_cjs$actions$wallet$signTransaction=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.signTransaction=void 0;const parseAccount_js_1=require(\"module$node_modules$viem$_cjs$accounts$utils$parseAccount\"),account_js_1=require(\"module$node_modules$viem$_cjs$errors$account\"),chain_js_1=require(\"module$node_modules$viem$_cjs$utils$chain\"),transactionRequest_js_1=require(\"module$node_modules$viem$_cjs$utils$formatters$transactionRequest\"),\nindex_js_1=require(\"module$node_modules$viem$_cjs$utils$index\"),assertRequest_js_1=require(\"module$node_modules$viem$_cjs$utils$transaction$assertRequest\"),getChainId_js_1=require(\"module$node_modules$viem$_cjs$actions$public$getChainId\");exports.signTransaction=async function(client,args){const {account:account_=client.account,chain=client.chain,...transaction}=args;if(!account_)throw new account_js_1.AccountNotFoundError({docsPath:\"/docs/actions/wallet/signTransaction\"});const account=(0,parseAccount_js_1.parseAccount)(account_);\n(0,assertRequest_js_1.assertRequest)({account,...args});args=await (0,getChainId_js_1.getChainId)(client);null!==chain&&(0,chain_js_1.assertCurrentChain)({currentChainId:args,chain});const format=(chain?.formatters||client.chain?.formatters)?.transactionRequest?.format||transactionRequest_js_1.formatTransactionRequest;return\"local\"===account.type?account.signTransaction({chainId:args,...transaction},{serializer:client.chain?.serializers?.transaction}):await client.request({method:\"eth_signTransaction\",\nparams:[{...format(transaction),chainId:(0,index_js_1.numberToHex)(args),from:account.address}]})}}","~:source","shadow$provide[\"module$node_modules$viem$_cjs$actions$wallet$signTransaction\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.signTransaction = void 0;\nconst parseAccount_js_1 = require(\"../../accounts/utils/parseAccount.js\");\nconst account_js_1 = require(\"../../errors/account.js\");\nconst chain_js_1 = require(\"../../utils/chain.js\");\nconst transactionRequest_js_1 = require(\"../../utils/formatters/transactionRequest.js\");\nconst index_js_1 = require(\"../../utils/index.js\");\nconst assertRequest_js_1 = require(\"../../utils/transaction/assertRequest.js\");\nconst getChainId_js_1 = require(\"../public/getChainId.js\");\nasync function signTransaction(client, args) {\n    const { account: account_ = client.account, chain = client.chain, ...transaction } = args;\n    if (!account_)\n        throw new account_js_1.AccountNotFoundError({\n            docsPath: '/docs/actions/wallet/signTransaction',\n        });\n    const account = (0, parseAccount_js_1.parseAccount)(account_);\n    (0, assertRequest_js_1.assertRequest)({\n        account,\n        ...args,\n    });\n    const chainId = await (0, getChainId_js_1.getChainId)(client);\n    if (chain !== null)\n        (0, chain_js_1.assertCurrentChain)({\n            currentChainId: chainId,\n            chain,\n        });\n    const formatters = chain?.formatters || client.chain?.formatters;\n    const format = formatters?.transactionRequest?.format || transactionRequest_js_1.formatTransactionRequest;\n    if (account.type === 'local')\n        return account.signTransaction({\n            chainId,\n            ...transaction,\n        }, { serializer: client.chain?.serializers?.transaction });\n    return await client.request({\n        method: 'eth_signTransaction',\n        params: [\n            {\n                ...format(transaction),\n                chainId: (0, index_js_1.numberToHex)(chainId),\n                from: account.address,\n            },\n        ],\n    });\n}\nexports.signTransaction = signTransaction;\n//# sourceMappingURL=signTransaction.js.map\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$viem$_cjs$actions$public$getChainId","~$module$node_modules$viem$_cjs$utils$transaction$assertRequest","~$module$node_modules$viem$_cjs$utils$formatters$transactionRequest","~$module$node_modules$viem$_cjs$errors$account","~$shadow.js","~$module$node_modules$viem$_cjs$accounts$utils$parseAccount","~$module$node_modules$viem$_cjs$utils$chain","~$module$node_modules$viem$_cjs$utils$index"]],"~:properties",["^5",["chainId","currentChainId","params","method","__esModule","signTransaction","value","account","serializer","docsPath","from","chain"]],"~:compiled-at",1695111490364,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$viem$_cjs$actions$wallet$signTransaction.js\",\n\"lineCount\":4,\n\"mappings\":\"AAAAA,cAAA,CAAA,4DAAA,CAAiF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAEzHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CACAH,QAAQI,CAAAA,eAAR,CAA0B,IAAK,EAC/B,OAAMC,kBAAoBP,OAAA,CAAQ,2DAAR,CAA1B,CACMQ,aAAeR,OAAA,CAAQ,8CAAR,CADrB,CAEMS,WAAaT,OAAA,CAAQ,2CAAR,CAFnB,CAGMU,wBAA0BV,OAAA,CAAQ,mEAAR,CAHhC;AAIMW,WAAaX,OAAA,CAAQ,2CAAR,CAJnB,CAKMY,mBAAqBZ,OAAA,CAAQ,+DAAR,CAL3B,CAMMa,gBAAkBb,OAAA,CAAQ,yDAAR,CAoCxBE,QAAQI,CAAAA,eAAR,CAnCAA,cAA8B,CAACQ,MAAD,CAASC,IAAT,CAAe,CACzC,MAAM,CAAE,QAASC,QAAA,CAAWF,MAAOG,CAAAA,OAA7B,CAAsCC,KAAA,CAAQJ,MAAOI,CAAAA,KAArD,CAA4D,GAAGC,WAA/D,CAAA,CAA+EJ,IACrF,IAAI,CAACC,QAAL,CACI,KAAM,KAAIR,YAAaY,CAAAA,oBAAjB,CAAsC,CACxCC,SAAU,sCAD8B,CAAtC,CAAN,CAGJ,MAAMJ,QAAU,GAAIV,iBAAkBe,CAAAA,YAAtB,EAAoCN,QAApC,CAChB;GAAIJ,kBAAmBW,CAAAA,aAAvB,EAAsC,CAClCN,OADkC,CAElC,GAAGF,IAF+B,CAAtC,CAIMS,KAAAA,CAAU,MAAM,GAAIX,eAAgBY,CAAAA,UAApB,EAAgCX,MAAhC,CACR,KAAd,GAAII,KAAJ,EACI,GAAIT,UAAWiB,CAAAA,kBAAf,EAAmC,CAC/BC,eAAgBH,IADe,CAE/BN,KAF+B,CAAnC,CAKJ,OAAMU,OAAqBC,CADRX,KAAOY,EAAAA,UACCD,EADaf,MAAOI,CAAAA,KAAOY,EAAAA,UAC3BD,GAAAA,kBAAoBD,EAAAA,MAAzCA,EAAmDlB,uBAAwBqB,CAAAA,wBACjF,OAAqB,OAArB,GAAId,OAAQe,CAAAA,IAAZ,CACWf,OAAQX,CAAAA,eAAR,CAAwB,CAC3BkB,QAAAA,IAD2B,CAE3B,GAAGL,WAFwB,CAAxB,CAGJ,CAAEc,WAAYnB,MAAOI,CAAAA,KAAOgB,EAAAA,WAAaf,EAAAA,WAAzC,CAHI,CADX,CAKO,MAAML,MAAOqB,CAAAA,OAAP,CAAe,CACxBC,OAAQ,qBADgB;AAExBC,OAAQ,CACJ,CACI,GAAGT,MAAA,CAAOT,WAAP,CADP,CAEIK,QAAS,GAAIb,UAAW2B,CAAAA,WAAf,EAA4Bd,IAA5B,CAFb,CAGIe,KAAMtB,OAAQuB,CAAAA,OAHlB,CADI,CAFgB,CAAf,CAxB4B,CAX4E;\",\n\"sources\":[\"node_modules/viem/_cjs/actions/wallet/signTransaction.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$viem$_cjs$actions$wallet$signTransaction\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nexports.signTransaction = void 0;\\nconst parseAccount_js_1 = require(\\\"../../accounts/utils/parseAccount.js\\\");\\nconst account_js_1 = require(\\\"../../errors/account.js\\\");\\nconst chain_js_1 = require(\\\"../../utils/chain.js\\\");\\nconst transactionRequest_js_1 = require(\\\"../../utils/formatters/transactionRequest.js\\\");\\nconst index_js_1 = require(\\\"../../utils/index.js\\\");\\nconst assertRequest_js_1 = require(\\\"../../utils/transaction/assertRequest.js\\\");\\nconst getChainId_js_1 = require(\\\"../public/getChainId.js\\\");\\nasync function signTransaction(client, args) {\\n    const { account: account_ = client.account, chain = client.chain, ...transaction } = args;\\n    if (!account_)\\n        throw new account_js_1.AccountNotFoundError({\\n            docsPath: '/docs/actions/wallet/signTransaction',\\n        });\\n    const account = (0, parseAccount_js_1.parseAccount)(account_);\\n    (0, assertRequest_js_1.assertRequest)({\\n        account,\\n        ...args,\\n    });\\n    const chainId = await (0, getChainId_js_1.getChainId)(client);\\n    if (chain !== null)\\n        (0, chain_js_1.assertCurrentChain)({\\n            currentChainId: chainId,\\n            chain,\\n        });\\n    const formatters = chain?.formatters || client.chain?.formatters;\\n    const format = formatters?.transactionRequest?.format || transactionRequest_js_1.formatTransactionRequest;\\n    if (account.type === 'local')\\n        return account.signTransaction({\\n            chainId,\\n            ...transaction,\\n        }, { serializer: client.chain?.serializers?.transaction });\\n    return await client.request({\\n        method: 'eth_signTransaction',\\n        params: [\\n            {\\n                ...format(transaction),\\n                chainId: (0, index_js_1.numberToHex)(chainId),\\n                from: account.address,\\n            },\\n        ],\\n    });\\n}\\nexports.signTransaction = signTransaction;\\n//# sourceMappingURL=signTransaction.js.map\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"signTransaction\",\"parseAccount_js_1\",\"account_js_1\",\"chain_js_1\",\"transactionRequest_js_1\",\"index_js_1\",\"assertRequest_js_1\",\"getChainId_js_1\",\"client\",\"args\",\"account_\",\"account\",\"chain\",\"transaction\",\"AccountNotFoundError\",\"docsPath\",\"parseAccount\",\"assertRequest\",\"chainId\",\"getChainId\",\"assertCurrentChain\",\"currentChainId\",\"format\",\"transactionRequest\",\"formatters\",\"formatTransactionRequest\",\"type\",\"serializer\",\"serializers\",\"request\",\"method\",\"params\",\"numberToHex\",\"from\",\"address\"]\n}\n"]