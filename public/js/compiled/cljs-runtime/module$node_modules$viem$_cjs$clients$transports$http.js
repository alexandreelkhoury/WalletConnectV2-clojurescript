shadow$provide.module$node_modules$viem$_cjs$clients$transports$http=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.http=void 0;const request_js_1=require("module$node_modules$viem$_cjs$errors$request"),transport_js_1=require("module$node_modules$viem$_cjs$errors$transport"),createBatchScheduler_js_1=require("module$node_modules$viem$_cjs$utils$promise$createBatchScheduler"),rpc_js_1=require("module$node_modules$viem$_cjs$utils$rpc"),createTransport_js_1=
require("module$node_modules$viem$_cjs$clients$transports$createTransport");exports.http=function(url,config={}){const {batch,fetchOptions,key="http",name="HTTP JSON-RPC",retryDelay}=config;return({chain,retryCount:retryCount_,timeout:timeout_})=>{const {batchSize=1E3,wait=0}="object"===typeof batch?batch:{};retryCount_=config.retryCount??retryCount_;const timeout=timeout_??config.timeout??1E4,url_=url||chain?.rpcUrls.default.http[0];if(!url_)throw new transport_js_1.UrlRequiredError;return(0,createTransport_js_1.createTransport)({key,
name,async request({method,params}){method={method,params};const {schedule}=(0,createBatchScheduler_js_1.createBatchScheduler)({id:`${url}`,wait,shouldSplitBatch(requests){return requests.length>batchSize},fn:body=>rpc_js_1.rpc.http(url_,{body,fetchOptions,timeout})}),[{error,result}]=await (async body=>batch?schedule(body):[await rpc_js_1.rpc.http(url_,{body,fetchOptions,timeout})])(method);if(error)throw new request_js_1.RpcRequestError({body:method,error,url:url_});return result},retryCount:retryCount_,
retryDelay,timeout,type:"http"},{url})}}}
//# sourceMappingURL=module$node_modules$viem$_cjs$clients$transports$http.js.map
