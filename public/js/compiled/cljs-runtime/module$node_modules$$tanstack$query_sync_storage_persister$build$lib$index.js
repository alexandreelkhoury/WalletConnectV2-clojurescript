shadow$provide.module$node_modules$$tanstack$query_sync_storage_persister$build$lib$index=function(global,require,module,exports){function throttle(func,wait=100){let timer=null,params;return function(...args){params=args;null===timer&&(timer=setTimeout(()=>{func(...params);timer=null},wait))}}function noop(){}Object.defineProperty(exports,"__esModule",{value:!0});exports.createSyncStoragePersister=function({storage,key="REACT_QUERY_OFFLINE_CACHE",throttleTime=1E3,serialize=JSON.stringify,deserialize=
JSON.parse,retry}){if(storage){const trySave=persistedClient=>{try{storage.setItem(key,serialize(persistedClient))}catch(error){return error}};return{persistClient:throttle(persistedClient=>{let error=trySave(persistedClient),errorCount=0;for(;error&&persistedClient;)errorCount++,(persistedClient=null==retry?void 0:retry({persistedClient,error,errorCount}))&&(error=trySave(persistedClient))},throttleTime),restoreClient:()=>{const cacheString=storage.getItem(key);if(cacheString)return deserialize(cacheString)},
removeClient:()=>{storage.removeItem(key)}}}return{persistClient:noop,restoreClient:()=>{},removeClient:noop}}}
//# sourceMappingURL=module$node_modules$$tanstack$query_sync_storage_persister$build$lib$index.js.map
