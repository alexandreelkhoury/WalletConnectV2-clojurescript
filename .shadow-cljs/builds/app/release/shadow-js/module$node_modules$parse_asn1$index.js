["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/parse-asn1/index.js"],"~:js","shadow$provide[246]=function(S,A,V,q){function F(n){if(\"object\"===typeof n&&!p.isBuffer(n)){var l=n.passphrase;n=n.key}\"string\"===typeof n&&(n=p.from(n));var h=y(n,l);n=h.tag;h=h.data;switch(n){case \"CERTIFICATE\":var k=G.certificate.decode(h,\"der\").tbsCertificate.subjectPublicKeyInfo;case \"PUBLIC KEY\":switch(k||(k=G.PublicKey.decode(h,\"der\")),l=k.algorithm.algorithm.join(\".\"),l){case \"1.2.840.113549.1.1.1\":return G.RSAPublicKey.decode(k.subjectPublicKey.data,\"der\");case \"1.2.840.10045.2.1\":return k.subjectPrivateKey=\nk.subjectPublicKey,{type:\"ec\",data:k};case \"1.2.840.10040.4.1\":return k.algorithm.params.pub_key=G.DSAparam.decode(k.subjectPublicKey.data,\"der\"),{type:\"dsa\",data:k.algorithm.params};default:throw Error(\"unknown key id \"+l);}case \"ENCRYPTED PRIVATE KEY\":var t=h=G.EncryptedPrivateKey.decode(h,\"der\");h=l;var B=t.algorithm.decrypt.kde.kdeparams.salt,E=parseInt(t.algorithm.decrypt.kde.kdeparams.iters.toString(),10);k=r[t.algorithm.decrypt.cipher.algo.join(\".\")];n=t.algorithm.decrypt.cipher.iv;l=t.subjectPrivateKey;\nt=parseInt(k.split(\"-\")[1],10)/8;h=u.pbkdf2Sync(h,B,E,t,\"sha1\");k=e.createDecipheriv(k,h,n);n=[];n.push(k.update(l));n.push(k.final());h=p.concat(n);case \"PRIVATE KEY\":switch(k=G.PrivateKey.decode(h,\"der\"),l=k.algorithm.algorithm.join(\".\"),l){case \"1.2.840.113549.1.1.1\":return G.RSAPrivateKey.decode(k.subjectPrivateKey,\"der\");case \"1.2.840.10045.2.1\":return{curve:k.algorithm.curve,privateKey:G.ECPrivateKey.decode(k.subjectPrivateKey,\"der\").privateKey};case \"1.2.840.10040.4.1\":return k.algorithm.params.priv_key=\nG.DSAparam.decode(k.subjectPrivateKey,\"der\"),{type:\"dsa\",params:k.algorithm.params};default:throw Error(\"unknown key id \"+l);}case \"RSA PUBLIC KEY\":return G.RSAPublicKey.decode(h,\"der\");case \"RSA PRIVATE KEY\":return G.RSAPrivateKey.decode(h,\"der\");case \"DSA PRIVATE KEY\":return{type:\"dsa\",params:G.DSAPrivateKey.decode(h,\"der\")};case \"EC PRIVATE KEY\":return h=G.ECPrivateKey.decode(h,\"der\"),{curve:h.parameters.value,privateKey:h.privateKey};default:throw Error(\"unknown key type \"+n);}}var G=A(243),r=\nA(244),y=A(245),e=A(200),u=A(174),p=A(111).Buffer;V.exports=F;F.signature=G.signature}","~:source","shadow$provide[246] = function(global,require,module,exports) {\nvar asn1 = require('./asn1')\nvar aesid = require('./aesid.json')\nvar fixProc = require('./fixProc')\nvar ciphers = require('browserify-aes')\nvar compat = require('pbkdf2')\nvar Buffer = require('safe-buffer').Buffer\nmodule.exports = parseKeys\n\nfunction parseKeys (buffer) {\n  var password\n  if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {\n    password = buffer.passphrase\n    buffer = buffer.key\n  }\n  if (typeof buffer === 'string') {\n    buffer = Buffer.from(buffer)\n  }\n\n  var stripped = fixProc(buffer, password)\n\n  var type = stripped.tag\n  var data = stripped.data\n  var subtype, ndata\n  switch (type) {\n    case 'CERTIFICATE':\n      ndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo\n      // falls through\n    case 'PUBLIC KEY':\n      if (!ndata) {\n        ndata = asn1.PublicKey.decode(data, 'der')\n      }\n      subtype = ndata.algorithm.algorithm.join('.')\n      switch (subtype) {\n        case '1.2.840.113549.1.1.1':\n          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')\n        case '1.2.840.10045.2.1':\n          ndata.subjectPrivateKey = ndata.subjectPublicKey\n          return {\n            type: 'ec',\n            data: ndata\n          }\n        case '1.2.840.10040.4.1':\n          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der')\n          return {\n            type: 'dsa',\n            data: ndata.algorithm.params\n          }\n        default: throw new Error('unknown key id ' + subtype)\n      }\n      // throw new Error('unknown key type ' + type)\n    case 'ENCRYPTED PRIVATE KEY':\n      data = asn1.EncryptedPrivateKey.decode(data, 'der')\n      data = decrypt(data, password)\n      // falls through\n    case 'PRIVATE KEY':\n      ndata = asn1.PrivateKey.decode(data, 'der')\n      subtype = ndata.algorithm.algorithm.join('.')\n      switch (subtype) {\n        case '1.2.840.113549.1.1.1':\n          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')\n        case '1.2.840.10045.2.1':\n          return {\n            curve: ndata.algorithm.curve,\n            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey\n          }\n        case '1.2.840.10040.4.1':\n          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der')\n          return {\n            type: 'dsa',\n            params: ndata.algorithm.params\n          }\n        default: throw new Error('unknown key id ' + subtype)\n      }\n      // throw new Error('unknown key type ' + type)\n    case 'RSA PUBLIC KEY':\n      return asn1.RSAPublicKey.decode(data, 'der')\n    case 'RSA PRIVATE KEY':\n      return asn1.RSAPrivateKey.decode(data, 'der')\n    case 'DSA PRIVATE KEY':\n      return {\n        type: 'dsa',\n        params: asn1.DSAPrivateKey.decode(data, 'der')\n      }\n    case 'EC PRIVATE KEY':\n      data = asn1.ECPrivateKey.decode(data, 'der')\n      return {\n        curve: data.parameters.value,\n        privateKey: data.privateKey\n      }\n    default: throw new Error('unknown key type ' + type)\n  }\n}\nparseKeys.signature = asn1.signature\nfunction decrypt (data, password) {\n  var salt = data.algorithm.decrypt.kde.kdeparams.salt\n  var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10)\n  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')]\n  var iv = data.algorithm.decrypt.cipher.iv\n  var cipherText = data.subjectPrivateKey\n  var keylen = parseInt(algo.split('-')[1], 10) / 8\n  var key = compat.pbkdf2Sync(password, salt, iters, keylen, 'sha1')\n  var cipher = ciphers.createDecipheriv(algo, key, iv)\n  var out = []\n  out.push(cipher.update(cipherText))\n  out.push(cipher.final())\n  return Buffer.concat(out)\n}\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$parse_asn1$fixProc","~$module$node_modules$parse_asn1$asn1","~$module$node_modules$pbkdf2$browser","~$shadow.js","~$module$node_modules$safe_buffer$index","~$module$node_modules$parse_asn1$aesid_json","~$module$node_modules$browserify_aes$browser"]],"~:properties",["^5",["curve","params","subjectPrivateKey","pub_key","privateKey","signature","priv_key","type","data"]],"~:compiled-at",1695041440861,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$parse_asn1$index.js\",\n\"lineCount\":5,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAS9DC,QAASA,EAAU,CAACC,CAAD,CAAS,CAE1B,GAAsB,QAAtB,GAAI,MAAOA,EAAX,EAAkC,CAACC,CAAOC,CAAAA,QAAP,CAAgBF,CAAhB,CAAnC,CAA4D,CAC1D,IAAAG,EAAWH,CAAOI,CAAAA,UAClBJ,EAAA,CAASA,CAAOK,CAAAA,GAF0C,CAItC,QAAtB,GAAI,MAAOL,EAAX,GACEA,CADF,CACWC,CAAOK,CAAAA,IAAP,CAAYN,CAAZ,CADX,CAIA,KAAIO,EAAWC,CAAA,CAAQR,CAAR,CAAgBG,CAAhB,CAEXM,EAAAA,CAAOF,CAASG,CAAAA,GAChBC,EAAAA,CAAOJ,CAASI,CAAAA,IAEpB,QAAQF,CAAR,EACE,KAAK,aAAL,CACE,IAAAG,EAAQC,CAAKC,CAAAA,WAAYC,CAAAA,MAAjB,CAAwBJ,CAAxB,CAA8B,KAA9B,CAAqCK,CAAAA,cAAeC,CAAAA,oBAE9D,MAAK,YAAL,CAKE,OAJKL,CAIGM,GAHNN,CAGMM,CAHEL,CAAKM,CAAAA,SAAUJ,CAAAA,MAAf,CAAsBJ,CAAtB,CAA4B,KAA5B,CAGFO,EADRA,CACQA,CADEN,CAAMQ,CAAAA,SAAUA,CAAAA,SAAUC,CAAAA,IAA1B,CAA+B,GAA/B,CACFH,CAAAA,CAAR,EACE,KAAK,sBAAL,CACE,MAAOL,EAAKS,CAAAA,YAAaP,CAAAA,MAAlB,CAAyBH,CAAMW,CAAAA,gBAAiBZ,CAAAA,IAAhD,CAAsD,KAAtD,CACT,MAAK,mBAAL,CAEE,MADAC,EAAMY,CAAAA,iBACC;AADmBZ,CAAMW,CAAAA,gBACzB,CAAA,CACLd,KAAM,IADD,CAELE,KAAMC,CAFD,CAIT,MAAK,mBAAL,CAEE,MADAA,EAAMQ,CAAAA,SAAUK,CAAAA,MAAOC,CAAAA,OAChB,CAD0Bb,CAAKc,CAAAA,QAASZ,CAAAA,MAAd,CAAqBH,CAAMW,CAAAA,gBAAiBZ,CAAAA,IAA5C,CAAkD,KAAlD,CAC1B,CAAA,CACLF,KAAM,KADD,CAELE,KAAMC,CAAMQ,CAAAA,SAAUK,CAAAA,MAFjB,CAIT,SAAS,KAAUG,MAAJ,CAAU,iBAAV,CAA8BV,CAA9B,CAAN,CAfX,CAkBF,KAAK,uBAAL,CAEiBP,IAAAA,EADfA,CACeA,CADRE,CAAKgB,CAAAA,mBAAoBd,CAAAA,MAAzB,CAAgCJ,CAAhC,CAAsC,KAAtC,CACcR,EAAAA,CAAAA,CA0CzB,KAAI2B,EAAOnB,CAAKS,CAAAA,SAAUW,CAAAA,OAAQC,CAAAA,GAAIC,CAAAA,SAAUH,CAAAA,IAAhD,CACII,EAAQC,QAAA,CAASxB,CAAKS,CAAAA,SAAUW,CAAAA,OAAQC,CAAAA,GAAIC,CAAAA,SAAUC,CAAAA,KAAME,CAAAA,QAA3C,EAAT,CAAgE,EAAhE,CACRC,EAAAA,CAAOC,CAAA,CAAM3B,CAAKS,CAAAA,SAAUW,CAAAA,OAAQQ,CAAAA,MAAOF,CAAAA,IAAKhB,CAAAA,IAAnC,CAAwC,GAAxC,CAAN,CACPmB,EAAAA,CAAK7B,CAAKS,CAAAA,SAAUW,CAAAA,OAAQQ,CAAAA,MAAOC,CAAAA,EACnCC,EAAAA,CAAa9B,CAAKa,CAAAA,iBAClBkB;CAAAA,CAASP,QAAA,CAASE,CAAKM,CAAAA,KAAL,CAAW,GAAX,CAAA,CAAgB,CAAhB,CAAT,CAA6B,EAA7B,CAATD,CAA4C,CAC5CrC,EAAAA,CAAMuC,CAAOC,CAAAA,UAAP,CAAkB1C,CAAlB,CAA4B2B,CAA5B,CAAkCI,CAAlC,CAAyCQ,CAAzC,CAAiD,MAAjD,CACNH,EAAAA,CAASO,CAAQC,CAAAA,gBAAR,CAAyBV,CAAzB,CAA+BhC,CAA/B,CAAoCmC,CAApC,CACTQ,EAAAA,CAAM,EACVA,EAAIC,CAAAA,IAAJ,CAASV,CAAOW,CAAAA,MAAP,CAAcT,CAAd,CAAT,CACAO,EAAIC,CAAAA,IAAJ,CAASV,CAAOY,CAAAA,KAAP,EAAT,CACA,EAAA,CAAOlD,CAAOmD,CAAAA,MAAP,CAAcJ,CAAd,CAnDL,MAAK,aAAL,CAGE,OAFApC,CAEQM,CAFAL,CAAKwC,CAAAA,UAAWtC,CAAAA,MAAhB,CAAuBJ,CAAvB,CAA6B,KAA7B,CAEAO,CADRA,CACQA,CADEN,CAAMQ,CAAAA,SAAUA,CAAAA,SAAUC,CAAAA,IAA1B,CAA+B,GAA/B,CACFH,CAAAA,CAAR,EACE,KAAK,sBAAL,CACE,MAAOL,EAAKyC,CAAAA,aAAcvC,CAAAA,MAAnB,CAA0BH,CAAMY,CAAAA,iBAAhC,CAAmD,KAAnD,CACT,MAAK,mBAAL,CACE,MAAO,CACL+B,MAAO3C,CAAMQ,CAAAA,SAAUmC,CAAAA,KADlB,CAELC,WAAY3C,CAAK4C,CAAAA,YAAa1C,CAAAA,MAAlB,CAAyBH,CAAMY,CAAAA,iBAA/B,CAAkD,KAAlD,CAAyDgC,CAAAA,UAFhE,CAIT,MAAK,mBAAL,CAEE,MADA5C,EAAMQ,CAAAA,SAAUK,CAAAA,MAAOiC,CAAAA,QAChB;AAD2B7C,CAAKc,CAAAA,QAASZ,CAAAA,MAAd,CAAqBH,CAAMY,CAAAA,iBAA3B,CAA8C,KAA9C,CAC3B,CAAA,CACLf,KAAM,KADD,CAELgB,OAAQb,CAAMQ,CAAAA,SAAUK,CAAAA,MAFnB,CAIT,SAAS,KAAUG,MAAJ,CAAU,iBAAV,CAA8BV,CAA9B,CAAN,CAdX,CAiBF,KAAK,gBAAL,CACE,MAAOL,EAAKS,CAAAA,YAAaP,CAAAA,MAAlB,CAAyBJ,CAAzB,CAA+B,KAA/B,CACT,MAAK,iBAAL,CACE,MAAOE,EAAKyC,CAAAA,aAAcvC,CAAAA,MAAnB,CAA0BJ,CAA1B,CAAgC,KAAhC,CACT,MAAK,iBAAL,CACE,MAAO,CACLF,KAAM,KADD,CAELgB,OAAQZ,CAAK8C,CAAAA,aAAc5C,CAAAA,MAAnB,CAA0BJ,CAA1B,CAAgC,KAAhC,CAFH,CAIT,MAAK,gBAAL,CAEE,MADAA,EACO,CADAE,CAAK4C,CAAAA,YAAa1C,CAAAA,MAAlB,CAAyBJ,CAAzB,CAA+B,KAA/B,CACA,CAAA,CACL4C,MAAO5C,CAAKiD,CAAAA,UAAWC,CAAAA,KADlB,CAELL,WAAY7C,CAAK6C,CAAAA,UAFZ,CAIT,SAAS,KAAU5B,MAAJ,CAAU,mBAAV,CAAgCnB,CAAhC,CAAN,CAlEX,CAf0B,CAR5B,IAAII,EAAOjB,CAAA,CAAQ,GAAR,CAAX,CACI0C;AAAQ1C,CAAA,CAAQ,GAAR,CADZ,CAEIY,EAAUZ,CAAA,CAAQ,GAAR,CAFd,CAGIkD,EAAUlD,CAAA,CAAQ,GAAR,CAHd,CAIIgD,EAAShD,CAAA,CAAQ,GAAR,CAJb,CAKIK,EAASL,CAAA,CAAQ,GAAR,CAAuBK,CAAAA,MACpCJ,EAAOC,CAAAA,OAAP,CAAiBC,CAsFjBA,EAAU+D,CAAAA,SAAV,CAAsBjD,CAAKiD,CAAAA,SA7FmC;\",\n\"sources\":[\"node_modules/parse-asn1/index.js\"],\n\"sourcesContent\":[\"shadow$provide[246] = function(global,require,module,exports) {\\nvar asn1 = require('./asn1')\\nvar aesid = require('./aesid.json')\\nvar fixProc = require('./fixProc')\\nvar ciphers = require('browserify-aes')\\nvar compat = require('pbkdf2')\\nvar Buffer = require('safe-buffer').Buffer\\nmodule.exports = parseKeys\\n\\nfunction parseKeys (buffer) {\\n  var password\\n  if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {\\n    password = buffer.passphrase\\n    buffer = buffer.key\\n  }\\n  if (typeof buffer === 'string') {\\n    buffer = Buffer.from(buffer)\\n  }\\n\\n  var stripped = fixProc(buffer, password)\\n\\n  var type = stripped.tag\\n  var data = stripped.data\\n  var subtype, ndata\\n  switch (type) {\\n    case 'CERTIFICATE':\\n      ndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo\\n      // falls through\\n    case 'PUBLIC KEY':\\n      if (!ndata) {\\n        ndata = asn1.PublicKey.decode(data, 'der')\\n      }\\n      subtype = ndata.algorithm.algorithm.join('.')\\n      switch (subtype) {\\n        case '1.2.840.113549.1.1.1':\\n          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')\\n        case '1.2.840.10045.2.1':\\n          ndata.subjectPrivateKey = ndata.subjectPublicKey\\n          return {\\n            type: 'ec',\\n            data: ndata\\n          }\\n        case '1.2.840.10040.4.1':\\n          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der')\\n          return {\\n            type: 'dsa',\\n            data: ndata.algorithm.params\\n          }\\n        default: throw new Error('unknown key id ' + subtype)\\n      }\\n      // throw new Error('unknown key type ' + type)\\n    case 'ENCRYPTED PRIVATE KEY':\\n      data = asn1.EncryptedPrivateKey.decode(data, 'der')\\n      data = decrypt(data, password)\\n      // falls through\\n    case 'PRIVATE KEY':\\n      ndata = asn1.PrivateKey.decode(data, 'der')\\n      subtype = ndata.algorithm.algorithm.join('.')\\n      switch (subtype) {\\n        case '1.2.840.113549.1.1.1':\\n          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')\\n        case '1.2.840.10045.2.1':\\n          return {\\n            curve: ndata.algorithm.curve,\\n            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey\\n          }\\n        case '1.2.840.10040.4.1':\\n          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der')\\n          return {\\n            type: 'dsa',\\n            params: ndata.algorithm.params\\n          }\\n        default: throw new Error('unknown key id ' + subtype)\\n      }\\n      // throw new Error('unknown key type ' + type)\\n    case 'RSA PUBLIC KEY':\\n      return asn1.RSAPublicKey.decode(data, 'der')\\n    case 'RSA PRIVATE KEY':\\n      return asn1.RSAPrivateKey.decode(data, 'der')\\n    case 'DSA PRIVATE KEY':\\n      return {\\n        type: 'dsa',\\n        params: asn1.DSAPrivateKey.decode(data, 'der')\\n      }\\n    case 'EC PRIVATE KEY':\\n      data = asn1.ECPrivateKey.decode(data, 'der')\\n      return {\\n        curve: data.parameters.value,\\n        privateKey: data.privateKey\\n      }\\n    default: throw new Error('unknown key type ' + type)\\n  }\\n}\\nparseKeys.signature = asn1.signature\\nfunction decrypt (data, password) {\\n  var salt = data.algorithm.decrypt.kde.kdeparams.salt\\n  var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10)\\n  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')]\\n  var iv = data.algorithm.decrypt.cipher.iv\\n  var cipherText = data.subjectPrivateKey\\n  var keylen = parseInt(algo.split('-')[1], 10) / 8\\n  var key = compat.pbkdf2Sync(password, salt, iters, keylen, 'sha1')\\n  var cipher = ciphers.createDecipheriv(algo, key, iv)\\n  var out = []\\n  out.push(cipher.update(cipherText))\\n  out.push(cipher.final())\\n  return Buffer.concat(out)\\n}\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"parseKeys\",\"buffer\",\"Buffer\",\"isBuffer\",\"password\",\"passphrase\",\"key\",\"from\",\"stripped\",\"fixProc\",\"type\",\"tag\",\"data\",\"ndata\",\"asn1\",\"certificate\",\"decode\",\"tbsCertificate\",\"subjectPublicKeyInfo\",\"subtype\",\"PublicKey\",\"algorithm\",\"join\",\"RSAPublicKey\",\"subjectPublicKey\",\"subjectPrivateKey\",\"params\",\"pub_key\",\"DSAparam\",\"Error\",\"EncryptedPrivateKey\",\"salt\",\"decrypt\",\"kde\",\"kdeparams\",\"iters\",\"parseInt\",\"toString\",\"algo\",\"aesid\",\"cipher\",\"iv\",\"cipherText\",\"keylen\",\"split\",\"compat\",\"pbkdf2Sync\",\"ciphers\",\"createDecipheriv\",\"out\",\"push\",\"update\",\"final\",\"concat\",\"PrivateKey\",\"RSAPrivateKey\",\"curve\",\"privateKey\",\"ECPrivateKey\",\"priv_key\",\"DSAPrivateKey\",\"parameters\",\"value\",\"signature\"]\n}\n"]