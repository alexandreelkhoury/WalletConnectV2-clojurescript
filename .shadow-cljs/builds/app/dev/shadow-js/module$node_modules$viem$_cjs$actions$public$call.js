["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/viem/_cjs/actions/public/call.js"],"~:js","shadow$provide.module$node_modules$viem$_cjs$actions$public$call=function(global,require,module,exports){function shouldPerformMulticall({request}){const {data,to,...request_}=request;return!data||data.startsWith(contract_js_1.aggregate3Signature)||!to||0<Object.values(request_).filter(x=>\"undefined\"!==typeof x).length?!1:!0}async function scheduleMulticall(client,args$jscomp$0){const {batchSize=1024,wait=0}=\"object\"===typeof client.batch?.multicall?client.batch.multicall:{},{blockNumber,blockTag=\n\"latest\",data:data$jscomp$0,multicallAddress:multicallAddress_,to}=args$jscomp$0;let multicallAddress=multicallAddress_;if(!multicallAddress){if(!client.chain)throw new chain_js_1.ClientChainNotConfiguredError;multicallAddress=(0,chain_js_2.getChainContractAddress)({blockNumber,chain:client.chain,contract:\"multicall3\"})}const block=(blockNumber?(0,toHex_js_1.numberToHex)(blockNumber):void 0)||blockTag;({schedule:args$jscomp$0}=(0,createBatchScheduler_js_1.createBatchScheduler)({id:`${client.uid}.${block}`,\nwait,shouldSplitBatch(args){return args.reduce((size,{data})=>size+(data.length-2),0)>2*batchSize},fn:async requests=>{requests=requests.map(request=>({allowFailure:!0,callData:request.data,target:request.to}));var calldata=(0,encodeFunctionData_js_1.encodeFunctionData)({abi:abis_js_1.multicall3Abi,args:[requests],functionName:\"aggregate3\"});calldata=await client.request({method:\"eth_call\",params:[{data:calldata,to:multicallAddress},block]});return(0,decodeFunctionResult_js_1.decodeFunctionResult)({abi:abis_js_1.multicall3Abi,\nargs:[requests],functionName:\"aggregate3\",data:calldata||\"0x\"})}}));const [{returnData,success}]=await args$jscomp$0({data:data$jscomp$0,to});if(!success)throw new contract_js_2.RawContractError({data:returnData});return\"0x\"===returnData?{data:void 0}:{data:returnData}}function getRevertErrorData(err){if(err instanceof base_js_1.BaseError)return err=err.walk(),\"object\"===typeof err.data?err.data.data:err.data}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.getRevertErrorData=exports.call=\nvoid 0;const parseAccount_js_1=require(\"module$node_modules$viem$_cjs$accounts$utils$parseAccount\"),abis_js_1=require(\"module$node_modules$viem$_cjs$constants$abis\"),contract_js_1=require(\"module$node_modules$viem$_cjs$constants$contract\"),base_js_1=require(\"module$node_modules$viem$_cjs$errors$base\"),chain_js_1=require(\"module$node_modules$viem$_cjs$errors$chain\"),contract_js_2=require(\"module$node_modules$viem$_cjs$errors$contract\"),decodeFunctionResult_js_1=require(\"module$node_modules$viem$_cjs$utils$abi$decodeFunctionResult\"),\nencodeFunctionData_js_1=require(\"module$node_modules$viem$_cjs$utils$abi$encodeFunctionData\"),chain_js_2=require(\"module$node_modules$viem$_cjs$utils$chain\"),toHex_js_1=require(\"module$node_modules$viem$_cjs$utils$encoding$toHex\"),getCallError_js_1=require(\"module$node_modules$viem$_cjs$utils$errors$getCallError\"),extract_js_1=require(\"module$node_modules$viem$_cjs$utils$formatters$extract\"),transactionRequest_js_1=require(\"module$node_modules$viem$_cjs$utils$formatters$transactionRequest\"),createBatchScheduler_js_1=\nrequire(\"module$node_modules$viem$_cjs$utils$promise$createBatchScheduler\"),assertRequest_js_1=require(\"module$node_modules$viem$_cjs$utils$transaction$assertRequest\");exports.call=async function(client,args){const {account:account_=client.account,batch=!!client.batch?.multicall,blockNumber,blockTag=\"latest\",accessList,data,gas,gasPrice,maxFeePerGas,maxPriorityFeePerGas,nonce,to,value,...rest}=args,account=account_?(0,parseAccount_js_1.parseAccount)(account_):void 0;try{(0,assertRequest_js_1.assertRequest)(args);\nvar block=(blockNumber?(0,toHex_js_1.numberToHex)(blockNumber):void 0)||blockTag;const format=client.chain?.formatters?.transactionRequest?.format||transactionRequest_js_1.formatTransactionRequest,request=format({...(0,extract_js_1.extract)(rest,{format}),from:account?.address,accessList,data,gas,gasPrice,maxFeePerGas,maxPriorityFeePerGas,nonce,to,value});if(batch&&shouldPerformMulticall({request}))try{return await scheduleMulticall(client,{...request,blockNumber,blockTag})}catch(err){if(!(err instanceof\nchain_js_1.ClientChainNotConfiguredError||err instanceof chain_js_1.ChainDoesNotSupportContract))throw err;}const response=await client.request({method:\"eth_call\",params:block?[request,block]:[request]});return\"0x\"===response?{data:void 0}:{data:response}}catch(err){block=getRevertErrorData(err);const {offchainLookup,offchainLookupSignature}=await Promise.resolve().then(()=>require(\"module$node_modules$viem$_cjs$utils$ccip\"));if(block?.slice(0,10)===offchainLookupSignature&&to)return{data:await offchainLookup(client,\n{data:block,to})};throw(0,getCallError_js_1.getCallError)(err,{...args,account,chain:client.chain});}};exports.getRevertErrorData=getRevertErrorData}","~:source","shadow$provide[\"module$node_modules$viem$_cjs$actions$public$call\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getRevertErrorData = exports.call = void 0;\nconst parseAccount_js_1 = require(\"../../accounts/utils/parseAccount.js\");\nconst abis_js_1 = require(\"../../constants/abis.js\");\nconst contract_js_1 = require(\"../../constants/contract.js\");\nconst base_js_1 = require(\"../../errors/base.js\");\nconst chain_js_1 = require(\"../../errors/chain.js\");\nconst contract_js_2 = require(\"../../errors/contract.js\");\nconst decodeFunctionResult_js_1 = require(\"../../utils/abi/decodeFunctionResult.js\");\nconst encodeFunctionData_js_1 = require(\"../../utils/abi/encodeFunctionData.js\");\nconst chain_js_2 = require(\"../../utils/chain.js\");\nconst toHex_js_1 = require(\"../../utils/encoding/toHex.js\");\nconst getCallError_js_1 = require(\"../../utils/errors/getCallError.js\");\nconst extract_js_1 = require(\"../../utils/formatters/extract.js\");\nconst transactionRequest_js_1 = require(\"../../utils/formatters/transactionRequest.js\");\nconst createBatchScheduler_js_1 = require(\"../../utils/promise/createBatchScheduler.js\");\nconst assertRequest_js_1 = require(\"../../utils/transaction/assertRequest.js\");\nasync function call(client, args) {\n    const { account: account_ = client.account, batch = Boolean(client.batch?.multicall), blockNumber, blockTag = 'latest', accessList, data, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, nonce, to, value, ...rest } = args;\n    const account = account_ ? (0, parseAccount_js_1.parseAccount)(account_) : undefined;\n    try {\n        (0, assertRequest_js_1.assertRequest)(args);\n        const blockNumberHex = blockNumber ? (0, toHex_js_1.numberToHex)(blockNumber) : undefined;\n        const block = blockNumberHex || blockTag;\n        const format = client.chain?.formatters?.transactionRequest?.format ||\n            transactionRequest_js_1.formatTransactionRequest;\n        const request = format({\n            ...(0, extract_js_1.extract)(rest, { format }),\n            from: account?.address,\n            accessList,\n            data,\n            gas,\n            gasPrice,\n            maxFeePerGas,\n            maxPriorityFeePerGas,\n            nonce,\n            to,\n            value,\n        });\n        if (batch && shouldPerformMulticall({ request })) {\n            try {\n                return await scheduleMulticall(client, {\n                    ...request,\n                    blockNumber,\n                    blockTag,\n                });\n            }\n            catch (err) {\n                if (!(err instanceof chain_js_1.ClientChainNotConfiguredError) &&\n                    !(err instanceof chain_js_1.ChainDoesNotSupportContract))\n                    throw err;\n            }\n        }\n        const response = await client.request({\n            method: 'eth_call',\n            params: block\n                ? [request, block]\n                : [request],\n        });\n        if (response === '0x')\n            return { data: undefined };\n        return { data: response };\n    }\n    catch (err) {\n        const data = getRevertErrorData(err);\n        const { offchainLookup, offchainLookupSignature } = await Promise.resolve().then(() => require('../../utils/ccip.js'));\n        if (data?.slice(0, 10) === offchainLookupSignature && to) {\n            return { data: await offchainLookup(client, { data, to }) };\n        }\n        throw (0, getCallError_js_1.getCallError)(err, {\n            ...args,\n            account,\n            chain: client.chain,\n        });\n    }\n}\nexports.call = call;\nfunction shouldPerformMulticall({ request }) {\n    const { data, to, ...request_ } = request;\n    if (!data)\n        return false;\n    if (data.startsWith(contract_js_1.aggregate3Signature))\n        return false;\n    if (!to)\n        return false;\n    if (Object.values(request_).filter((x) => typeof x !== 'undefined').length > 0)\n        return false;\n    return true;\n}\nasync function scheduleMulticall(client, args) {\n    const { batchSize = 1024, wait = 0 } = typeof client.batch?.multicall === 'object' ? client.batch.multicall : {};\n    const { blockNumber, blockTag = 'latest', data, multicallAddress: multicallAddress_, to, } = args;\n    let multicallAddress = multicallAddress_;\n    if (!multicallAddress) {\n        if (!client.chain)\n            throw new chain_js_1.ClientChainNotConfiguredError();\n        multicallAddress = (0, chain_js_2.getChainContractAddress)({\n            blockNumber,\n            chain: client.chain,\n            contract: 'multicall3',\n        });\n    }\n    const blockNumberHex = blockNumber ? (0, toHex_js_1.numberToHex)(blockNumber) : undefined;\n    const block = blockNumberHex || blockTag;\n    const { schedule } = (0, createBatchScheduler_js_1.createBatchScheduler)({\n        id: `${client.uid}.${block}`,\n        wait,\n        shouldSplitBatch(args) {\n            const size = args.reduce((size, { data }) => size + (data.length - 2), 0);\n            return size > batchSize * 2;\n        },\n        fn: async (requests) => {\n            const calls = requests.map((request) => ({\n                allowFailure: true,\n                callData: request.data,\n                target: request.to,\n            }));\n            const calldata = (0, encodeFunctionData_js_1.encodeFunctionData)({\n                abi: abis_js_1.multicall3Abi,\n                args: [calls],\n                functionName: 'aggregate3',\n            });\n            const data = await client.request({\n                method: 'eth_call',\n                params: [\n                    {\n                        data: calldata,\n                        to: multicallAddress,\n                    },\n                    block,\n                ],\n            });\n            return (0, decodeFunctionResult_js_1.decodeFunctionResult)({\n                abi: abis_js_1.multicall3Abi,\n                args: [calls],\n                functionName: 'aggregate3',\n                data: data || '0x',\n            });\n        },\n    });\n    const [{ returnData, success }] = await schedule({ data, to });\n    if (!success)\n        throw new contract_js_2.RawContractError({ data: returnData });\n    if (returnData === '0x')\n        return { data: undefined };\n    return { data: returnData };\n}\nfunction getRevertErrorData(err) {\n    if (!(err instanceof base_js_1.BaseError))\n        return undefined;\n    const error = err.walk();\n    return typeof error.data === 'object' ? error.data.data : error.data;\n}\nexports.getRevertErrorData = getRevertErrorData;\n//# sourceMappingURL=call.js.map\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$viem$_cjs$constants$abis","~$module$node_modules$viem$_cjs$utils$abi$decodeFunctionResult","~$module$node_modules$viem$_cjs$utils$ccip","~$module$node_modules$viem$_cjs$utils$transaction$assertRequest","~$module$node_modules$viem$_cjs$utils$promise$createBatchScheduler","~$module$node_modules$viem$_cjs$constants$contract","~$module$node_modules$viem$_cjs$utils$formatters$transactionRequest","~$module$node_modules$viem$_cjs$errors$base","~$module$node_modules$viem$_cjs$errors$contract","~$module$node_modules$viem$_cjs$utils$abi$encodeFunctionData","~$module$node_modules$viem$_cjs$errors$chain","~$module$node_modules$viem$_cjs$utils$formatters$extract","~$shadow.js","~$module$node_modules$viem$_cjs$accounts$utils$parseAccount","~$module$node_modules$viem$_cjs$utils$chain","~$module$node_modules$viem$_cjs$utils$errors$getCallError","~$module$node_modules$viem$_cjs$utils$encoding$toHex"]],"~:properties",["^5",["abi","call","gasPrice","getRevertErrorData","params","args","accessList","method","__esModule","id","fn","blockNumber","gas","allowFailure","maxPriorityFeePerGas","maxFeePerGas","value","wait","request","account","callData","contract","from","target","nonce","to","blockTag","functionName","data","chain","format"]],"~:compiled-at",1695111490265,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$viem$_cjs$actions$public$call.js\",\n\"lineCount\":10,\n\"mappings\":\"AAAAA,cAAA,CAAA,iDAAA,CAAsE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA+E9GC,QAASA,uBAAsB,CAAC,CAAEC,OAAF,CAAD,CAAc,CACzC,MAAM,CAAEC,IAAF,CAAQC,EAAR,CAAY,GAAGC,QAAf,CAAA,CAA4BH,OAOlC,OANI,CAACC,IAML,EAJIA,IAAKG,CAAAA,UAAL,CAAgBC,aAAcC,CAAAA,mBAA9B,CAIJ,EAFI,CAACJ,EAEL,EAA6E,CAA7E,CAAIK,MAAOC,CAAAA,MAAP,CAAcL,QAAd,CAAwBM,CAAAA,MAAxB,CAAgCC,CAAD,EAAoB,WAApB,GAAO,MAAOA,EAA7C,CAAgEC,CAAAA,MAApE,CACW,CAAA,CADX,CAEO,CAAA,CAVkC,CAY7CC,cAAeA,kBAAiB,CAACC,MAAD,CAASC,aAAT,CAAe,CAC3C,MAAM,CAAEC,SAAA,CAAY,IAAd,CAAoBC,IAAA,CAAO,CAA3B,CAAA,CAAoE,QAAnC,GAAA,MAAOH,OAAOI,CAAAA,KAAOC,EAAAA,SAArB,CAA8CL,MAAOI,CAAAA,KAAMC,CAAAA,SAA3D,CAAuE,EAA9G,CACM,CAAEC,WAAF,CAAeC,QAAA;AAAW,QAA1B,CAAoC,KAAAnB,aAApC,CAA0C,iBAAkBoB,iBAA5D,CAA+EnB,EAA/E,CAAA,CAAuFY,aAC7F,KAAIQ,iBAAmBD,iBACvB,IAAI,CAACC,gBAAL,CAAuB,CACnB,GAAI,CAACT,MAAOU,CAAAA,KAAZ,CACI,KAAM,KAAIC,UAAWC,CAAAA,6BAArB,CACJH,gBAAA,CAAmB,GAAII,UAAWC,CAAAA,uBAAf,EAAwC,CACvDR,WADuD,CAEvDI,MAAOV,MAAOU,CAAAA,KAFyC,CAGvDK,SAAU,YAH6C,CAAxC,CAHA,CAUvB,MAAMC,OADiBV,WAAAW,CAAc,GAAIC,UAAWC,CAAAA,WAAf,EAA4Bb,WAA5B,CAAdW,CAAyDG,IAAAA,EAC1EJ,GAA0BT,QAChC,EAAM,CAAE,SAAAc,aAAF,CAAN,CAAqB,GAAIC,yBAA0BC,CAAAA,oBAA9B,EAAoD,CACrEC,GAAK,GAAExB,MAAOyB,CAAAA,GAAT,IAAgBT,KAAhB,EADgE;AAErEb,IAFqE,CAGrEuB,gBAAgB,CAACzB,IAAD,CAAO,CAEnB,MADaA,KAAK0B,CAAAA,MAALC,CAAY,CAACA,IAAD,CAAO,CAAExC,IAAF,CAAP,CAAA,EAAoBwC,IAApB,EAA4BxC,IAAKU,CAAAA,MAAjC,CAA0C,CAA1C,CAAZ8B,CAA0D,CAA1DA,CACb,CAA0B,CAA1B,CAAc1B,SAFK,CAH8C,CAOrE2B,GAAIA,KAAOC,SAAPD,EAAoB,CACdE,QAAAA,CAAQD,QAASE,CAAAA,GAAT,CAAc7C,OAAD,EAAc,EACrC8C,aAAc,CAAA,CADuB,CAErCC,SAAU/C,OAAQC,CAAAA,IAFmB,CAGrC+C,OAAQhD,OAAQE,CAAAA,EAHqB,EAA3B,CAKd,KAAM+C,SAAW,GAAIC,uBAAwBC,CAAAA,kBAA5B,EAAgD,CAC7DC,IAAKC,SAAUC,CAAAA,aAD8C,CAE7DxC,KAAM,CAAC8B,QAAD,CAFuD,CAG7DW,aAAc,YAH+C,CAAhD,CAKXtD,SAAAA,CAAO,MAAMY,MAAOb,CAAAA,OAAP,CAAe,CAC9BwD,OAAQ,UADsB,CAE9BC,OAAQ,CACJ,CACIxD,KAAMgD,QADV,CAEI/C,GAAIoB,gBAFR,CADI,CAKJO,KALI,CAFsB,CAAf,CAUnB,OAAO,GAAI6B,yBAA0BC,CAAAA,oBAA9B,EAAoD,CACvDP,IAAKC,SAAUC,CAAAA,aADwC;AAEvDxC,KAAM,CAAC8B,QAAD,CAFiD,CAGvDW,aAAc,YAHyC,CAIvDtD,KAAMA,QAANA,EAAc,IAJyC,CAApD,CArBa,CAP6C,CAApD,CAArB,CAoCA,OAAM,CAAC,CAAE2D,UAAF,CAAcC,OAAd,CAAD,CAAA,CAA4B,MAAM3B,aAAA,CAAS,CAAEjC,KAAAA,aAAF,CAAQC,EAAR,CAAT,CACxC,IAAI,CAAC2D,OAAL,CACI,KAAM,KAAIC,aAAcC,CAAAA,gBAAlB,CAAmC,CAAE9D,KAAM2D,UAAR,CAAnC,CAAN,CACJ,MAAmB,IAAnB,GAAIA,UAAJ,CACW,CAAE3D,KAAMgC,IAAAA,EAAR,CADX,CAEO,CAAEhC,KAAM2D,UAAR,CAxDoC,CA0D/CI,QAASA,mBAAkB,CAACC,GAAD,CAAM,CAC7B,GAAMA,GAAN,WAAqBC,UAAUC,CAAAA,SAA/B,CAGA,MADMC,IACC,CADOH,GAAII,CAAAA,IAAJ,EACP,CAAsB,QAAtB,GAAA,MAAOD,IAAMnE,CAAAA,IAAb,CAAiCmE,GAAMnE,CAAAA,IAAKA,CAAAA,IAA5C,CAAmDmE,GAAMnE,CAAAA,IAJnC,CAnJjCM,MAAO+D,CAAAA,cAAP,CAAsBxE,OAAtB,CAA+B,YAA/B,CAA6C,CAAEyE,MAAO,CAAA,CAAT,CAA7C,CACAzE,QAAQkE,CAAAA,kBAAR,CAA6BlE,OAAQ0E,CAAAA,IAArC;AAA4C,IAAK,EACjD,OAAMC,kBAAoB7E,OAAA,CAAQ,2DAAR,CAA1B,CACMyD,UAAYzD,OAAA,CAAQ,8CAAR,CADlB,CAEMS,cAAgBT,OAAA,CAAQ,kDAAR,CAFtB,CAGMsE,UAAYtE,OAAA,CAAQ,2CAAR,CAHlB,CAIM4B,WAAa5B,OAAA,CAAQ,4CAAR,CAJnB,CAKMkE,cAAgBlE,OAAA,CAAQ,+CAAR,CALtB,CAMM8D,0BAA4B9D,OAAA,CAAQ,8DAAR,CANlC;AAOMsD,wBAA0BtD,OAAA,CAAQ,4DAAR,CAPhC,CAQM8B,WAAa9B,OAAA,CAAQ,2CAAR,CARnB,CASMmC,WAAanC,OAAA,CAAQ,oDAAR,CATnB,CAUM8E,kBAAoB9E,OAAA,CAAQ,yDAAR,CAV1B,CAWM+E,aAAe/E,OAAA,CAAQ,wDAAR,CAXrB,CAYMgF,wBAA0BhF,OAAA,CAAQ,mEAAR,CAZhC,CAaMuC;AAA4BvC,OAAA,CAAQ,kEAAR,CAblC,CAcMiF,mBAAqBjF,OAAA,CAAQ,+DAAR,CA4D3BE,QAAQ0E,CAAAA,IAAR,CA3DAA,cAAmB,CAAC3D,MAAD,CAASC,IAAT,CAAe,CAC9B,MAAM,CAAE,QAASgE,QAAA,CAAWjE,MAAOkE,CAAAA,OAA7B,CAAsC9D,KAAA,CAAQ,CAAA,CAAQJ,MAAOI,CAAAA,KAAOC,EAAAA,SAApE,CAAgFC,WAAhF,CAA6FC,QAAA,CAAW,QAAxG,CAAkH4D,UAAlH,CAA8H/E,IAA9H,CAAoIgF,GAApI,CAAyIC,QAAzI,CAAmJC,YAAnJ,CAAiKC,oBAAjK,CAAuLC,KAAvL,CAA8LnF,EAA9L,CAAkMqE,KAAlM,CAAyM,GAAGe,IAA5M,CAAA,CAAqNxE,IAA3N,CACMiE,QAAUD,QAAA,CAAW,GAAIL,iBAAkBc,CAAAA,YAAtB,EAAoCT,QAApC,CAAX,CAA2D7C,IAAAA,EAC3E,IAAI,CACA,GAAI4C,kBAAmBW,CAAAA,aAAvB,EAAsC1E,IAAtC,CAEA;IAAMe,OADiBV,WAAAW,CAAc,GAAIC,UAAWC,CAAAA,WAAf,EAA4Bb,WAA5B,CAAdW,CAAyDG,IAAAA,EAC1EJ,GAA0BT,QAChC,OAAMqE,OAAS5E,MAAOU,CAAAA,KAAOmE,EAAAA,UAAYC,EAAAA,kBAAoBF,EAAAA,MAAvDA,EACFb,uBAAwBgB,CAAAA,wBAD5B,CAEM5F,QAAUyF,MAAA,CAAO,CACnB,GAAG,GAAId,YAAakB,CAAAA,OAAjB,EAA0BP,IAA1B,CAAgC,CAAEG,MAAF,CAAhC,CADgB,CAEnBK,KAAMf,OAASgB,EAAAA,OAFI,CAGnBf,UAHmB,CAInB/E,IAJmB,CAKnBgF,GALmB,CAMnBC,QANmB,CAOnBC,YAPmB,CAQnBC,oBARmB,CASnBC,KATmB,CAUnBnF,EAVmB,CAWnBqE,KAXmB,CAAP,CAahB,IAAItD,KAAJ,EAAalB,sBAAA,CAAuB,CAAEC,OAAF,CAAvB,CAAb,CACI,GAAI,CACA,MAAO,OAAMY,iBAAA,CAAkBC,MAAlB,CAA0B,CACnC,GAAGb,OADgC,CAEnCmB,WAFmC,CAGnCC,QAHmC,CAA1B,CADb,CAOJ,MAAO6C,GAAP,CAAY,CACR,GAAI,EAAEA,GAAF;AAAiBzC,UAAWC,CAAAA,6BAA5B,EACEwC,GADF,WACiBzC,WAAWwE,CAAAA,2BAD5B,CAAJ,CAEI,KAAM/B,IAAN,CAHI,CAMhB,MAAMgC,SAAW,MAAMpF,MAAOb,CAAAA,OAAP,CAAe,CAClCwD,OAAQ,UAD0B,CAElCC,OAAQ5B,KAAA,CACF,CAAC7B,OAAD,CAAU6B,KAAV,CADE,CAEF,CAAC7B,OAAD,CAJ4B,CAAf,CAMvB,OAAiB,IAAjB,GAAIiG,QAAJ,CACW,CAAEhG,KAAMgC,IAAAA,EAAR,CADX,CAEO,CAAEhC,KAAMgG,QAAR,CAzCP,CA2CJ,MAAOhC,GAAP,CAAY,CACFhE,KAAAA,CAAO+D,kBAAA,CAAmBC,GAAnB,CACb,OAAM,CAAEiC,cAAF,CAAkBC,uBAAlB,CAAA,CAA8C,MAAMC,OAAQC,CAAAA,OAAR,EAAkBC,CAAAA,IAAlB,CAAuB,EAAA,EAAM1G,OAAA,CAAQ,0CAAR,CAA7B,CAC1D,IAAIK,KAAMsG,EAAAA,KAAN,CAAY,CAAZ,CAAe,EAAf,CAAJ,GAA2BJ,uBAA3B,EAAsDjG,EAAtD,CACI,MAAO,CAAED,KAAM,MAAMiG,cAAA,CAAerF,MAAf;AAAuB,CAAEZ,KAAAA,KAAF,CAAQC,EAAR,CAAvB,CAAd,CAEX,MAAM,GAAIwE,iBAAkB8B,CAAAA,YAAtB,EAAoCvC,GAApC,CAAyC,CAC3C,GAAGnD,IADwC,CAE3CiE,OAF2C,CAG3CxD,MAAOV,MAAOU,CAAAA,KAH6B,CAAzC,CAAN,CANQ,CA9CkB,CAwIlCzB,QAAQkE,CAAAA,kBAAR,CAA6BA,kBA3JiF;\",\n\"sources\":[\"node_modules/viem/_cjs/actions/public/call.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$viem$_cjs$actions$public$call\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nexports.getRevertErrorData = exports.call = void 0;\\nconst parseAccount_js_1 = require(\\\"../../accounts/utils/parseAccount.js\\\");\\nconst abis_js_1 = require(\\\"../../constants/abis.js\\\");\\nconst contract_js_1 = require(\\\"../../constants/contract.js\\\");\\nconst base_js_1 = require(\\\"../../errors/base.js\\\");\\nconst chain_js_1 = require(\\\"../../errors/chain.js\\\");\\nconst contract_js_2 = require(\\\"../../errors/contract.js\\\");\\nconst decodeFunctionResult_js_1 = require(\\\"../../utils/abi/decodeFunctionResult.js\\\");\\nconst encodeFunctionData_js_1 = require(\\\"../../utils/abi/encodeFunctionData.js\\\");\\nconst chain_js_2 = require(\\\"../../utils/chain.js\\\");\\nconst toHex_js_1 = require(\\\"../../utils/encoding/toHex.js\\\");\\nconst getCallError_js_1 = require(\\\"../../utils/errors/getCallError.js\\\");\\nconst extract_js_1 = require(\\\"../../utils/formatters/extract.js\\\");\\nconst transactionRequest_js_1 = require(\\\"../../utils/formatters/transactionRequest.js\\\");\\nconst createBatchScheduler_js_1 = require(\\\"../../utils/promise/createBatchScheduler.js\\\");\\nconst assertRequest_js_1 = require(\\\"../../utils/transaction/assertRequest.js\\\");\\nasync function call(client, args) {\\n    const { account: account_ = client.account, batch = Boolean(client.batch?.multicall), blockNumber, blockTag = 'latest', accessList, data, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, nonce, to, value, ...rest } = args;\\n    const account = account_ ? (0, parseAccount_js_1.parseAccount)(account_) : undefined;\\n    try {\\n        (0, assertRequest_js_1.assertRequest)(args);\\n        const blockNumberHex = blockNumber ? (0, toHex_js_1.numberToHex)(blockNumber) : undefined;\\n        const block = blockNumberHex || blockTag;\\n        const format = client.chain?.formatters?.transactionRequest?.format ||\\n            transactionRequest_js_1.formatTransactionRequest;\\n        const request = format({\\n            ...(0, extract_js_1.extract)(rest, { format }),\\n            from: account?.address,\\n            accessList,\\n            data,\\n            gas,\\n            gasPrice,\\n            maxFeePerGas,\\n            maxPriorityFeePerGas,\\n            nonce,\\n            to,\\n            value,\\n        });\\n        if (batch && shouldPerformMulticall({ request })) {\\n            try {\\n                return await scheduleMulticall(client, {\\n                    ...request,\\n                    blockNumber,\\n                    blockTag,\\n                });\\n            }\\n            catch (err) {\\n                if (!(err instanceof chain_js_1.ClientChainNotConfiguredError) &&\\n                    !(err instanceof chain_js_1.ChainDoesNotSupportContract))\\n                    throw err;\\n            }\\n        }\\n        const response = await client.request({\\n            method: 'eth_call',\\n            params: block\\n                ? [request, block]\\n                : [request],\\n        });\\n        if (response === '0x')\\n            return { data: undefined };\\n        return { data: response };\\n    }\\n    catch (err) {\\n        const data = getRevertErrorData(err);\\n        const { offchainLookup, offchainLookupSignature } = await Promise.resolve().then(() => require('../../utils/ccip.js'));\\n        if (data?.slice(0, 10) === offchainLookupSignature && to) {\\n            return { data: await offchainLookup(client, { data, to }) };\\n        }\\n        throw (0, getCallError_js_1.getCallError)(err, {\\n            ...args,\\n            account,\\n            chain: client.chain,\\n        });\\n    }\\n}\\nexports.call = call;\\nfunction shouldPerformMulticall({ request }) {\\n    const { data, to, ...request_ } = request;\\n    if (!data)\\n        return false;\\n    if (data.startsWith(contract_js_1.aggregate3Signature))\\n        return false;\\n    if (!to)\\n        return false;\\n    if (Object.values(request_).filter((x) => typeof x !== 'undefined').length > 0)\\n        return false;\\n    return true;\\n}\\nasync function scheduleMulticall(client, args) {\\n    const { batchSize = 1024, wait = 0 } = typeof client.batch?.multicall === 'object' ? client.batch.multicall : {};\\n    const { blockNumber, blockTag = 'latest', data, multicallAddress: multicallAddress_, to, } = args;\\n    let multicallAddress = multicallAddress_;\\n    if (!multicallAddress) {\\n        if (!client.chain)\\n            throw new chain_js_1.ClientChainNotConfiguredError();\\n        multicallAddress = (0, chain_js_2.getChainContractAddress)({\\n            blockNumber,\\n            chain: client.chain,\\n            contract: 'multicall3',\\n        });\\n    }\\n    const blockNumberHex = blockNumber ? (0, toHex_js_1.numberToHex)(blockNumber) : undefined;\\n    const block = blockNumberHex || blockTag;\\n    const { schedule } = (0, createBatchScheduler_js_1.createBatchScheduler)({\\n        id: `${client.uid}.${block}`,\\n        wait,\\n        shouldSplitBatch(args) {\\n            const size = args.reduce((size, { data }) => size + (data.length - 2), 0);\\n            return size > batchSize * 2;\\n        },\\n        fn: async (requests) => {\\n            const calls = requests.map((request) => ({\\n                allowFailure: true,\\n                callData: request.data,\\n                target: request.to,\\n            }));\\n            const calldata = (0, encodeFunctionData_js_1.encodeFunctionData)({\\n                abi: abis_js_1.multicall3Abi,\\n                args: [calls],\\n                functionName: 'aggregate3',\\n            });\\n            const data = await client.request({\\n                method: 'eth_call',\\n                params: [\\n                    {\\n                        data: calldata,\\n                        to: multicallAddress,\\n                    },\\n                    block,\\n                ],\\n            });\\n            return (0, decodeFunctionResult_js_1.decodeFunctionResult)({\\n                abi: abis_js_1.multicall3Abi,\\n                args: [calls],\\n                functionName: 'aggregate3',\\n                data: data || '0x',\\n            });\\n        },\\n    });\\n    const [{ returnData, success }] = await schedule({ data, to });\\n    if (!success)\\n        throw new contract_js_2.RawContractError({ data: returnData });\\n    if (returnData === '0x')\\n        return { data: undefined };\\n    return { data: returnData };\\n}\\nfunction getRevertErrorData(err) {\\n    if (!(err instanceof base_js_1.BaseError))\\n        return undefined;\\n    const error = err.walk();\\n    return typeof error.data === 'object' ? error.data.data : error.data;\\n}\\nexports.getRevertErrorData = getRevertErrorData;\\n//# sourceMappingURL=call.js.map\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"shouldPerformMulticall\",\"request\",\"data\",\"to\",\"request_\",\"startsWith\",\"contract_js_1\",\"aggregate3Signature\",\"Object\",\"values\",\"filter\",\"x\",\"length\",\"scheduleMulticall\",\"client\",\"args\",\"batchSize\",\"wait\",\"batch\",\"multicall\",\"blockNumber\",\"blockTag\",\"multicallAddress_\",\"multicallAddress\",\"chain\",\"chain_js_1\",\"ClientChainNotConfiguredError\",\"chain_js_2\",\"getChainContractAddress\",\"contract\",\"block\",\"blockNumberHex\",\"toHex_js_1\",\"numberToHex\",\"undefined\",\"schedule\",\"createBatchScheduler_js_1\",\"createBatchScheduler\",\"id\",\"uid\",\"shouldSplitBatch\",\"reduce\",\"size\",\"fn\",\"requests\",\"calls\",\"map\",\"allowFailure\",\"callData\",\"target\",\"calldata\",\"encodeFunctionData_js_1\",\"encodeFunctionData\",\"abi\",\"abis_js_1\",\"multicall3Abi\",\"functionName\",\"method\",\"params\",\"decodeFunctionResult_js_1\",\"decodeFunctionResult\",\"returnData\",\"success\",\"contract_js_2\",\"RawContractError\",\"getRevertErrorData\",\"err\",\"base_js_1\",\"BaseError\",\"error\",\"walk\",\"defineProperty\",\"value\",\"call\",\"parseAccount_js_1\",\"getCallError_js_1\",\"extract_js_1\",\"transactionRequest_js_1\",\"assertRequest_js_1\",\"account_\",\"account\",\"accessList\",\"gas\",\"gasPrice\",\"maxFeePerGas\",\"maxPriorityFeePerGas\",\"nonce\",\"rest\",\"parseAccount\",\"assertRequest\",\"format\",\"formatters\",\"transactionRequest\",\"formatTransactionRequest\",\"extract\",\"from\",\"address\",\"ChainDoesNotSupportContract\",\"response\",\"offchainLookup\",\"offchainLookupSignature\",\"Promise\",\"resolve\",\"then\",\"slice\",\"getCallError\"]\n}\n"]