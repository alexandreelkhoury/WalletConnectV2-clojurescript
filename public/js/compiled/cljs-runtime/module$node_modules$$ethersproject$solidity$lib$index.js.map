{
"version":3,
"file":"module$node_modules$$ethersproject$solidity$lib$index.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/@ethersproject/solidity/lib/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$ethersproject$solidity$lib$index\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sha256 = exports.keccak256 = exports.pack = void 0;\nvar bignumber_1 = require(\"@ethersproject/bignumber\");\nvar bytes_1 = require(\"@ethersproject/bytes\");\nvar keccak256_1 = require(\"@ethersproject/keccak256\");\nvar sha2_1 = require(\"@ethersproject/sha2\");\nvar strings_1 = require(\"@ethersproject/strings\");\nvar regexBytes = new RegExp(\"^bytes([0-9]+)$\");\nvar regexNumber = new RegExp(\"^(u?int)([0-9]*)$\");\nvar regexArray = new RegExp(\"^(.*)\\\\[([0-9]*)\\\\]$\");\nvar Zeros = \"0000000000000000000000000000000000000000000000000000000000000000\";\nvar logger_1 = require(\"@ethersproject/logger\");\nvar _version_1 = require(\"./_version\");\nvar logger = new logger_1.Logger(_version_1.version);\nfunction _pack(type, value, isArray) {\n    switch (type) {\n        case \"address\":\n            if (isArray) {\n                return (0, bytes_1.zeroPad)(value, 32);\n            }\n            return (0, bytes_1.arrayify)(value);\n        case \"string\":\n            return (0, strings_1.toUtf8Bytes)(value);\n        case \"bytes\":\n            return (0, bytes_1.arrayify)(value);\n        case \"bool\":\n            value = (value ? \"0x01\" : \"0x00\");\n            if (isArray) {\n                return (0, bytes_1.zeroPad)(value, 32);\n            }\n            return (0, bytes_1.arrayify)(value);\n    }\n    var match = type.match(regexNumber);\n    if (match) {\n        //let signed = (match[1] === \"int\")\n        var size = parseInt(match[2] || \"256\");\n        if ((match[2] && String(size) !== match[2]) || (size % 8 !== 0) || size === 0 || size > 256) {\n            logger.throwArgumentError(\"invalid number type\", \"type\", type);\n        }\n        if (isArray) {\n            size = 256;\n        }\n        value = bignumber_1.BigNumber.from(value).toTwos(size);\n        return (0, bytes_1.zeroPad)(value, size / 8);\n    }\n    match = type.match(regexBytes);\n    if (match) {\n        var size = parseInt(match[1]);\n        if (String(size) !== match[1] || size === 0 || size > 32) {\n            logger.throwArgumentError(\"invalid bytes type\", \"type\", type);\n        }\n        if ((0, bytes_1.arrayify)(value).byteLength !== size) {\n            logger.throwArgumentError(\"invalid value for \" + type, \"value\", value);\n        }\n        if (isArray) {\n            return (0, bytes_1.arrayify)((value + Zeros).substring(0, 66));\n        }\n        return value;\n    }\n    match = type.match(regexArray);\n    if (match && Array.isArray(value)) {\n        var baseType_1 = match[1];\n        var count = parseInt(match[2] || String(value.length));\n        if (count != value.length) {\n            logger.throwArgumentError(\"invalid array length for \" + type, \"value\", value);\n        }\n        var result_1 = [];\n        value.forEach(function (value) {\n            result_1.push(_pack(baseType_1, value, true));\n        });\n        return (0, bytes_1.concat)(result_1);\n    }\n    return logger.throwArgumentError(\"invalid type\", \"type\", type);\n}\n// @TODO: Array Enum\nfunction pack(types, values) {\n    if (types.length != values.length) {\n        logger.throwArgumentError(\"wrong number of values; expected ${ types.length }\", \"values\", values);\n    }\n    var tight = [];\n    types.forEach(function (type, index) {\n        tight.push(_pack(type, values[index]));\n    });\n    return (0, bytes_1.hexlify)((0, bytes_1.concat)(tight));\n}\nexports.pack = pack;\nfunction keccak256(types, values) {\n    return (0, keccak256_1.keccak256)(pack(types, values));\n}\nexports.keccak256 = keccak256;\nfunction sha256(types, values) {\n    return (0, sha2_1.sha256)(pack(types, values));\n}\nexports.sha256 = sha256;\n//# sourceMappingURL=index.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","_pack","type","value","isArray","bytes_1","zeroPad","arrayify","strings_1","toUtf8Bytes","match","regexNumber","size","parseInt","String","logger","throwArgumentError","bignumber_1","BigNumber","from","toTwos","regexBytes","byteLength","substring","Zeros","regexArray","Array","baseType_1","count","length","result_1","forEach","push","concat","pack","types","values","tight","index","hexlify","Object","defineProperty","sha256","keccak256","keccak256_1","sha2_1","RegExp","logger_1","_version_1","Logger","version"]
}
