shadow$provide.module$node_modules$viem$_cjs$actions$wallet$signTypedData=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.signTypedData=void 0;const parseAccount_js_1=require("module$node_modules$viem$_cjs$accounts$utils$parseAccount"),account_js_1=require("module$node_modules$viem$_cjs$errors$account"),isHex_js_1=require("module$node_modules$viem$_cjs$utils$data$isHex"),stringify_js_1=require("module$node_modules$viem$_cjs$utils$stringify"),
typedData_js_1=require("module$node_modules$viem$_cjs$utils$typedData");exports.signTypedData=async function(client,{account:account_=client.account,domain,message,primaryType,types:types_}){if(!account_)throw new account_js_1.AccountNotFoundError({docsPath:"/docs/actions/wallet/signTypedData"});account_=(0,parseAccount_js_1.parseAccount)(account_);types_={EIP712Domain:(0,typedData_js_1.getTypesForEIP712Domain)({domain}),...types_};(0,typedData_js_1.validateTypedData)({domain,message,primaryType,
types:types_});if("local"===account_.type)return account_.signTypedData({domain,primaryType,types:types_,message});domain=(0,stringify_js_1.stringify)({domain:domain??{},primaryType,types:types_,message},(_,value)=>(0,isHex_js_1.isHex)(value)?value.toLowerCase():value);return client.request({method:"eth_signTypedData_v4",params:[account_.address,domain]})}}
//# sourceMappingURL=module$node_modules$viem$_cjs$actions$wallet$signTypedData.js.map
