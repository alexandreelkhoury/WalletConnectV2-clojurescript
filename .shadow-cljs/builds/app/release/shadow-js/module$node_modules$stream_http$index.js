["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/stream-http/index.js"],"~:js","shadow$provide[310]=function(S,A,V,q){var F=A(301);V=A(299);var G=A(302),r=A(303),y=A(309);q.request=function(e,u){e=\"string\"===typeof e?y.parse(e):G(e);var p=-1===S.location.protocol.search(/^https?:$/)?\"http:\":\"\";p=e.protocol||p;var n=e.hostname||e.host,l=e.port,h=e.path||\"/\";n&&-1!==n.indexOf(\":\")&&(n=\"[\"+n+\"]\");e.url=(n?p+\"//\"+n:\"\")+(l?\":\"+l:\"\")+h;e.method=(e.method||\"GET\").toUpperCase();e.headers=e.headers||{};e=new F(e);if(u)e.on(\"response\",u);return e};q.get=function(e,u){e=q.request(e,u);\ne.end();return e};q.ClientRequest=F;q.IncomingMessage=V.IncomingMessage;q.Agent=function(){};q.Agent.defaultMaxSockets=4;q.globalAgent=new q.Agent;q.STATUS_CODES=r;q.METHODS=\"CHECKOUT CONNECT COPY DELETE GET HEAD LOCK M-SEARCH MERGE MKACTIVITY MKCOL MOVE NOTIFY OPTIONS PATCH POST PROPFIND PROPPATCH PURGE PUT REPORT SEARCH SUBSCRIBE TRACE UNLOCK UNSUBSCRIBE\".split(\" \")}","~:source","shadow$provide[310] = function(global,require,module,exports) {\nvar ClientRequest = require('./lib/request')\nvar response = require('./lib/response')\nvar extend = require('xtend')\nvar statusCodes = require('builtin-status-codes')\nvar url = require('url')\n\nvar http = exports\n\nhttp.request = function (opts, cb) {\n\tif (typeof opts === 'string')\n\t\topts = url.parse(opts)\n\telse\n\t\topts = extend(opts)\n\n\t// Normally, the page is loaded from http or https, so not specifying a protocol\n\t// will result in a (valid) protocol-relative url. However, this won't work if\n\t// the protocol is something else, like 'file:'\n\tvar defaultProtocol = global.location.protocol.search(/^https?:$/) === -1 ? 'http:' : ''\n\n\tvar protocol = opts.protocol || defaultProtocol\n\tvar host = opts.hostname || opts.host\n\tvar port = opts.port\n\tvar path = opts.path || '/'\n\n\t// Necessary for IPv6 addresses\n\tif (host && host.indexOf(':') !== -1)\n\t\thost = '[' + host + ']'\n\n\t// This may be a relative url. The browser should always be able to interpret it correctly.\n\topts.url = (host ? (protocol + '//' + host) : '') + (port ? ':' + port : '') + path\n\topts.method = (opts.method || 'GET').toUpperCase()\n\topts.headers = opts.headers || {}\n\n\t// Also valid opts.auth, opts.mode\n\n\tvar req = new ClientRequest(opts)\n\tif (cb)\n\t\treq.on('response', cb)\n\treturn req\n}\n\nhttp.get = function get (opts, cb) {\n\tvar req = http.request(opts, cb)\n\treq.end()\n\treturn req\n}\n\nhttp.ClientRequest = ClientRequest\nhttp.IncomingMessage = response.IncomingMessage\n\nhttp.Agent = function () {}\nhttp.Agent.defaultMaxSockets = 4\n\nhttp.globalAgent = new http.Agent()\n\nhttp.STATUS_CODES = statusCodes\n\nhttp.METHODS = [\n\t'CHECKOUT',\n\t'CONNECT',\n\t'COPY',\n\t'DELETE',\n\t'GET',\n\t'HEAD',\n\t'LOCK',\n\t'M-SEARCH',\n\t'MERGE',\n\t'MKACTIVITY',\n\t'MKCOL',\n\t'MOVE',\n\t'NOTIFY',\n\t'OPTIONS',\n\t'PATCH',\n\t'POST',\n\t'PROPFIND',\n\t'PROPPATCH',\n\t'PURGE',\n\t'PUT',\n\t'REPORT',\n\t'SEARCH',\n\t'SUBSCRIBE',\n\t'TRACE',\n\t'UNLOCK',\n\t'UNSUBSCRIBE'\n]\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$stream_http$lib$response","~$module$node_modules$builtin_status_codes$browser","~$module$node_modules$url$url","~$module$node_modules$xtend$immutable","~$shadow.js","~$module$node_modules$stream_http$lib$request"]],"~:properties",["^5",["url","METHODS","method","globalAgent","Agent","IncomingMessage","request","defaultMaxSockets","STATUS_CODES","get","headers","ClientRequest"]],"~:compiled-at",1695041440894,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$stream_http$index.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAC9D,IAAIC,EAAgBH,CAAA,CAAQ,GAAR,CAChBI,EAAAA,CAAWJ,CAAA,CAAQ,GAAR,CACf,KAAIK,EAASL,CAAA,CAAQ,GAAR,CAAb,CACIM,EAAcN,CAAA,CAAQ,GAAR,CADlB,CAEIO,EAAMP,CAAA,CAAQ,GAAR,CAECE,EAENM,CAAAA,OAAL,CAAeC,QAAS,CAACC,CAAD,CAAOC,CAAP,CAAW,CAEjCD,CAAA,CADmB,QAApB,GAAI,MAAOA,EAAX,CACQH,CAAIK,CAAAA,KAAJ,CAAUF,CAAV,CADR,CAGQL,CAAA,CAAOK,CAAP,CAKR,KAAIG,EAAmE,CAAC,CAAlD,GAAAd,CAAOe,CAAAA,QAASC,CAAAA,QAASC,CAAAA,MAAzB,CAAgC,WAAhC,CAAA,CAAsD,OAAtD,CAAgE,EAElFD,EAAAA,CAAWL,CAAKK,CAAAA,QAAhBA,EAA4BF,CAChC,KAAII,EAAOP,CAAKQ,CAAAA,QAAZD,EAAwBP,CAAKO,CAAAA,IAAjC,CACIE,EAAOT,CAAKS,CAAAA,IADhB,CAEIC,EAAOV,CAAKU,CAAAA,IAAZA,EAAoB,GAGpBH,EAAJ,EAAkC,CAAC,CAAnC,GAAYA,CAAKI,CAAAA,OAAL,CAAa,GAAb,CAAZ,GACCJ,CADD,CACQ,GADR,CACcA,CADd,CACqB,GADrB,CAIAP,EAAKH,CAAAA,GAAL,EAAYU,CAAA,CAAQF,CAAR,CAAmB,IAAnB,CAA0BE,CAA1B,CAAkC,EAA9C,GAAqDE,CAAA,CAAO,GAAP,CAAaA,CAAb,CAAoB,EAAzE,EAA+EC,CAC/EV,EAAKY,CAAAA,MAAL,CAAqCC,CAAtBb,CAAKY,CAAAA,MAAiBC,EAAP,KAAOA,EAAAA,WAAvB,EACdb,EAAKc,CAAAA,OAAL,CAAed,CAAKc,CAAAA,OAApB,EAA+B,EAI3BC,EAAAA,CAAM,IAAItB,CAAJ,CAAkBO,CAAlB,CACV,IAAIC,CAAJ,CACCc,CAAIC,CAAAA,EAAJ,CAAO,UAAP,CAAmBf,CAAnB,CACD,OAAOc,EA9B2B,CAFxBvB,EAmCNyB,CAAAA,GAAL,CAAWC,QAAa,CAAClB,CAAD,CAAOC,CAAP,CAAW,CAC9Bc,CAAAA,CApCMvB,CAoCKM,CAAAA,OAAL,CAAaE,CAAb,CAAmBC,CAAnB,CACVc;CAAII,CAAAA,GAAJ,EACA,OAAOJ,EAH2B,CAnCxBvB,EAyCNC,CAAAA,aAAL,CAAqBA,CAzCVD,EA0CN4B,CAAAA,eAAL,CAAuB1B,CAAS0B,CAAAA,eA1CrB5B,EA4CN6B,CAAAA,KAAL,CAAaC,QAAS,EAAG,EA5Cd9B,EA6CN6B,CAAAA,KAAME,CAAAA,iBAAX,CAA+B,CA7CpB/B,EA+CNgC,CAAAA,WAAL,CAAmB,IA/CRhC,CA+CiB6B,CAAAA,KA/CjB7B,EAiDNiC,CAAAA,YAAL,CAAoB7B,CAjDTJ,EAmDNkC,CAAAA,OAAL,CAAe,yLAAA,CAAA,KAAA,CAAA,GAAA,CA1D+C;\",\n\"sources\":[\"node_modules/stream-http/index.js\"],\n\"sourcesContent\":[\"shadow$provide[310] = function(global,require,module,exports) {\\nvar ClientRequest = require('./lib/request')\\nvar response = require('./lib/response')\\nvar extend = require('xtend')\\nvar statusCodes = require('builtin-status-codes')\\nvar url = require('url')\\n\\nvar http = exports\\n\\nhttp.request = function (opts, cb) {\\n\\tif (typeof opts === 'string')\\n\\t\\topts = url.parse(opts)\\n\\telse\\n\\t\\topts = extend(opts)\\n\\n\\t// Normally, the page is loaded from http or https, so not specifying a protocol\\n\\t// will result in a (valid) protocol-relative url. However, this won't work if\\n\\t// the protocol is something else, like 'file:'\\n\\tvar defaultProtocol = global.location.protocol.search(/^https?:$/) === -1 ? 'http:' : ''\\n\\n\\tvar protocol = opts.protocol || defaultProtocol\\n\\tvar host = opts.hostname || opts.host\\n\\tvar port = opts.port\\n\\tvar path = opts.path || '/'\\n\\n\\t// Necessary for IPv6 addresses\\n\\tif (host && host.indexOf(':') !== -1)\\n\\t\\thost = '[' + host + ']'\\n\\n\\t// This may be a relative url. The browser should always be able to interpret it correctly.\\n\\topts.url = (host ? (protocol + '//' + host) : '') + (port ? ':' + port : '') + path\\n\\topts.method = (opts.method || 'GET').toUpperCase()\\n\\topts.headers = opts.headers || {}\\n\\n\\t// Also valid opts.auth, opts.mode\\n\\n\\tvar req = new ClientRequest(opts)\\n\\tif (cb)\\n\\t\\treq.on('response', cb)\\n\\treturn req\\n}\\n\\nhttp.get = function get (opts, cb) {\\n\\tvar req = http.request(opts, cb)\\n\\treq.end()\\n\\treturn req\\n}\\n\\nhttp.ClientRequest = ClientRequest\\nhttp.IncomingMessage = response.IncomingMessage\\n\\nhttp.Agent = function () {}\\nhttp.Agent.defaultMaxSockets = 4\\n\\nhttp.globalAgent = new http.Agent()\\n\\nhttp.STATUS_CODES = statusCodes\\n\\nhttp.METHODS = [\\n\\t'CHECKOUT',\\n\\t'CONNECT',\\n\\t'COPY',\\n\\t'DELETE',\\n\\t'GET',\\n\\t'HEAD',\\n\\t'LOCK',\\n\\t'M-SEARCH',\\n\\t'MERGE',\\n\\t'MKACTIVITY',\\n\\t'MKCOL',\\n\\t'MOVE',\\n\\t'NOTIFY',\\n\\t'OPTIONS',\\n\\t'PATCH',\\n\\t'POST',\\n\\t'PROPFIND',\\n\\t'PROPPATCH',\\n\\t'PURGE',\\n\\t'PUT',\\n\\t'REPORT',\\n\\t'SEARCH',\\n\\t'SUBSCRIBE',\\n\\t'TRACE',\\n\\t'UNLOCK',\\n\\t'UNSUBSCRIBE'\\n]\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"ClientRequest\",\"response\",\"extend\",\"statusCodes\",\"url\",\"request\",\"http.request\",\"opts\",\"cb\",\"parse\",\"defaultProtocol\",\"location\",\"protocol\",\"search\",\"host\",\"hostname\",\"port\",\"path\",\"indexOf\",\"method\",\"toUpperCase\",\"headers\",\"req\",\"on\",\"get\",\"http.get\",\"end\",\"IncomingMessage\",\"Agent\",\"http.Agent\",\"defaultMaxSockets\",\"globalAgent\",\"STATUS_CODES\",\"METHODS\"]\n}\n"]