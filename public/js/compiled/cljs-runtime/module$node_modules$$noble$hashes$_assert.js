shadow$provide.module$node_modules$$noble$hashes$_assert=function(global,require,module,exports){function number(n){if(!Number.isSafeInteger(n)||0>n)throw Error(`Wrong positive integer: ${n}`);}function bool(b){if("boolean"!==typeof b)throw Error(`Expected boolean, not ${b}`);}function bytes(b,...lengths){if(!(b instanceof Uint8Array))throw Error("Expected Uint8Array");if(0<lengths.length&&!lengths.includes(b.length))throw Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);
}function hash(hash){if("function"!==typeof hash||"function"!==typeof hash.create)throw Error("Hash should be wrapped by utils.wrapConstructor");number(hash.outputLen);number(hash.blockLen)}function exists(instance,checkFinished=!0){if(instance.destroyed)throw Error("Hash instance has been destroyed");if(checkFinished&&instance.finished)throw Error("Hash#digest() has already been called");}function output(out,instance){bytes(out);instance=instance.outputLen;if(out.length<instance)throw Error(`digestInto() expects output buffer of length at least ${instance}`);
}Object.defineProperty(exports,"__esModule",{value:!0});exports.output=exports.exists=exports.hash=exports.bytes=exports.bool=exports.number=void 0;exports.number=number;exports.bool=bool;exports.bytes=bytes;exports.hash=hash;exports.exists=exists;exports.output=output;exports.default={number,bool,bytes,hash,exists,output}}
//# sourceMappingURL=module$node_modules$$noble$hashes$_assert.js.map
