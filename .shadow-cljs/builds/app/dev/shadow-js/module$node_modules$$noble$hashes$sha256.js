["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@noble/hashes/sha256.js"],"~:js","shadow$provide.module$node_modules$$noble$hashes$sha256=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.sha224=exports.sha256=void 0;global=require(\"module$node_modules$$noble$hashes$_sha2\");const utils_js_1=require(\"module$node_modules$$noble$hashes$utils\"),SHA256_K=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,\n3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,\n3204031479,3329325298]),IV=new Uint32Array([1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225]),SHA256_W=new Uint32Array(64);class SHA256 extends global.SHA2{constructor(){super(64,32,8,!1);this.A=IV[0]|0;this.B=IV[1]|0;this.C=IV[2]|0;this.D=IV[3]|0;this.E=IV[4]|0;this.F=IV[5]|0;this.G=IV[6]|0;this.H=IV[7]|0}get(){const {A,B,C,D,E,F,G,H}=this;return[A,B,C,D,E,F,G,H]}set(A,B,C,D,E,F,G,H){this.A=A|0;this.B=B|0;this.C=C|0;this.D=D|0;this.E=E|0;this.F=F|0;this.G=G|\n0;this.H=H|0}process(view,offset){for(var i=0;16>i;i++,offset+=4)SHA256_W[i]=view.getUint32(offset,!1);for(view=16;64>view;view++)i=SHA256_W[view-15],offset=SHA256_W[view-2],i=(0,utils_js_1.rotr)(i,7)^(0,utils_js_1.rotr)(i,18)^i>>>3,offset=(0,utils_js_1.rotr)(offset,17)^(0,utils_js_1.rotr)(offset,19)^offset>>>10,SHA256_W[view]=offset+SHA256_W[view-7]+i+SHA256_W[view-16]|0;let {A,B,C,D,E,F,G,H}=this;for(view=0;64>view;view++)offset=(0,utils_js_1.rotr)(E,6)^(0,utils_js_1.rotr)(E,11)^(0,utils_js_1.rotr)(E,\n25),offset=H+offset+(E&F^~E&G)+SHA256_K[view]+SHA256_W[view]|0,i=((0,utils_js_1.rotr)(A,2)^(0,utils_js_1.rotr)(A,13)^(0,utils_js_1.rotr)(A,22))+(A&B^A&C^B&C)|0,H=G,G=F,F=E,E=D+offset|0,D=C,C=B,B=A,A=offset+i|0;A=A+this.A|0;B=B+this.B|0;C=C+this.C|0;D=D+this.D|0;E=E+this.E|0;F=F+this.F|0;G=G+this.G|0;H=H+this.H|0;this.set(A,B,C,D,E,F,G,H)}roundClean(){SHA256_W.fill(0)}destroy(){this.set(0,0,0,0,0,0,0,0);this.buffer.fill(0)}}class SHA224 extends SHA256{constructor(){super();this.A=-1056596264;this.B=\n914150663;this.C=812702999;this.D=-150054599;this.E=-4191439;this.F=1750603025;this.G=1694076839;this.H=-1090891868;this.outputLen=28}}exports.sha256=(0,utils_js_1.wrapConstructor)(()=>new SHA256);exports.sha224=(0,utils_js_1.wrapConstructor)(()=>new SHA224)}","~:source","shadow$provide[\"module$node_modules$$noble$hashes$sha256\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sha224 = exports.sha256 = void 0;\nconst _sha2_js_1 = require(\"./_sha2.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = /* @__PURE__ */ new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends _sha2_js_1.SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ (W15 >>> 3);\n            const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = (0, utils_js_1.rotr)(E, 6) ^ (0, utils_js_1.rotr)(E, 11) ^ (0, utils_js_1.rotr)(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexports.sha256 = (0, utils_js_1.wrapConstructor)(() => new SHA256());\nexports.sha224 = (0, utils_js_1.wrapConstructor)(() => new SHA224());\n//# sourceMappingURL=sha256.js.map\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$$noble$hashes$_sha2","~$shadow.js","~$module$node_modules$$noble$hashes$utils"]],"~:properties",["^5",["outputLen","sha224","__esModule","G","sha256","H","value","E","C","F","B","A","D"]],"~:compiled-at",1695111490314,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$noble$hashes$sha256.js\",\n\"lineCount\":6,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/@noble/hashes/sha256.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$noble$hashes$sha256\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nexports.sha224 = exports.sha256 = void 0;\\nconst _sha2_js_1 = require(\\\"./_sha2.js\\\");\\nconst utils_js_1 = require(\\\"./utils.js\\\");\\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\\n// BTC network is doing 2^67 hashes/sec as per early 2023.\\n// Choice: a ? b : c\\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\\n// Majority function, true if any two inpust is true\\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\\n// Round constants:\\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\\n// prettier-ignore\\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\\n]);\\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\\n// prettier-ignore\\nconst IV = /* @__PURE__ */ new Uint32Array([\\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\\n]);\\n// Temporary buffer, not used to store anything between runs\\n// Named this way because it matches specification.\\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\\nclass SHA256 extends _sha2_js_1.SHA2 {\\n    constructor() {\\n        super(64, 32, 8, false);\\n        // We cannot use array here since array allows indexing by variable\\n        // which means optimizer/compiler cannot use registers.\\n        this.A = IV[0] | 0;\\n        this.B = IV[1] | 0;\\n        this.C = IV[2] | 0;\\n        this.D = IV[3] | 0;\\n        this.E = IV[4] | 0;\\n        this.F = IV[5] | 0;\\n        this.G = IV[6] | 0;\\n        this.H = IV[7] | 0;\\n    }\\n    get() {\\n        const { A, B, C, D, E, F, G, H } = this;\\n        return [A, B, C, D, E, F, G, H];\\n    }\\n    // prettier-ignore\\n    set(A, B, C, D, E, F, G, H) {\\n        this.A = A | 0;\\n        this.B = B | 0;\\n        this.C = C | 0;\\n        this.D = D | 0;\\n        this.E = E | 0;\\n        this.F = F | 0;\\n        this.G = G | 0;\\n        this.H = H | 0;\\n    }\\n    process(view, offset) {\\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\\n        for (let i = 0; i < 16; i++, offset += 4)\\n            SHA256_W[i] = view.getUint32(offset, false);\\n        for (let i = 16; i < 64; i++) {\\n            const W15 = SHA256_W[i - 15];\\n            const W2 = SHA256_W[i - 2];\\n            const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ (W15 >>> 3);\\n            const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ (W2 >>> 10);\\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\\n        }\\n        // Compression function main loop, 64 rounds\\n        let { A, B, C, D, E, F, G, H } = this;\\n        for (let i = 0; i < 64; i++) {\\n            const sigma1 = (0, utils_js_1.rotr)(E, 6) ^ (0, utils_js_1.rotr)(E, 11) ^ (0, utils_js_1.rotr)(E, 25);\\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\\n            const sigma0 = (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);\\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\\n            H = G;\\n            G = F;\\n            F = E;\\n            E = (D + T1) | 0;\\n            D = C;\\n            C = B;\\n            B = A;\\n            A = (T1 + T2) | 0;\\n        }\\n        // Add the compressed chunk to the current hash value\\n        A = (A + this.A) | 0;\\n        B = (B + this.B) | 0;\\n        C = (C + this.C) | 0;\\n        D = (D + this.D) | 0;\\n        E = (E + this.E) | 0;\\n        F = (F + this.F) | 0;\\n        G = (G + this.G) | 0;\\n        H = (H + this.H) | 0;\\n        this.set(A, B, C, D, E, F, G, H);\\n    }\\n    roundClean() {\\n        SHA256_W.fill(0);\\n    }\\n    destroy() {\\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\\n        this.buffer.fill(0);\\n    }\\n}\\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\\nclass SHA224 extends SHA256 {\\n    constructor() {\\n        super();\\n        this.A = 0xc1059ed8 | 0;\\n        this.B = 0x367cd507 | 0;\\n        this.C = 0x3070dd17 | 0;\\n        this.D = 0xf70e5939 | 0;\\n        this.E = 0xffc00b31 | 0;\\n        this.F = 0x68581511 | 0;\\n        this.G = 0x64f98fa7 | 0;\\n        this.H = 0xbefa4fa4 | 0;\\n        this.outputLen = 28;\\n    }\\n}\\n/**\\n * SHA2-256 hash function\\n * @param message - data that would be hashed\\n */\\nexports.sha256 = (0, utils_js_1.wrapConstructor)(() => new SHA256());\\nexports.sha224 = (0, utils_js_1.wrapConstructor)(() => new SHA224());\\n//# sourceMappingURL=sha256.js.map\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"sha224\",\"sha256\",\"_sha2_js_1\",\"utils_js_1\",\"SHA256_K\",\"Uint32Array\",\"IV\",\"SHA256_W\",\"SHA256\",\"SHA2\",\"constructor\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"get\",\"set\",\"process\",\"view\",\"offset\",\"i\",\"getUint32\",\"W15\",\"W2\",\"s0\",\"rotr\",\"s1\",\"sigma1\",\"T1\",\"T2\",\"roundClean\",\"fill\",\"destroy\",\"buffer\",\"SHA224\",\"outputLen\",\"wrapConstructor\"]\n}\n"]