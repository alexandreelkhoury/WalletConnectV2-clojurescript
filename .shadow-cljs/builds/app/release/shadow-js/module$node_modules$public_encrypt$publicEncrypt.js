["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/public-encrypt/publicEncrypt.js"],"~:js","shadow$provide[257]=function(S,A,V,q){var F=A(246),G=A(112),r=A(163),y=A(253),e=A(254),u=A(255),p=A(256),n=A(225),l=A(111).Buffer;V.exports=function(h,k,t){var B=h.padding?h.padding:t?1:4;h=F(h);if(4===B){B=h.modulus.byteLength();var E=k.length,H=r(\"sha1\").update(l.alloc(0)).digest(),D=H.length,C=2*D;if(E>B-C-2)throw Error(\"message too long\");C=l.alloc(B-E-C-2);var I=B-D-1;E=G(D);k=e(l.concat([H,C,l.alloc(1,1),k],I),y(E,I));D=e(E,y(k,D));k=new u(l.concat([l.alloc(1),D,k],B))}else if(1===B){D=k.length;\nB=h.modulus.byteLength();if(D>B-11)throw Error(\"message too long\");if(t)D=l.alloc(B-D-3,255);else{D=B-D-3;H=l.allocUnsafe(D);E=0;C=G(2*D);I=0;for(var M;E<D;)I===C.length&&(C=G(2*D),I=0),(M=C[I++])&&(H[E++]=M);D=H}k=new u(l.concat([l.from([0,t?1:2]),D,l.alloc(1),k],B))}else if(3===B){if(k=new u(k),0<=k.cmp(h.modulus))throw Error(\"data too long for modulus\");}else throw Error(\"unknown padding\");return t?n(k,h):p(k,h)}}","~:source","shadow$provide[257] = function(global,require,module,exports) {\nvar parseKeys = require('parse-asn1')\nvar randomBytes = require('randombytes')\nvar createHash = require('create-hash')\nvar mgf = require('./mgf')\nvar xor = require('./xor')\nvar BN = require('bn.js')\nvar withPublic = require('./withPublic')\nvar crt = require('browserify-rsa')\nvar Buffer = require('safe-buffer').Buffer\n\nmodule.exports = function publicEncrypt (publicKey, msg, reverse) {\n  var padding\n  if (publicKey.padding) {\n    padding = publicKey.padding\n  } else if (reverse) {\n    padding = 1\n  } else {\n    padding = 4\n  }\n  var key = parseKeys(publicKey)\n  var paddedMsg\n  if (padding === 4) {\n    paddedMsg = oaep(key, msg)\n  } else if (padding === 1) {\n    paddedMsg = pkcs1(key, msg, reverse)\n  } else if (padding === 3) {\n    paddedMsg = new BN(msg)\n    if (paddedMsg.cmp(key.modulus) >= 0) {\n      throw new Error('data too long for modulus')\n    }\n  } else {\n    throw new Error('unknown padding')\n  }\n  if (reverse) {\n    return crt(paddedMsg, key)\n  } else {\n    return withPublic(paddedMsg, key)\n  }\n}\n\nfunction oaep (key, msg) {\n  var k = key.modulus.byteLength()\n  var mLen = msg.length\n  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()\n  var hLen = iHash.length\n  var hLen2 = 2 * hLen\n  if (mLen > k - hLen2 - 2) {\n    throw new Error('message too long')\n  }\n  var ps = Buffer.alloc(k - mLen - hLen2 - 2)\n  var dblen = k - hLen - 1\n  var seed = randomBytes(hLen)\n  var maskedDb = xor(Buffer.concat([iHash, ps, Buffer.alloc(1, 1), msg], dblen), mgf(seed, dblen))\n  var maskedSeed = xor(seed, mgf(maskedDb, hLen))\n  return new BN(Buffer.concat([Buffer.alloc(1), maskedSeed, maskedDb], k))\n}\nfunction pkcs1 (key, msg, reverse) {\n  var mLen = msg.length\n  var k = key.modulus.byteLength()\n  if (mLen > k - 11) {\n    throw new Error('message too long')\n  }\n  var ps\n  if (reverse) {\n    ps = Buffer.alloc(k - mLen - 3, 0xff)\n  } else {\n    ps = nonZero(k - mLen - 3)\n  }\n  return new BN(Buffer.concat([Buffer.from([0, reverse ? 1 : 2]), ps, Buffer.alloc(1), msg], k))\n}\nfunction nonZero (len) {\n  var out = Buffer.allocUnsafe(len)\n  var i = 0\n  var cache = randomBytes(len * 2)\n  var cur = 0\n  var num\n  while (i < len) {\n    if (cur === cache.length) {\n      cache = randomBytes(len * 2)\n      cur = 0\n    }\n    num = cache[cur++]\n    if (num) {\n      out[i++] = num\n    }\n  }\n  return out\n}\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$public_encrypt$withPublic","~$module$node_modules$public_encrypt$xor","~$module$node_modules$create_hash$browser","~$shadow.js","~$module$node_modules$safe_buffer$index","~$module$node_modules$parse_asn1$index","~$module$node_modules$public_encrypt$mgf","~$module$node_modules$randombytes$browser","~$module$node_modules$public_encrypt$node_modules$bn_js$lib$bn","~$module$node_modules$browserify_rsa$index"]],"~:properties",["^5",[]],"~:compiled-at",1695041440876,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$public_encrypt$publicEncrypt.js\",\n\"lineCount\":2,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/public-encrypt/publicEncrypt.js\"],\n\"sourcesContent\":[\"shadow$provide[257] = function(global,require,module,exports) {\\nvar parseKeys = require('parse-asn1')\\nvar randomBytes = require('randombytes')\\nvar createHash = require('create-hash')\\nvar mgf = require('./mgf')\\nvar xor = require('./xor')\\nvar BN = require('bn.js')\\nvar withPublic = require('./withPublic')\\nvar crt = require('browserify-rsa')\\nvar Buffer = require('safe-buffer').Buffer\\n\\nmodule.exports = function publicEncrypt (publicKey, msg, reverse) {\\n  var padding\\n  if (publicKey.padding) {\\n    padding = publicKey.padding\\n  } else if (reverse) {\\n    padding = 1\\n  } else {\\n    padding = 4\\n  }\\n  var key = parseKeys(publicKey)\\n  var paddedMsg\\n  if (padding === 4) {\\n    paddedMsg = oaep(key, msg)\\n  } else if (padding === 1) {\\n    paddedMsg = pkcs1(key, msg, reverse)\\n  } else if (padding === 3) {\\n    paddedMsg = new BN(msg)\\n    if (paddedMsg.cmp(key.modulus) >= 0) {\\n      throw new Error('data too long for modulus')\\n    }\\n  } else {\\n    throw new Error('unknown padding')\\n  }\\n  if (reverse) {\\n    return crt(paddedMsg, key)\\n  } else {\\n    return withPublic(paddedMsg, key)\\n  }\\n}\\n\\nfunction oaep (key, msg) {\\n  var k = key.modulus.byteLength()\\n  var mLen = msg.length\\n  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()\\n  var hLen = iHash.length\\n  var hLen2 = 2 * hLen\\n  if (mLen > k - hLen2 - 2) {\\n    throw new Error('message too long')\\n  }\\n  var ps = Buffer.alloc(k - mLen - hLen2 - 2)\\n  var dblen = k - hLen - 1\\n  var seed = randomBytes(hLen)\\n  var maskedDb = xor(Buffer.concat([iHash, ps, Buffer.alloc(1, 1), msg], dblen), mgf(seed, dblen))\\n  var maskedSeed = xor(seed, mgf(maskedDb, hLen))\\n  return new BN(Buffer.concat([Buffer.alloc(1), maskedSeed, maskedDb], k))\\n}\\nfunction pkcs1 (key, msg, reverse) {\\n  var mLen = msg.length\\n  var k = key.modulus.byteLength()\\n  if (mLen > k - 11) {\\n    throw new Error('message too long')\\n  }\\n  var ps\\n  if (reverse) {\\n    ps = Buffer.alloc(k - mLen - 3, 0xff)\\n  } else {\\n    ps = nonZero(k - mLen - 3)\\n  }\\n  return new BN(Buffer.concat([Buffer.from([0, reverse ? 1 : 2]), ps, Buffer.alloc(1), msg], k))\\n}\\nfunction nonZero (len) {\\n  var out = Buffer.allocUnsafe(len)\\n  var i = 0\\n  var cache = randomBytes(len * 2)\\n  var cur = 0\\n  var num\\n  while (i < len) {\\n    if (cur === cache.length) {\\n      cache = randomBytes(len * 2)\\n      cur = 0\\n    }\\n    num = cache[cur++]\\n    if (num) {\\n      out[i++] = num\\n    }\\n  }\\n  return out\\n}\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"parseKeys\",\"randomBytes\",\"createHash\",\"mgf\",\"xor\",\"BN\",\"withPublic\",\"crt\",\"Buffer\",\"module.exports\",\"publicKey\",\"msg\",\"reverse\",\"padding\",\"key\",\"k\",\"modulus\",\"byteLength\",\"mLen\",\"length\",\"iHash\",\"update\",\"alloc\",\"digest\",\"hLen\",\"hLen2\",\"Error\",\"ps\",\"dblen\",\"seed\",\"maskedDb\",\"concat\",\"maskedSeed\",\"out\",\"allocUnsafe\",\"len\",\"i\",\"cache\",\"cur\",\"num\",\"from\",\"paddedMsg\",\"cmp\"]\n}\n"]