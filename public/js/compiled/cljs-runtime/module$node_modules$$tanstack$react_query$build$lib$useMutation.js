shadow$provide.module$node_modules$$tanstack$react_query$build$lib$useMutation=function(global,require,module,exports){function noop(){}"use client";"use strict";Object.defineProperty(exports,"__esModule",{value:!0});global=require("module$node_modules$react$index");var queryCore=require("module$node_modules$$tanstack$query_core$build$lib$index"),useSyncExternalStore=require("module$node_modules$$tanstack$react_query$build$lib$useSyncExternalStore"),QueryClientProvider=require("module$node_modules$$tanstack$react_query$build$lib$QueryClientProvider"),
utils=require("module$node_modules$$tanstack$react_query$build$lib$utils"),React__namespace=function(e){if(e&&e.__esModule)return e;var n=Object.create(null);e&&Object.keys(e).forEach(function(k){if("default"!==k){var d=Object.getOwnPropertyDescriptor(e,k);Object.defineProperty(n,k,d.get?d:{enumerable:!0,get:function(){return e[k]}})}});n["default"]=e;return Object.freeze(n)}(global);exports.useMutation=function(arg1,arg2,arg3){const options=queryCore.parseMutationArgs(arg1,arg2,arg3),queryClient=
QueryClientProvider.useQueryClient({context:options.context}),[observer]=React__namespace.useState(()=>new queryCore.MutationObserver(queryClient,options));React__namespace.useEffect(()=>{observer.setOptions(options)},[observer,options]);arg1=useSyncExternalStore.useSyncExternalStore(React__namespace.useCallback(onStoreChange=>observer.subscribe(queryCore.notifyManager.batchCalls(onStoreChange)),[observer]),()=>observer.getCurrentResult(),()=>observer.getCurrentResult());arg2=React__namespace.useCallback((variables,
mutateOptions)=>{observer.mutate(variables,mutateOptions).catch(noop)},[observer]);if(arg1.error&&utils.shouldThrowError(observer.options.useErrorBoundary,[arg1.error]))throw arg1.error;return{...arg1,mutate:arg2,mutateAsync:arg1.mutate}}}
//# sourceMappingURL=module$node_modules$$tanstack$react_query$build$lib$useMutation.js.map
