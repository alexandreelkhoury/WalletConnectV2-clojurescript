{
"version":3,
"file":"module$node_modules$viem$_cjs$clients$transports$http.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,CAAA,qDAAA,CAA0E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAElHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CACAH,QAAQI,CAAAA,IAAR,CAAe,IAAK,EACpB,OAAMC,aAAeP,OAAA,CAAQ,8CAAR,CAArB,CACMQ,eAAiBR,OAAA,CAAQ,gDAAR,CADvB,CAEMS,0BAA4BT,OAAA,CAAQ,kEAAR,CAFlC,CAGMU,SAAWV,OAAA,CAAQ,yCAAR,CAHjB,CAIMW;AAAuBX,OAAA,CAAQ,kEAAR,CAgD7BE,QAAQI,CAAAA,IAAR,CA/CAA,QAAa,CAACM,GAAD,CAAMC,MAAA,CAAS,EAAf,CAAmB,CAC5B,MAAM,CAAEC,KAAF,CAASC,YAAT,CAAuBC,GAAA,CAAM,MAA7B,CAAqCC,IAAA,CAAO,eAA5C,CAA6DC,UAA7D,CAAA,CAA6EL,MACnF,OAAO,CAAC,CAAEM,KAAF,CAAS,WAAYC,WAArB,CAAkC,QAASC,QAA3C,CAAD,CAAA,EAA2D,CAC9D,MAAM,CAAEC,SAAA,CAAY,GAAd,CAAoBC,IAAA,CAAO,CAA3B,CAAA,CAAkD,QAAjB,GAAA,MAAOT,MAAP,CAA4BA,KAA5B,CAAoC,EACrEU,YAAAA,CAAaX,MAAOW,CAAAA,UAApBA,EAAkCJ,WACxC,OAAMK,QAAUJ,QAAVI,EAAsBZ,MAAOY,CAAAA,OAA7BA,EAAwC,GAA9C,CACMC,KAAOd,GAAPc,EAAcP,KAAOQ,EAAAA,OAAQC,CAAAA,OAAQtB,CAAAA,IAAvB,CAA4B,CAA5B,CACpB,IAAI,CAACoB,IAAL,CACI,KAAM,KAAIlB,cAAeqB,CAAAA,gBAAzB,CACJ,MAAO,GAAIlB,oBAAqBmB,CAAAA,eAAzB,EAA0C,CAC7Cd,GAD6C;AAE7CC,IAF6C,CAGvCc,aAAO,CAAC,CAAEC,MAAF,CAAUC,MAAV,CAAD,CAAqB,CACxBC,MAAAA,CAAO,CAAEF,MAAF,CAAUC,MAAV,CACb,OAAM,CAAEE,QAAF,CAAA,CAAe,GAAI1B,yBAA0B2B,CAAAA,oBAA9B,EAAoD,CACrEC,GAAK,GAAEzB,GAAF,EADgE,CAErEW,IAFqE,CAGrEe,gBAAgB,CAACC,QAAD,CAAW,CACvB,MAAOA,SAASC,CAAAA,MAAhB,CAAyBlB,SADF,CAH0C,CAMrEmB,GAAKP,IAADO,EAAU/B,QAASgC,CAAAA,GAAIpC,CAAAA,IAAb,CAAkBoB,IAAlB,CAAwB,CAClCQ,IADkC,CAElCnB,YAFkC,CAGlCU,OAHkC,CAAxB,CANuD,CAApD,CAArB,CAeM,CAAC,CAAEkB,KAAF,CAASC,MAAT,CAAD,CAAA,CAAsB,MAHjBH,MAAOP,KAAPO,EAAgB3B,KAAA,CACrBqB,QAAA,CAASD,IAAT,CADqB,CAErB,CAAC,MAAMxB,QAASgC,CAAAA,GAAIpC,CAAAA,IAAb,CAAkBoB,IAAlB,CAAwB,CAAEQ,IAAF,CAAQnB,YAAR,CAAsBU,OAAtB,CAAxB,CAAP,CAFKgB,CAGuB,CAAGP,MAAH,CAClC,IAAIS,KAAJ,CACI,KAAM,KAAIpC,YAAasC,CAAAA,eAAjB,CAAiC,CACnCX,KAAAA,MADmC,CAEnCS,KAFmC,CAGnC/B,IAAKc,IAH8B,CAAjC,CAAN,CAKJ,MAAOkB,OAxBuB,CAHW,CA6B7CpB,WAAAA,WA7B6C;AA8B7CN,UA9B6C,CA+B7CO,OA/B6C,CAgC7CqB,KAAM,MAhCuC,CAA1C,CAiCJ,CACClC,GADD,CAjCI,CAPuD,CAFtC,CATkF;",
"sources":["node_modules/viem/_cjs/clients/transports/http.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$viem$_cjs$clients$transports$http\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.http = void 0;\nconst request_js_1 = require(\"../../errors/request.js\");\nconst transport_js_1 = require(\"../../errors/transport.js\");\nconst createBatchScheduler_js_1 = require(\"../../utils/promise/createBatchScheduler.js\");\nconst rpc_js_1 = require(\"../../utils/rpc.js\");\nconst createTransport_js_1 = require(\"./createTransport.js\");\nfunction http(url, config = {}) {\n    const { batch, fetchOptions, key = 'http', name = 'HTTP JSON-RPC', retryDelay, } = config;\n    return ({ chain, retryCount: retryCount_, timeout: timeout_ }) => {\n        const { batchSize = 1000, wait = 0 } = typeof batch === 'object' ? batch : {};\n        const retryCount = config.retryCount ?? retryCount_;\n        const timeout = timeout_ ?? config.timeout ?? 10000;\n        const url_ = url || chain?.rpcUrls.default.http[0];\n        if (!url_)\n            throw new transport_js_1.UrlRequiredError();\n        return (0, createTransport_js_1.createTransport)({\n            key,\n            name,\n            async request({ method, params }) {\n                const body = { method, params };\n                const { schedule } = (0, createBatchScheduler_js_1.createBatchScheduler)({\n                    id: `${url}`,\n                    wait,\n                    shouldSplitBatch(requests) {\n                        return requests.length > batchSize;\n                    },\n                    fn: (body) => rpc_js_1.rpc.http(url_, {\n                        body,\n                        fetchOptions,\n                        timeout,\n                    }),\n                });\n                const fn = async (body) => batch\n                    ? schedule(body)\n                    : [await rpc_js_1.rpc.http(url_, { body, fetchOptions, timeout })];\n                const [{ error, result }] = await fn(body);\n                if (error)\n                    throw new request_js_1.RpcRequestError({\n                        body,\n                        error,\n                        url: url_,\n                    });\n                return result;\n            },\n            retryCount,\n            retryDelay,\n            timeout,\n            type: 'http',\n        }, {\n            url,\n        });\n    };\n}\nexports.http = http;\n//# sourceMappingURL=http.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","http","request_js_1","transport_js_1","createBatchScheduler_js_1","rpc_js_1","createTransport_js_1","url","config","batch","fetchOptions","key","name","retryDelay","chain","retryCount_","timeout_","batchSize","wait","retryCount","timeout","url_","rpcUrls","default","UrlRequiredError","createTransport","request","method","params","body","schedule","createBatchScheduler","id","shouldSplitBatch","requests","length","fn","rpc","error","result","RpcRequestError","type"]
}
