["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/sha_DOT_js/hash.js"],"~:js","shadow$provide[134]=function(S,A,V,q){function F(r,y){this._block=G.alloc(r);this._finalSize=y;this._blockSize=r;this._len=0}var G=A(111).Buffer;F.prototype.update=function(r,y){\"string\"===typeof r&&(r=G.from(r,y||\"utf8\"));y=this._block;for(var e=this._blockSize,u=r.length,p=this._len,n=0;n<u;){for(var l=p%e,h=Math.min(u-n,e-l),k=0;k<h;k++)y[l+k]=r[n+k];p+=h;n+=h;0===p%e&&this._update(y)}this._len+=u;return this};F.prototype.digest=function(r){var y=this._len%this._blockSize;this._block[y]=128;this._block.fill(0,\ny+1);y>=this._finalSize&&(this._update(this._block),this._block.fill(0));y=8*this._len;if(4294967295>=y)this._block.writeUInt32BE(y,this._blockSize-4);else{var e=(y&4294967295)>>>0;this._block.writeUInt32BE((y-e)/4294967296,this._blockSize-8);this._block.writeUInt32BE(e,this._blockSize-4)}this._update(this._block);y=this._hash();return r?y.toString(r):y};F.prototype._update=function(){throw Error(\"_update must be implemented by subclass\");};V.exports=F}","~:source","shadow$provide[134] = function(global,require,module,exports) {\nvar Buffer = require('safe-buffer').Buffer\n\n// prototype class for hash functions\nfunction Hash (blockSize, finalSize) {\n  this._block = Buffer.alloc(blockSize)\n  this._finalSize = finalSize\n  this._blockSize = blockSize\n  this._len = 0\n}\n\nHash.prototype.update = function (data, enc) {\n  if (typeof data === 'string') {\n    enc = enc || 'utf8'\n    data = Buffer.from(data, enc)\n  }\n\n  var block = this._block\n  var blockSize = this._blockSize\n  var length = data.length\n  var accum = this._len\n\n  for (var offset = 0; offset < length;) {\n    var assigned = accum % blockSize\n    var remainder = Math.min(length - offset, blockSize - assigned)\n\n    for (var i = 0; i < remainder; i++) {\n      block[assigned + i] = data[offset + i]\n    }\n\n    accum += remainder\n    offset += remainder\n\n    if ((accum % blockSize) === 0) {\n      this._update(block)\n    }\n  }\n\n  this._len += length\n  return this\n}\n\nHash.prototype.digest = function (enc) {\n  var rem = this._len % this._blockSize\n\n  this._block[rem] = 0x80\n\n  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest\n  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize\n  this._block.fill(0, rem + 1)\n\n  if (rem >= this._finalSize) {\n    this._update(this._block)\n    this._block.fill(0)\n  }\n\n  var bits = this._len * 8\n\n  // uint32\n  if (bits <= 0xffffffff) {\n    this._block.writeUInt32BE(bits, this._blockSize - 4)\n\n  // uint64\n  } else {\n    var lowBits = (bits & 0xffffffff) >>> 0\n    var highBits = (bits - lowBits) / 0x100000000\n\n    this._block.writeUInt32BE(highBits, this._blockSize - 8)\n    this._block.writeUInt32BE(lowBits, this._blockSize - 4)\n  }\n\n  this._update(this._block)\n  var hash = this._hash()\n\n  return enc ? hash.toString(enc) : hash\n}\n\nHash.prototype._update = function () {\n  throw new Error('_update must be implemented by subclass')\n}\n\nmodule.exports = Hash\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$safe_buffer$index"]],"~:properties",["^5",["update","digest","_blockSize","_len","_finalSize","_update","_block"]],"~:compiled-at",1695041440806,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$sha_DOT_js$hash.js\",\n\"lineCount\":2,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/sha_DOT_js/hash.js\"],\n\"sourcesContent\":[\"shadow$provide[134] = function(global,require,module,exports) {\\nvar Buffer = require('safe-buffer').Buffer\\n\\n// prototype class for hash functions\\nfunction Hash (blockSize, finalSize) {\\n  this._block = Buffer.alloc(blockSize)\\n  this._finalSize = finalSize\\n  this._blockSize = blockSize\\n  this._len = 0\\n}\\n\\nHash.prototype.update = function (data, enc) {\\n  if (typeof data === 'string') {\\n    enc = enc || 'utf8'\\n    data = Buffer.from(data, enc)\\n  }\\n\\n  var block = this._block\\n  var blockSize = this._blockSize\\n  var length = data.length\\n  var accum = this._len\\n\\n  for (var offset = 0; offset < length;) {\\n    var assigned = accum % blockSize\\n    var remainder = Math.min(length - offset, blockSize - assigned)\\n\\n    for (var i = 0; i < remainder; i++) {\\n      block[assigned + i] = data[offset + i]\\n    }\\n\\n    accum += remainder\\n    offset += remainder\\n\\n    if ((accum % blockSize) === 0) {\\n      this._update(block)\\n    }\\n  }\\n\\n  this._len += length\\n  return this\\n}\\n\\nHash.prototype.digest = function (enc) {\\n  var rem = this._len % this._blockSize\\n\\n  this._block[rem] = 0x80\\n\\n  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest\\n  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize\\n  this._block.fill(0, rem + 1)\\n\\n  if (rem >= this._finalSize) {\\n    this._update(this._block)\\n    this._block.fill(0)\\n  }\\n\\n  var bits = this._len * 8\\n\\n  // uint32\\n  if (bits <= 0xffffffff) {\\n    this._block.writeUInt32BE(bits, this._blockSize - 4)\\n\\n  // uint64\\n  } else {\\n    var lowBits = (bits & 0xffffffff) >>> 0\\n    var highBits = (bits - lowBits) / 0x100000000\\n\\n    this._block.writeUInt32BE(highBits, this._blockSize - 8)\\n    this._block.writeUInt32BE(lowBits, this._blockSize - 4)\\n  }\\n\\n  this._update(this._block)\\n  var hash = this._hash()\\n\\n  return enc ? hash.toString(enc) : hash\\n}\\n\\nHash.prototype._update = function () {\\n  throw new Error('_update must be implemented by subclass')\\n}\\n\\nmodule.exports = Hash\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Hash\",\"blockSize\",\"finalSize\",\"_block\",\"Buffer\",\"alloc\",\"_finalSize\",\"_blockSize\",\"_len\",\"prototype\",\"update\",\"Hash.prototype.update\",\"data\",\"enc\",\"from\",\"block\",\"length\",\"accum\",\"offset\",\"assigned\",\"remainder\",\"Math\",\"min\",\"i\",\"_update\",\"digest\",\"Hash.prototype.digest\",\"rem\",\"fill\",\"bits\",\"writeUInt32BE\",\"lowBits\",\"hash\",\"_hash\",\"toString\",\"Hash.prototype._update\",\"Error\"]\n}\n"]