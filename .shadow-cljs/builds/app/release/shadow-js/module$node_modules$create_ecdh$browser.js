["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/create-ecdh/browser.js"],"~:js","shadow$provide[252]=function(S,A,V,q){function F(p){this.curveType=u[p];this.curveType||(this.curveType={name:p});this.curve=new y.ec(this.curveType.name);this.keys=void 0}function G(p,n,l){Array.isArray(p)||(p=p.toArray());p=new r(p);l&&p.length<l&&(l=new r(l-p.length),l.fill(0),p=r.concat([l,p]));return n?p.toString(n):p}var r=A(53).Buffer,y=A(102),e=A(251);V.exports=function(p){return new F(p)};var u={secp256k1:{name:\"secp256k1\",byteLength:32},secp224r1:{name:\"p224\",byteLength:28},prime256v1:{name:\"p256\",\nbyteLength:32},prime192v1:{name:\"p192\",byteLength:24},ed25519:{name:\"ed25519\",byteLength:32},secp384r1:{name:\"p384\",byteLength:48},secp521r1:{name:\"p521\",byteLength:66}};u.p224=u.secp224r1;u.p256=u.secp256r1=u.prime256v1;u.p192=u.secp192r1=u.prime192v1;u.p384=u.secp384r1;u.p521=u.secp521r1;F.prototype.generateKeys=function(p,n){this.keys=this.curve.genKeyPair();return this.getPublicKey(p,n)};F.prototype.computeSecret=function(p,n,l){n=n||\"utf8\";r.isBuffer(p)||(p=new r(p,n));p=this.curve.keyFromPublic(p).getPublic().mul(this.keys.getPrivate()).getX();\nreturn G(p,l,this.curveType.byteLength)};F.prototype.getPublicKey=function(p,n){var l=this.keys.getPublic(\"compressed\"===n,!0);\"hybrid\"===n&&(l[0]=l[l.length-1]%2?7:6);return G(l,p)};F.prototype.getPrivateKey=function(p){return G(this.keys.getPrivate(),p)};F.prototype.setPublicKey=function(p,n){n=n||\"utf8\";r.isBuffer(p)||(p=new r(p,n));this.keys._importPublic(p);return this};F.prototype.setPrivateKey=function(p,n){n=n||\"utf8\";r.isBuffer(p)||(p=new r(p,n));p=new e(p);p=p.toString(16);this.keys=this.curve.genKeyPair();\nthis.keys._importPrivate(p);return this}}","~:source","shadow$provide[252] = function(global,require,module,exports) {\nvar Buffer = require('buffer').Buffer;\nvar elliptic = require('elliptic')\nvar BN = require('bn.js')\n\nmodule.exports = function createECDH (curve) {\n  return new ECDH(curve)\n}\n\nvar aliases = {\n  secp256k1: {\n    name: 'secp256k1',\n    byteLength: 32\n  },\n  secp224r1: {\n    name: 'p224',\n    byteLength: 28\n  },\n  prime256v1: {\n    name: 'p256',\n    byteLength: 32\n  },\n  prime192v1: {\n    name: 'p192',\n    byteLength: 24\n  },\n  ed25519: {\n    name: 'ed25519',\n    byteLength: 32\n  },\n  secp384r1: {\n    name: 'p384',\n    byteLength: 48\n  },\n  secp521r1: {\n    name: 'p521',\n    byteLength: 66\n  }\n}\n\naliases.p224 = aliases.secp224r1\naliases.p256 = aliases.secp256r1 = aliases.prime256v1\naliases.p192 = aliases.secp192r1 = aliases.prime192v1\naliases.p384 = aliases.secp384r1\naliases.p521 = aliases.secp521r1\n\nfunction ECDH (curve) {\n  this.curveType = aliases[curve]\n  if (!this.curveType) {\n    this.curveType = {\n      name: curve\n    }\n  }\n  this.curve = new elliptic.ec(this.curveType.name) // eslint-disable-line new-cap\n  this.keys = void 0\n}\n\nECDH.prototype.generateKeys = function (enc, format) {\n  this.keys = this.curve.genKeyPair()\n  return this.getPublicKey(enc, format)\n}\n\nECDH.prototype.computeSecret = function (other, inenc, enc) {\n  inenc = inenc || 'utf8'\n  if (!Buffer.isBuffer(other)) {\n    other = new Buffer(other, inenc)\n  }\n  var otherPub = this.curve.keyFromPublic(other).getPublic()\n  var out = otherPub.mul(this.keys.getPrivate()).getX()\n  return formatReturnValue(out, enc, this.curveType.byteLength)\n}\n\nECDH.prototype.getPublicKey = function (enc, format) {\n  var key = this.keys.getPublic(format === 'compressed', true)\n  if (format === 'hybrid') {\n    if (key[key.length - 1] % 2) {\n      key[0] = 7\n    } else {\n      key[0] = 6\n    }\n  }\n  return formatReturnValue(key, enc)\n}\n\nECDH.prototype.getPrivateKey = function (enc) {\n  return formatReturnValue(this.keys.getPrivate(), enc)\n}\n\nECDH.prototype.setPublicKey = function (pub, enc) {\n  enc = enc || 'utf8'\n  if (!Buffer.isBuffer(pub)) {\n    pub = new Buffer(pub, enc)\n  }\n  this.keys._importPublic(pub)\n  return this\n}\n\nECDH.prototype.setPrivateKey = function (priv, enc) {\n  enc = enc || 'utf8'\n  if (!Buffer.isBuffer(priv)) {\n    priv = new Buffer(priv, enc)\n  }\n\n  var _priv = new BN(priv)\n  _priv = _priv.toString(16)\n  this.keys = this.curve.genKeyPair()\n  this.keys._importPrivate(_priv)\n  return this\n}\n\nfunction formatReturnValue (bn, enc, len) {\n  if (!Array.isArray(bn)) {\n    bn = bn.toArray()\n  }\n  var buf = new Buffer(bn)\n  if (len && buf.length < len) {\n    var zeros = new Buffer(len - buf.length)\n    zeros.fill(0)\n    buf = Buffer.concat([zeros, buf])\n  }\n  if (!enc) {\n    return buf\n  } else {\n    return buf.toString(enc)\n  }\n}\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$elliptic$lib$elliptic","~$shadow.js","~$module$node_modules$create_ecdh$node_modules$bn_js$lib$bn","~$module$node_modules$buffer$index"]],"~:properties",["^5",["p384","keys","curve","byteLength","setPrivateKey","generateKeys","secp256k1","p224","prime192v1","secp192r1","name","p521","p256","p192","prime256v1","secp224r1","getPublicKey","setPublicKey","computeSecret","secp521r1","getPrivateKey","secp256r1","curveType","secp384r1","ed25519"]],"~:compiled-at",1695041440869,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$create_ecdh$browser.js\",\n\"lineCount\":4,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/create-ecdh/browser.js\"],\n\"sourcesContent\":[\"shadow$provide[252] = function(global,require,module,exports) {\\nvar Buffer = require('buffer').Buffer;\\nvar elliptic = require('elliptic')\\nvar BN = require('bn.js')\\n\\nmodule.exports = function createECDH (curve) {\\n  return new ECDH(curve)\\n}\\n\\nvar aliases = {\\n  secp256k1: {\\n    name: 'secp256k1',\\n    byteLength: 32\\n  },\\n  secp224r1: {\\n    name: 'p224',\\n    byteLength: 28\\n  },\\n  prime256v1: {\\n    name: 'p256',\\n    byteLength: 32\\n  },\\n  prime192v1: {\\n    name: 'p192',\\n    byteLength: 24\\n  },\\n  ed25519: {\\n    name: 'ed25519',\\n    byteLength: 32\\n  },\\n  secp384r1: {\\n    name: 'p384',\\n    byteLength: 48\\n  },\\n  secp521r1: {\\n    name: 'p521',\\n    byteLength: 66\\n  }\\n}\\n\\naliases.p224 = aliases.secp224r1\\naliases.p256 = aliases.secp256r1 = aliases.prime256v1\\naliases.p192 = aliases.secp192r1 = aliases.prime192v1\\naliases.p384 = aliases.secp384r1\\naliases.p521 = aliases.secp521r1\\n\\nfunction ECDH (curve) {\\n  this.curveType = aliases[curve]\\n  if (!this.curveType) {\\n    this.curveType = {\\n      name: curve\\n    }\\n  }\\n  this.curve = new elliptic.ec(this.curveType.name) // eslint-disable-line new-cap\\n  this.keys = void 0\\n}\\n\\nECDH.prototype.generateKeys = function (enc, format) {\\n  this.keys = this.curve.genKeyPair()\\n  return this.getPublicKey(enc, format)\\n}\\n\\nECDH.prototype.computeSecret = function (other, inenc, enc) {\\n  inenc = inenc || 'utf8'\\n  if (!Buffer.isBuffer(other)) {\\n    other = new Buffer(other, inenc)\\n  }\\n  var otherPub = this.curve.keyFromPublic(other).getPublic()\\n  var out = otherPub.mul(this.keys.getPrivate()).getX()\\n  return formatReturnValue(out, enc, this.curveType.byteLength)\\n}\\n\\nECDH.prototype.getPublicKey = function (enc, format) {\\n  var key = this.keys.getPublic(format === 'compressed', true)\\n  if (format === 'hybrid') {\\n    if (key[key.length - 1] % 2) {\\n      key[0] = 7\\n    } else {\\n      key[0] = 6\\n    }\\n  }\\n  return formatReturnValue(key, enc)\\n}\\n\\nECDH.prototype.getPrivateKey = function (enc) {\\n  return formatReturnValue(this.keys.getPrivate(), enc)\\n}\\n\\nECDH.prototype.setPublicKey = function (pub, enc) {\\n  enc = enc || 'utf8'\\n  if (!Buffer.isBuffer(pub)) {\\n    pub = new Buffer(pub, enc)\\n  }\\n  this.keys._importPublic(pub)\\n  return this\\n}\\n\\nECDH.prototype.setPrivateKey = function (priv, enc) {\\n  enc = enc || 'utf8'\\n  if (!Buffer.isBuffer(priv)) {\\n    priv = new Buffer(priv, enc)\\n  }\\n\\n  var _priv = new BN(priv)\\n  _priv = _priv.toString(16)\\n  this.keys = this.curve.genKeyPair()\\n  this.keys._importPrivate(_priv)\\n  return this\\n}\\n\\nfunction formatReturnValue (bn, enc, len) {\\n  if (!Array.isArray(bn)) {\\n    bn = bn.toArray()\\n  }\\n  var buf = new Buffer(bn)\\n  if (len && buf.length < len) {\\n    var zeros = new Buffer(len - buf.length)\\n    zeros.fill(0)\\n    buf = Buffer.concat([zeros, buf])\\n  }\\n  if (!enc) {\\n    return buf\\n  } else {\\n    return buf.toString(enc)\\n  }\\n}\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"ECDH\",\"curve\",\"curveType\",\"aliases\",\"name\",\"elliptic\",\"ec\",\"keys\",\"formatReturnValue\",\"bn\",\"enc\",\"len\",\"Array\",\"isArray\",\"toArray\",\"buf\",\"Buffer\",\"length\",\"zeros\",\"fill\",\"concat\",\"toString\",\"BN\",\"module.exports\",\"secp256k1\",\"byteLength\",\"secp224r1\",\"prime256v1\",\"prime192v1\",\"ed25519\",\"secp384r1\",\"secp521r1\",\"p224\",\"p256\",\"secp256r1\",\"p192\",\"secp192r1\",\"p384\",\"p521\",\"prototype\",\"generateKeys\",\"ECDH.prototype.generateKeys\",\"format\",\"genKeyPair\",\"getPublicKey\",\"computeSecret\",\"ECDH.prototype.computeSecret\",\"other\",\"inenc\",\"isBuffer\",\"out\",\"keyFromPublic\",\"getPublic\",\"otherPub\",\"mul\",\"getPrivate\",\"getX\",\"ECDH.prototype.getPublicKey\",\"key\",\"getPrivateKey\",\"ECDH.prototype.getPrivateKey\",\"setPublicKey\",\"ECDH.prototype.setPublicKey\",\"pub\",\"_importPublic\",\"setPrivateKey\",\"ECDH.prototype.setPrivateKey\",\"priv\",\"_priv\",\"_importPrivate\"]\n}\n"]