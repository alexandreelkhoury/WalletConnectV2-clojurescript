shadow$provide.module$node_modules$$tanstack$react_query$build$lib$useIsFetching=function(global,require,module,exports){"use client";"use strict";Object.defineProperty(exports,"__esModule",{value:!0});global=require("module$node_modules$react$index");var queryCore=require("module$node_modules$$tanstack$query_core$build$lib$index"),useSyncExternalStore=require("module$node_modules$$tanstack$react_query$build$lib$useSyncExternalStore"),QueryClientProvider=require("module$node_modules$$tanstack$react_query$build$lib$QueryClientProvider"),
React__namespace=function(e){if(e&&e.__esModule)return e;var n=Object.create(null);e&&Object.keys(e).forEach(function(k){if("default"!==k){var d=Object.getOwnPropertyDescriptor(e,k);Object.defineProperty(n,k,d.get?d:{enumerable:!0,get:function(){return e[k]}})}});n["default"]=e;return Object.freeze(n)}(global);exports.useIsFetching=function(arg1,arg2,arg3){const [filters,options={}]=queryCore.parseFilterArgs(arg1,arg2,arg3),queryClient=QueryClientProvider.useQueryClient({context:options.context}),
queryCache=queryClient.getQueryCache();return useSyncExternalStore.useSyncExternalStore(React__namespace.useCallback(onStoreChange=>queryCache.subscribe(queryCore.notifyManager.batchCalls(onStoreChange)),[queryCache]),()=>queryClient.isFetching(filters),()=>queryClient.isFetching(filters))}}
//# sourceMappingURL=module$node_modules$$tanstack$react_query$build$lib$useIsFetching.js.map
