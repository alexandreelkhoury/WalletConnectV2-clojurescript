["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/viem/_cjs/utils/unit/parseUnits.js"],"~:js","shadow$provide.module$node_modules$viem$_cjs$utils$unit$parseUnits=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.parseUnits=void 0;exports.parseUnits=function(value,decimals){let [integer,fraction=\"0\"]=value.split(\".\");(value=integer.startsWith(\"-\"))&&(integer=integer.slice(1));fraction=fraction.replace(/(0+)$/,\"\");if(0===decimals)1===Math.round(Number(`.${fraction}`))&&(integer=`${BigInt(integer)+1n}`),fraction=\"\";else if(fraction.length>decimals){const [left,\nunit,right]=[fraction.slice(0,decimals-1),fraction.slice(decimals-1,decimals),fraction.slice(decimals)],rounded=Math.round(Number(`${unit}.${right}`));fraction=9<rounded?`${BigInt(left)+BigInt(1)}0`.padStart(left.length+1,\"0\"):`${left}${rounded}`;fraction.length>decimals&&(fraction=fraction.slice(1),integer=`${BigInt(integer)+1n}`);fraction=fraction.slice(0,decimals)}else fraction=fraction.padEnd(decimals,\"0\");return BigInt(`${value?\"-\":\"\"}${integer}${fraction}`)}}","~:source","shadow$provide[\"module$node_modules$viem$_cjs$utils$unit$parseUnits\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseUnits = void 0;\nfunction parseUnits(value, decimals) {\n    let [integer, fraction = '0'] = value.split('.');\n    const negative = integer.startsWith('-');\n    if (negative)\n        integer = integer.slice(1);\n    fraction = fraction.replace(/(0+)$/, '');\n    if (decimals === 0) {\n        if (Math.round(Number(`.${fraction}`)) === 1)\n            integer = `${BigInt(integer) + 1n}`;\n        fraction = '';\n    }\n    else if (fraction.length > decimals) {\n        const [left, unit, right] = [\n            fraction.slice(0, decimals - 1),\n            fraction.slice(decimals - 1, decimals),\n            fraction.slice(decimals),\n        ];\n        const rounded = Math.round(Number(`${unit}.${right}`));\n        if (rounded > 9)\n            fraction = `${BigInt(left) + BigInt(1)}0`.padStart(left.length + 1, '0');\n        else\n            fraction = `${left}${rounded}`;\n        if (fraction.length > decimals) {\n            fraction = fraction.slice(1);\n            integer = `${BigInt(integer) + 1n}`;\n        }\n        fraction = fraction.slice(0, decimals);\n    }\n    else {\n        fraction = fraction.padEnd(decimals, '0');\n    }\n    return BigInt(`${negative ? '-' : ''}${integer}${fraction}`);\n}\nexports.parseUnits = parseUnits;\n//# sourceMappingURL=parseUnits.js.map\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["__esModule","value","parseUnits"]],"~:compiled-at",1695111490343,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$viem$_cjs$utils$unit$parseUnits.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,mDAAA,CAAwE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAEhHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CACAH,QAAQI,CAAAA,UAAR,CAAqB,IAAK,EAkC1BJ,QAAQI,CAAAA,UAAR,CAjCAA,QAAmB,CAACD,KAAD,CAAQE,QAAR,CAAkB,CACjC,IAAI,CAACC,OAAD,CAAUC,QAAA,CAAW,GAArB,CAAA,CAA4BJ,KAAMK,CAAAA,KAAN,CAAY,GAAZ,CAEhC,EADMC,KACN,CADiBH,OAAQI,CAAAA,UAAR,CAAmB,GAAnB,CACjB,IACIJ,OADJ,CACcA,OAAQK,CAAAA,KAAR,CAAc,CAAd,CADd,CAEAJ,SAAA,CAAWA,QAASK,CAAAA,OAAT,CAAiB,OAAjB,CAA0B,EAA1B,CACX,IAAiB,CAAjB,GAAIP,QAAJ,CAC+C,CAE3C,GAFIQ,IAAKC,CAAAA,KAAL,CAAWC,MAAA,CAAQ,IAAGR,QAAH,EAAR,CAAX,CAEJ,GADID,OACJ,CADe,GAAEU,MAAA,CAAOV,OAAP,CAAF,CAAoB,EAApB,EACf,EAAAC,QAAA,CAAW,EAHf,KAKK,IAAIA,QAASU,CAAAA,MAAb,CAAsBZ,QAAtB,CAAgC,CACjC,MAAM,CAACa,IAAD;AAAOC,IAAP,CAAaC,KAAb,CAAA,CAAsB,CACxBb,QAASI,CAAAA,KAAT,CAAe,CAAf,CAAkBN,QAAlB,CAA6B,CAA7B,CADwB,CAExBE,QAASI,CAAAA,KAAT,CAAeN,QAAf,CAA0B,CAA1B,CAA6BA,QAA7B,CAFwB,CAGxBE,QAASI,CAAAA,KAAT,CAAeN,QAAf,CAHwB,CAA5B,CAKMgB,QAAUR,IAAKC,CAAAA,KAAL,CAAWC,MAAA,CAAQ,GAAEI,IAAF,IAAUC,KAAV,EAAR,CAAX,CAEZb,SAAA,CADU,CAAd,CAAIc,OAAJ,CACgB,GAAEL,MAAA,CAAOE,IAAP,CAAF,CAAiBF,MAAA,CAAO,CAAP,CAAjB,GAA8BM,CAAAA,QAA9B,CAAuCJ,IAAKD,CAAAA,MAA5C,CAAqD,CAArD,CAAwD,GAAxD,CADhB,CAGgB,GAAEC,IAAF,GAASG,OAAT,EACZd,SAASU,CAAAA,MAAb,CAAsBZ,QAAtB,GACIE,QACA,CADWA,QAASI,CAAAA,KAAT,CAAe,CAAf,CACX,CAAAL,OAAA,CAAW,GAAEU,MAAA,CAAOV,OAAP,CAAF,CAAoB,EAApB,EAFf,CAIAC,SAAA,CAAWA,QAASI,CAAAA,KAAT,CAAe,CAAf,CAAkBN,QAAlB,CAfsB,CAAhC,IAkBDE,SAAA,CAAWA,QAASgB,CAAAA,MAAT,CAAgBlB,QAAhB,CAA0B,GAA1B,CAEf,OAAOW,OAAA,CAAQ,GAAEP,KAAA,CAAW,GAAX,CAAiB,EAAnB,GAAwBH,OAAxB,GAAkCC,QAAlC,EAAR,CA/B0B,CAJ2E;\",\n\"sources\":[\"node_modules/viem/_cjs/utils/unit/parseUnits.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$viem$_cjs$utils$unit$parseUnits\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nexports.parseUnits = void 0;\\nfunction parseUnits(value, decimals) {\\n    let [integer, fraction = '0'] = value.split('.');\\n    const negative = integer.startsWith('-');\\n    if (negative)\\n        integer = integer.slice(1);\\n    fraction = fraction.replace(/(0+)$/, '');\\n    if (decimals === 0) {\\n        if (Math.round(Number(`.${fraction}`)) === 1)\\n            integer = `${BigInt(integer) + 1n}`;\\n        fraction = '';\\n    }\\n    else if (fraction.length > decimals) {\\n        const [left, unit, right] = [\\n            fraction.slice(0, decimals - 1),\\n            fraction.slice(decimals - 1, decimals),\\n            fraction.slice(decimals),\\n        ];\\n        const rounded = Math.round(Number(`${unit}.${right}`));\\n        if (rounded > 9)\\n            fraction = `${BigInt(left) + BigInt(1)}0`.padStart(left.length + 1, '0');\\n        else\\n            fraction = `${left}${rounded}`;\\n        if (fraction.length > decimals) {\\n            fraction = fraction.slice(1);\\n            integer = `${BigInt(integer) + 1n}`;\\n        }\\n        fraction = fraction.slice(0, decimals);\\n    }\\n    else {\\n        fraction = fraction.padEnd(decimals, '0');\\n    }\\n    return BigInt(`${negative ? '-' : ''}${integer}${fraction}`);\\n}\\nexports.parseUnits = parseUnits;\\n//# sourceMappingURL=parseUnits.js.map\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"parseUnits\",\"decimals\",\"integer\",\"fraction\",\"split\",\"negative\",\"startsWith\",\"slice\",\"replace\",\"Math\",\"round\",\"Number\",\"BigInt\",\"length\",\"left\",\"unit\",\"right\",\"rounded\",\"padStart\",\"padEnd\"]\n}\n"]