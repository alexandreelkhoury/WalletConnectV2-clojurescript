{
"version":3,
"file":"module$node_modules$viem$_cjs$utils$ens$avatar$parseAvatarRecord.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,gEAAA,CAAqF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAW7HC,cAAeA,kBAAiB,CAACC,MAAD,CAAS,CAAEC,WAAF,CAAeC,MAAf,CAAT,CAAmC,CACzDC,MAAAA,CAAM,GAAIC,UAAWC,CAAAA,WAAf,EAA4BH,MAA5B,CACNI,OAAAA,CAAS,MAAM,GAAIF,UAAWG,CAAAA,cAAf,EAA+BP,MAA/B,CAAuC,CAAEG,IAAAA,MAAF,CAAvC,CACrB,OAAM,CAAE,IAAKK,cAAP,CAAuBC,SAAvB,CAAkCC,SAAlC,CAAA,CAAiD,GAAIN,UAAWO,CAAAA,gBAAf,EAAiC,CAAEC,IAAKN,MAAP,CAAeL,WAAf,CAAjC,CACvD,IAAIQ,SAAJ,GACKD,cAAeK,CAAAA,QAAf,CAAwB,+BAAxB,CADL,EAEQL,cAAeM,CAAAA,UAAf,CAA0B,GAA1B,CAFR,EASI,MANMC,OAMC;AANaL,SAAA,CAEZM,IAAA,CAAKR,cAAeS,CAAAA,OAAf,CAAuB,+BAAvB,CAAwD,EAAxD,CAAL,CAFY,CAIZT,cAED,CADDU,MACC,CADSC,IAAKC,CAAAA,KAAL,CAAWL,MAAX,CACT,CAAA,GAAIX,UAAWiB,CAAAA,cAAf,EAA+B,CAAET,IAAK,GAAIR,UAAWkB,CAAAA,YAAf,EAA6BJ,MAA7B,CAAP,CAA8CjB,WAA9C,CAA/B,CAEPsB,OAAAA,CAAapB,MAAIqB,CAAAA,OACC,UAAtB,GAAIrB,MAAIsB,CAAAA,SAAR,GACIF,MADJ,CACiBA,MAAWN,CAAAA,OAAX,CAAmB,IAAnB,CAAyB,EAAzB,CAA6BS,CAAAA,QAA7B,CAAsC,EAAtC,CAA0C,GAA1C,CADjB,CAEA,OAAO,GAAItB,UAAWuB,CAAAA,oBAAf,EAAqC,CACxC1B,WADwC,CAExCW,IAAKJ,cAAeS,CAAAA,OAAf,CAAuB,aAAvB,CAAsCM,MAAtC,CAFmC,CAArC,CAlBwD,CATnEK,MAAOC,CAAAA,cAAP,CAAsB/B,OAAtB,CAA+B,YAA/B,CAA6C,CAAEgC,MAAO,CAAA,CAAT,CAA7C,CACAhC,QAAQiC,CAAAA,iBAAR,CAA4B,IAAK,EACjC,OAAM3B;AAAaR,OAAA,CAAQ,sDAAR,CAMnBE,QAAQiC,CAAAA,iBAAR,CALAA,cAAgC,CAAC/B,MAAD,CAAS,CAAEC,WAAF,CAAeC,MAAf,CAAT,CAAmC,CAC/D,MAAI,UAAW8B,CAAAA,IAAX,CAAgB9B,MAAhB,CAAJ,CACWH,iBAAA,CAAkBC,MAAlB,CAA0B,CAAEC,WAAF,CAAeC,MAAf,CAA1B,CADX,CAEO,GAAIE,UAAWiB,CAAAA,cAAf,EAA+B,CAAET,IAAKV,MAAP,CAAeD,WAAf,CAA/B,CAHwD,CAL0D;",
"sources":["node_modules/viem/_cjs/utils/ens/avatar/parseAvatarRecord.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$viem$_cjs$utils$ens$avatar$parseAvatarRecord\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseAvatarRecord = void 0;\nconst utils_js_1 = require(\"./utils.js\");\nasync function parseAvatarRecord(client, { gatewayUrls, record, }) {\n    if (/eip155:/i.test(record))\n        return parseNftAvatarUri(client, { gatewayUrls, record });\n    return (0, utils_js_1.parseAvatarUri)({ uri: record, gatewayUrls });\n}\nexports.parseAvatarRecord = parseAvatarRecord;\nasync function parseNftAvatarUri(client, { gatewayUrls, record, }) {\n    const nft = (0, utils_js_1.parseNftUri)(record);\n    const nftUri = await (0, utils_js_1.getNftTokenUri)(client, { nft });\n    const { uri: resolvedNftUri, isOnChain, isEncoded, } = (0, utils_js_1.resolveAvatarUri)({ uri: nftUri, gatewayUrls });\n    if (isOnChain &&\n        (resolvedNftUri.includes('data:application/json;base64,') ||\n            resolvedNftUri.startsWith('{'))) {\n        const encodedJson = isEncoded\n            ?\n                atob(resolvedNftUri.replace('data:application/json;base64,', ''))\n            :\n                resolvedNftUri;\n        const decoded = JSON.parse(encodedJson);\n        return (0, utils_js_1.parseAvatarUri)({ uri: (0, utils_js_1.getJsonImage)(decoded), gatewayUrls });\n    }\n    let uriTokenId = nft.tokenID;\n    if (nft.namespace === 'erc1155')\n        uriTokenId = uriTokenId.replace('0x', '').padStart(64, '0');\n    return (0, utils_js_1.getMetadataAvatarUri)({\n        gatewayUrls,\n        uri: resolvedNftUri.replace(/(?:0x)?{id}/, uriTokenId),\n    });\n}\n//# sourceMappingURL=parseAvatarRecord.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","parseNftAvatarUri","client","gatewayUrls","record","nft","utils_js_1","parseNftUri","nftUri","getNftTokenUri","resolvedNftUri","isOnChain","isEncoded","resolveAvatarUri","uri","includes","startsWith","encodedJson","atob","replace","decoded","JSON","parse","parseAvatarUri","getJsonImage","uriTokenId","tokenID","namespace","padStart","getMetadataAvatarUri","Object","defineProperty","value","parseAvatarRecord","test"]
}
