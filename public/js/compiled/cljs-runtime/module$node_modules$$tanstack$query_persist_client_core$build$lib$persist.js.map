{
"version":3,
"file":"module$node_modules$$tanstack$query_persist_client_core$build$lib$persist.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/@tanstack/query-persist-client-core/build/lib/persist.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$tanstack$query_persist_client_core$build$lib$persist\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar queryCore = require('@tanstack/query-core');\n\n/**\n * Checks if emitted event is about cache change and not about observers.\n * Useful for persist, where we only want to trigger save when cache is changed.\n */\nconst cacheableEventTypes = ['added', 'removed', 'updated'];\n\nfunction isCacheableEventType(eventType) {\n  return cacheableEventTypes.includes(eventType);\n}\n/**\n * Restores persisted data to the QueryCache\n *  - data obtained from persister.restoreClient\n *  - data is hydrated using hydrateOptions\n * If data is expired, busted, empty, or throws, it runs persister.removeClient\n */\n\n\nasync function persistQueryClientRestore({\n  queryClient,\n  persister,\n  maxAge = 1000 * 60 * 60 * 24,\n  buster = '',\n  hydrateOptions\n}) {\n  try {\n    const persistedClient = await persister.restoreClient();\n\n    if (persistedClient) {\n      if (persistedClient.timestamp) {\n        const expired = Date.now() - persistedClient.timestamp > maxAge;\n        const busted = persistedClient.buster !== buster;\n\n        if (expired || busted) {\n          persister.removeClient();\n        } else {\n          queryCore.hydrate(queryClient, persistedClient.clientState, hydrateOptions);\n        }\n      } else {\n        persister.removeClient();\n      }\n    }\n  } catch (err) {\n    if (process.env.NODE_ENV !== 'production') {\n      queryClient.getLogger().error(err);\n      queryClient.getLogger().warn('Encountered an error attempting to restore client cache from persisted location. As a precaution, the persisted cache will be discarded.');\n    }\n\n    persister.removeClient();\n  }\n}\n/**\n * Persists data from the QueryCache\n *  - data dehydrated using dehydrateOptions\n *  - data is persisted using persister.persistClient\n */\n\nasync function persistQueryClientSave({\n  queryClient,\n  persister,\n  buster = '',\n  dehydrateOptions\n}) {\n  const persistClient = {\n    buster,\n    timestamp: Date.now(),\n    clientState: queryCore.dehydrate(queryClient, dehydrateOptions)\n  };\n  await persister.persistClient(persistClient);\n}\n/**\n * Subscribe to QueryCache and MutationCache updates (for persisting)\n * @returns an unsubscribe function (to discontinue monitoring)\n */\n\nfunction persistQueryClientSubscribe(props) {\n  const unsubscribeQueryCache = props.queryClient.getQueryCache().subscribe(event => {\n    if (isCacheableEventType(event.type)) {\n      persistQueryClientSave(props);\n    }\n  });\n  const unusbscribeMutationCache = props.queryClient.getMutationCache().subscribe(event => {\n    if (isCacheableEventType(event.type)) {\n      persistQueryClientSave(props);\n    }\n  });\n  return () => {\n    unsubscribeQueryCache();\n    unusbscribeMutationCache();\n  };\n}\n/**\n * Restores persisted data to QueryCache and persists further changes.\n */\n\nfunction persistQueryClient(props) {\n  let hasUnsubscribed = false;\n  let persistQueryClientUnsubscribe;\n\n  const unsubscribe = () => {\n    hasUnsubscribed = true;\n    persistQueryClientUnsubscribe == null ? void 0 : persistQueryClientUnsubscribe();\n  }; // Attempt restore\n\n\n  const restorePromise = persistQueryClientRestore(props).then(() => {\n    if (!hasUnsubscribed) {\n      // Subscribe to changes in the query cache to trigger the save\n      persistQueryClientUnsubscribe = persistQueryClientSubscribe(props);\n    }\n  });\n  return [unsubscribe, restorePromise];\n}\n\nexports.persistQueryClient = persistQueryClient;\nexports.persistQueryClientRestore = persistQueryClientRestore;\nexports.persistQueryClientSave = persistQueryClientSave;\nexports.persistQueryClientSubscribe = persistQueryClientSubscribe;\n//# sourceMappingURL=persist.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","persistQueryClientRestore","queryClient","persister","maxAge","buster","hydrateOptions","persistedClient","restoreClient","timestamp","expired","Date","now","busted","removeClient","queryCore","hydrate","clientState","err","getLogger","error","warn","persistQueryClientSave","dehydrateOptions","persistClient","dehydrate","persistQueryClientSubscribe","props","unsubscribeQueryCache","getQueryCache","subscribe","event","cacheableEventTypes","includes","type","unusbscribeMutationCache","getMutationCache","Object","defineProperty","value","persistQueryClient","hasUnsubscribed","persistQueryClientUnsubscribe","unsubscribe","then","restorePromise"]
}
