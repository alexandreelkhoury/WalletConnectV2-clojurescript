shadow$provide.module$node_modules$viem$_cjs$utils$typedData=function(global,require,module,exports){function getTypesForEIP712Domain({domain}){return["string"===typeof domain?.name&&{name:"name",type:"string"},domain?.version&&{name:"version",type:"string"},"number"===typeof domain?.chainId&&{name:"chainId",type:"uint256"},domain?.verifyingContract&&{name:"verifyingContract",type:"address"},domain?.salt&&{name:"salt",type:"bytes32"}].filter(Boolean)}Object.defineProperty(exports,"__esModule",{value:!0});
exports.domainSeparator=exports.getTypesForEIP712Domain=exports.validateTypedData=void 0;const abi_js_1=require("module$node_modules$viem$_cjs$errors$abi"),address_js_1=require("module$node_modules$viem$_cjs$errors$address"),isAddress_js_1=require("module$node_modules$viem$_cjs$utils$address$isAddress"),size_js_1=require("module$node_modules$viem$_cjs$utils$data$size"),toHex_js_1=require("module$node_modules$viem$_cjs$utils$encoding$toHex"),regex_js_1=require("module$node_modules$viem$_cjs$utils$regex"),
hashTypedData_js_1=require("module$node_modules$viem$_cjs$utils$signature$hashTypedData");exports.validateTypedData=function({domain,message,primaryType,types:types_}){const validateData=(struct,value_)=>{for(const param of struct){const {name,type:type_}=param;var type=type_;struct=value_[name];var integerMatch=type.match(regex_js_1.integerRegex);if(integerMatch&&("number"===typeof struct||"bigint"===typeof struct)){const [,base,size_]=integerMatch;(0,toHex_js_1.numberToHex)(struct,{signed:"int"===
base,size:parseInt(size_)/8})}if("address"===type&&"string"===typeof struct&&!(0,isAddress_js_1.isAddress)(struct))throw new address_js_1.InvalidAddressError({address:struct});if(integerMatch=type.match(regex_js_1.bytesRegex))if([,integerMatch]=integerMatch,integerMatch&&(0,size_js_1.size)(struct)!==parseInt(integerMatch))throw new abi_js_1.BytesSizeMismatchError({expectedSize:parseInt(integerMatch),givenSize:(0,size_js_1.size)(struct)});(type=types_[type])&&validateData(type,struct)}};types_.EIP712Domain&&
domain&&validateData(types_.EIP712Domain,domain);"EIP712Domain"!==primaryType&&validateData(types_[primaryType],message)};exports.getTypesForEIP712Domain=getTypesForEIP712Domain;exports.domainSeparator=function({domain}){return(0,hashTypedData_js_1.hashDomain)({domain,types:{EIP712Domain:getTypesForEIP712Domain({domain})}})}}
//# sourceMappingURL=module$node_modules$viem$_cjs$utils$typedData.js.map
