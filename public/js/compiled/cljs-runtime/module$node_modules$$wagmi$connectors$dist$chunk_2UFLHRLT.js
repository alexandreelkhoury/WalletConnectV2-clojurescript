shadow$provide.module$node_modules$$wagmi$connectors$dist$chunk_2UFLHRLT=function(global,require,module,exports){function getInjectedName(ethereum){if(!ethereum)return"Injected";var getName=provider=>{if(provider.isApexWallet)return"Apex Wallet";if(provider.isAvalanche)return"Core Wallet";if(provider.isBackpack)return"Backpack";if(provider.isBifrost)return"Bifrost Wallet";if(provider.isBitKeep)return"BitKeep";if(provider.isBitski)return"Bitski";if(provider.isBlockWallet)return"BlockWallet";if(provider.isBraveWallet)return"Brave Wallet";
if(provider.isCoin98)return"Coin98 Wallet";if(provider.isCoinbaseWallet)return"Coinbase Wallet";if(provider.isDawn)return"Dawn Wallet";if(provider.isDefiant)return"Defiant";if(provider.isDesig)return"Desig Wallet";if(provider.isEnkrypt)return"Enkrypt";if(provider.isExodus)return"Exodus";if(provider.isFordefi)return"Fordefi";if(provider.isFrame)return"Frame";if(provider.isFrontier)return"Frontier Wallet";if(provider.isGamestop)return"GameStop Wallet";if(provider.isHaqqWallet)return"HAQQ Wallet";if(provider.isHyperPay)return"HyperPay Wallet";
if(provider.isImToken)return"ImToken";if(provider.isHaloWallet)return"Halo Wallet";if(provider.isKuCoinWallet)return"KuCoin Wallet";if(provider.isMathWallet)return"MathWallet";if(provider.isNovaWallet)return"Nova Wallet";if(provider.isOkxWallet||provider.isOKExWallet)return"OKX Wallet";if(provider.isOneInchIOSWallet||provider.isOneInchAndroidWallet)return"1inch Wallet";if(provider.isOpera)return"Opera";if(provider.isPhantom)return"Phantom";if(provider.isPortal)return"Ripio Portal";if(provider.isRabby)return"Rabby Wallet";
if(provider.isRainbow)return"Rainbow";if(provider.isStatus)return"Status";if(provider.isSubWallet)return"SubWallet";if(provider.isTalisman)return"Talisman";if(provider.isTally)return"Taho";if(provider.isTokenPocket)return"TokenPocket";if(provider.isTokenary)return"Tokenary";if(provider.isTrust||provider.isTrustWallet)return"Trust Wallet";if(provider.isTTWallet)return"TTWallet";if(provider.isXDEFI)return"XDEFI Wallet";if(provider.isZeal)return"Zeal";if(provider.isZerion)return"Zerion";if(provider.isMetaMask)return"MetaMask"};
if(ethereum.providers?.length){const nameSet=new Set;let unknownCount=1;for(const provider of ethereum.providers)ethereum=getName(provider),ethereum||(ethereum=`Unknown Wallet #${unknownCount}`,unknownCount+=1),nameSet.add(ethereum);getName=[...nameSet];return getName.length?getName:getName[0]??"Injected"}return getName(ethereum)??"Injected"}Object.defineProperties(exports,{__esModule:{enumerable:!0,value:!0},InjectedConnector:{enumerable:!0,get:function(){return InjectedConnector}}});var require$_DOT__SLASH_chunk_UGBGYVBH_DOT_js=
require("module$node_modules$$wagmi$connectors$dist$chunk_UGBGYVBH"),require$_DOT__SLASH_chunk_OQILYQDO_DOT_js=require("module$node_modules$$wagmi$connectors$dist$chunk_OQILYQDO"),require$_DOT__SLASH_chunk_W65LBPLT_DOT_js=require("module$node_modules$$wagmi$connectors$dist$chunk_W65LBPLT"),require$viem=require("module$node_modules$viem$_cjs$index"),InjectedConnector=class extends require$_DOT__SLASH_chunk_W65LBPLT_DOT_js.Connector{constructor({chains,options:options_}={}){options_={shimDisconnect:!0,
getProvider(){if("undefined"!==typeof window){var ethereum=window.ethereum;return ethereum?.providers?ethereum.providers[0]:ethereum}},...options_};super({chains,options:options_});this.id="injected";(0,require$_DOT__SLASH_chunk_W65LBPLT_DOT_js.__privateAdd)(this,_provider,void 0);this.shimDisconnectKey=`${this.id}.shimDisconnect`;this.onAccountsChanged=accounts=>{0===accounts.length?this.emit("disconnect"):this.emit("change",{account:(0,require$viem.getAddress)(accounts[0])})};this.onChainChanged=
chainId=>{chainId=(0,require$_DOT__SLASH_chunk_OQILYQDO_DOT_js.normalizeChainId)(chainId);const unsupported=this.isChainUnsupported(chainId);this.emit("change",{chain:{id:chainId,unsupported}})};this.onDisconnect=async error=>{1013===error.code&&await this.getProvider()&&await this.getAccount()||(this.emit("disconnect"),this.options.shimDisconnect&&this.storage?.removeItem(this.shimDisconnectKey))};chains=options_.getProvider();if("string"===typeof options_.name)this.name=options_.name;else if(chains){const detectedName=
getInjectedName(chains);this.name=options_.name?options_.name(detectedName):"string"===typeof detectedName?detectedName:detectedName[0]}else this.name="Injected";this.ready=!!chains}async connect({chainId}={}){try{const provider=await this.getProvider();if(!provider)throw new require$_DOT__SLASH_chunk_UGBGYVBH_DOT_js.ConnectorNotFoundError;provider.on&&(provider.on("accountsChanged",this.onAccountsChanged),provider.on("chainChanged",this.onChainChanged),provider.on("disconnect",this.onDisconnect));
this.emit("message",{type:"connecting"});const accounts=await provider.request({method:"eth_requestAccounts"}),account=(0,require$viem.getAddress)(accounts[0]);let id=await this.getChainId(),unsupported=this.isChainUnsupported(id);chainId&&id!==chainId&&(id=(await this.switchChain(chainId)).id,unsupported=this.isChainUnsupported(id));this.options.shimDisconnect&&this.storage?.setItem(this.shimDisconnectKey,!0);return{account,chain:{id,unsupported}}}catch(error){if(this.isUserRejectedRequestError(error))throw new require$viem.UserRejectedRequestError(error);
if(-32002===error.code)throw new require$viem.ResourceUnavailableRpcError(error);throw error;}}async disconnect(){const provider=await this.getProvider();provider?.removeListener&&(provider.removeListener("accountsChanged",this.onAccountsChanged),provider.removeListener("chainChanged",this.onChainChanged),provider.removeListener("disconnect",this.onDisconnect),this.options.shimDisconnect&&this.storage?.removeItem(this.shimDisconnectKey))}async getAccount(){var provider=await this.getProvider();if(!provider)throw new require$_DOT__SLASH_chunk_UGBGYVBH_DOT_js.ConnectorNotFoundError;
provider=await provider.request({method:"eth_accounts"});return(0,require$viem.getAddress)(provider[0])}async getChainId(){const provider=await this.getProvider();if(!provider)throw new require$_DOT__SLASH_chunk_UGBGYVBH_DOT_js.ConnectorNotFoundError;return provider.request({method:"eth_chainId"}).then(require$_DOT__SLASH_chunk_OQILYQDO_DOT_js.normalizeChainId)}async getProvider(){const provider=this.options.getProvider();provider&&(0,require$_DOT__SLASH_chunk_W65LBPLT_DOT_js.__privateSet)(this,_provider,
provider);return(0,require$_DOT__SLASH_chunk_W65LBPLT_DOT_js.__privateGet)(this,_provider)}async getWalletClient({chainId}={}){const [provider,account]=await Promise.all([this.getProvider(),this.getAccount()]),chain=this.chains.find(x=>x.id===chainId);if(!provider)throw Error("provider is required.");return(0,require$viem.createWalletClient)({account,chain,transport:(0,require$viem.custom)(provider)})}async isAuthorized(){try{if(this.options.shimDisconnect&&!this.storage?.getItem(this.shimDisconnectKey))return!1;
if(!await this.getProvider())throw new require$_DOT__SLASH_chunk_UGBGYVBH_DOT_js.ConnectorNotFoundError;return!!await this.getAccount()}catch{return!1}}async switchChain(chainId){const provider=await this.getProvider();if(!provider)throw new require$_DOT__SLASH_chunk_UGBGYVBH_DOT_js.ConnectorNotFoundError;const id=(0,require$viem.numberToHex)(chainId);try{return await Promise.all([provider.request({method:"wallet_switchEthereumChain",params:[{chainId:id}]}),new Promise(res=>this.on("change",({chain})=>
{chain?.id===chainId&&res()}))]),this.chains.find(x=>x.id===chainId)??{id:chainId,name:`Chain ${id}`,network:`${id}`,nativeCurrency:{name:"Ether",decimals:18,symbol:"ETH"},rpcUrls:{default:{http:[""]},public:{http:[""]}}}}catch(error){const chain=this.chains.find(x=>x.id===chainId);if(!chain)throw new require$_DOT__SLASH_chunk_UGBGYVBH_DOT_js.ChainNotConfiguredForConnectorError({chainId,connectorId:this.id});if(4902===error.code||4902===error?.data?.originalError?.code)try{await provider.request({method:"wallet_addEthereumChain",
params:[{chainId:id,chainName:chain.name,nativeCurrency:chain.nativeCurrency,rpcUrls:[chain.rpcUrls.public?.http[0]??""],blockExplorerUrls:this.getBlockExplorerUrls(chain)}]});if(await this.getChainId()!==chainId)throw new require$viem.UserRejectedRequestError(Error("User rejected switch after adding network."));return chain}catch(error2){throw new require$viem.UserRejectedRequestError(error2);}if(this.isUserRejectedRequestError(error))throw new require$viem.UserRejectedRequestError(error);throw new require$viem.SwitchChainError(error);
}}async watchAsset({address,decimals=18,image,symbol}){const provider=await this.getProvider();if(!provider)throw new require$_DOT__SLASH_chunk_UGBGYVBH_DOT_js.ConnectorNotFoundError;return provider.request({method:"wallet_watchAsset",params:{type:"ERC20",options:{address,decimals,image,symbol}}})}isUserRejectedRequestError(error){return 4001===error.code}};var _provider=new WeakMap}
//# sourceMappingURL=module$node_modules$$wagmi$connectors$dist$chunk_2UFLHRLT.js.map
