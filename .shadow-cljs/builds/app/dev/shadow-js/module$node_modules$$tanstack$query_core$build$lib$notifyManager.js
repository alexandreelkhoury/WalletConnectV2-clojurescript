["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@tanstack/query-core/build/lib/notifyManager.js"],"~:js","shadow$provide.module$node_modules$$tanstack$query_core$build$lib$notifyManager=function(global,require,module,exports){function createNotifyManager(){let queue=[],transactions=0,notifyFn=callback=>{callback()},batchNotifyFn=callback=>{callback()};const schedule=callback=>{transactions?queue.push(callback):utils.scheduleMicrotask(()=>{notifyFn(callback)})},flush=()=>{const originalQueue=queue;queue=[];originalQueue.length&&utils.scheduleMicrotask(()=>{batchNotifyFn(()=>{originalQueue.forEach(callback=>\n{notifyFn(callback)})})})};return{batch:callback=>{let result;transactions++;try{result=callback()}finally{transactions--,transactions||flush()}return result},batchCalls:callback=>(...args)=>{schedule(()=>{callback(...args)})},schedule,setNotifyFunction:fn=>{notifyFn=fn},setBatchNotifyFunction:fn=>{batchNotifyFn=fn}}}Object.defineProperty(exports,\"__esModule\",{value:!0});var utils=require(\"module$node_modules$$tanstack$query_core$build$lib$utils\");global=createNotifyManager();exports.createNotifyManager=\ncreateNotifyManager;exports.notifyManager=global}","~:source","shadow$provide[\"module$node_modules$$tanstack$query_core$build$lib$notifyManager\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar utils = require('./utils.js');\n\nfunction createNotifyManager() {\n  let queue = [];\n  let transactions = 0;\n\n  let notifyFn = callback => {\n    callback();\n  };\n\n  let batchNotifyFn = callback => {\n    callback();\n  };\n\n  const batch = callback => {\n    let result;\n    transactions++;\n\n    try {\n      result = callback();\n    } finally {\n      transactions--;\n\n      if (!transactions) {\n        flush();\n      }\n    }\n\n    return result;\n  };\n\n  const schedule = callback => {\n    if (transactions) {\n      queue.push(callback);\n    } else {\n      utils.scheduleMicrotask(() => {\n        notifyFn(callback);\n      });\n    }\n  };\n  /**\n   * All calls to the wrapped function will be batched.\n   */\n\n\n  const batchCalls = callback => {\n    return (...args) => {\n      schedule(() => {\n        callback(...args);\n      });\n    };\n  };\n\n  const flush = () => {\n    const originalQueue = queue;\n    queue = [];\n\n    if (originalQueue.length) {\n      utils.scheduleMicrotask(() => {\n        batchNotifyFn(() => {\n          originalQueue.forEach(callback => {\n            notifyFn(callback);\n          });\n        });\n      });\n    }\n  };\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */\n\n\n  const setNotifyFunction = fn => {\n    notifyFn = fn;\n  };\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */\n\n\n  const setBatchNotifyFunction = fn => {\n    batchNotifyFn = fn;\n  };\n\n  return {\n    batch,\n    batchCalls,\n    schedule,\n    setNotifyFunction,\n    setBatchNotifyFunction\n  };\n} // SINGLETON\n\nconst notifyManager = createNotifyManager();\n\nexports.createNotifyManager = createNotifyManager;\nexports.notifyManager = notifyManager;\n//# sourceMappingURL=notifyManager.js.map\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$$tanstack$query_core$build$lib$utils"]],"~:properties",["^5",["__esModule","setNotifyFunction","batch","schedule","value","batchCalls","setBatchNotifyFunction","createNotifyManager","notifyManager"]],"~:compiled-at",1695111489921,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$tanstack$query_core$build$lib$notifyManager.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAA,gEAAA,CAAqF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO7HC,QAASA,oBAAmB,EAAG,CAC7B,IAAIC,MAAQ,EAAZ,CACIC,aAAe,CADnB,CAGIC,SAAWC,QAAAD,EAAY,CACzBC,QAAA,EADyB,CAH3B,CAOIC,cAAgBD,QAAAC,EAAY,CAC9BD,QAAA,EAD8B,CAqBhC,OAAME,SAAWF,QAAAE,EAAY,CACvBJ,YAAJ,CACED,KAAMM,CAAAA,IAAN,CAAWH,QAAX,CADF,CAGEI,KAAMC,CAAAA,iBAAN,CAAwB,EAAA,EAAM,CAC5BN,QAAA,CAASC,QAAT,CAD4B,CAA9B,CAJyB,CAA7B,CAsBMM,MAAQ,EAAAA,EAAM,CAClB,MAAMC,cAAgBV,KACtBA,MAAA,CAAQ,EAEJU,cAAcC,CAAAA,MAAlB,EACEJ,KAAMC,CAAAA,iBAAN,CAAwB,EAAA,EAAM,CAC5BJ,aAAA,CAAc,EAAA,EAAM,CAClBM,aAAcE,CAAAA,OAAd,CAAsBT,QAAA;AAAY,CAChCD,QAAA,CAASC,QAAT,CADgC,CAAlC,CADkB,CAApB,CAD4B,CAA9B,CALgB,CAiCpB,OAAO,CACLU,MAzEYV,QAAAU,EAAY,CACxB,IAAIC,MACJb,aAAA,EAEA,IAAI,CACFa,MAAA,CAASX,QAAA,EADP,CAAJ,OAEU,CACRF,YAAA,EAEA,CAAKA,YAAL,EACEQ,KAAA,EAJM,CAQV,MAAOK,OAdiB,CAwEnB,CAELC,WA3CiBZ,QAAAY,EACV,CAAC,GAAGC,IAAJ,CAAA,EAAa,CAClBX,QAAA,CAAS,EAAA,EAAM,CACbF,QAAA,CAAS,GAAGa,IAAZ,CADa,CAAf,CADkB,CAwCf,CAGLX,QAHK,CAILY,kBAjBwBC,EAAAD,EAAM,CAC9Bf,QAAA,CAAWgB,EADmB,CAazB,CAKLC,uBAT6BD,EAAAC,EAAM,CACnCf,aAAA,CAAgBc,EADmB,CAI9B,CApFsB,CAJ/BE,MAAOC,CAAAA,cAAP,CAAsBvB,OAAtB,CAA+B,YAA/B,CAA6C,CAAEwB,MAAO,CAAA,CAAT,CAA7C,CAEA,KAAIf,MAAQX,OAAA,CAAQ,0DAAR,CA+FN2B,OAAAA,CAAgBxB,mBAAA,EAEtBD,QAAQC,CAAAA,mBAAR;AAA8BA,mBAC9BD,QAAQyB,CAAAA,aAAR,CAAwBA,MAvGqG;\",\n\"sources\":[\"node_modules/@tanstack/query-core/build/lib/notifyManager.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$tanstack$query_core$build$lib$notifyManager\\\"] = function(global,require,module,exports) {\\n'use strict';\\n\\nObject.defineProperty(exports, '__esModule', { value: true });\\n\\nvar utils = require('./utils.js');\\n\\nfunction createNotifyManager() {\\n  let queue = [];\\n  let transactions = 0;\\n\\n  let notifyFn = callback => {\\n    callback();\\n  };\\n\\n  let batchNotifyFn = callback => {\\n    callback();\\n  };\\n\\n  const batch = callback => {\\n    let result;\\n    transactions++;\\n\\n    try {\\n      result = callback();\\n    } finally {\\n      transactions--;\\n\\n      if (!transactions) {\\n        flush();\\n      }\\n    }\\n\\n    return result;\\n  };\\n\\n  const schedule = callback => {\\n    if (transactions) {\\n      queue.push(callback);\\n    } else {\\n      utils.scheduleMicrotask(() => {\\n        notifyFn(callback);\\n      });\\n    }\\n  };\\n  /**\\n   * All calls to the wrapped function will be batched.\\n   */\\n\\n\\n  const batchCalls = callback => {\\n    return (...args) => {\\n      schedule(() => {\\n        callback(...args);\\n      });\\n    };\\n  };\\n\\n  const flush = () => {\\n    const originalQueue = queue;\\n    queue = [];\\n\\n    if (originalQueue.length) {\\n      utils.scheduleMicrotask(() => {\\n        batchNotifyFn(() => {\\n          originalQueue.forEach(callback => {\\n            notifyFn(callback);\\n          });\\n        });\\n      });\\n    }\\n  };\\n  /**\\n   * Use this method to set a custom notify function.\\n   * This can be used to for example wrap notifications with `React.act` while running tests.\\n   */\\n\\n\\n  const setNotifyFunction = fn => {\\n    notifyFn = fn;\\n  };\\n  /**\\n   * Use this method to set a custom function to batch notifications together into a single tick.\\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\\n   */\\n\\n\\n  const setBatchNotifyFunction = fn => {\\n    batchNotifyFn = fn;\\n  };\\n\\n  return {\\n    batch,\\n    batchCalls,\\n    schedule,\\n    setNotifyFunction,\\n    setBatchNotifyFunction\\n  };\\n} // SINGLETON\\n\\nconst notifyManager = createNotifyManager();\\n\\nexports.createNotifyManager = createNotifyManager;\\nexports.notifyManager = notifyManager;\\n//# sourceMappingURL=notifyManager.js.map\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"createNotifyManager\",\"queue\",\"transactions\",\"notifyFn\",\"callback\",\"batchNotifyFn\",\"schedule\",\"push\",\"utils\",\"scheduleMicrotask\",\"flush\",\"originalQueue\",\"length\",\"forEach\",\"batch\",\"result\",\"batchCalls\",\"args\",\"setNotifyFunction\",\"fn\",\"setBatchNotifyFunction\",\"Object\",\"defineProperty\",\"value\",\"notifyManager\"]\n}\n"]