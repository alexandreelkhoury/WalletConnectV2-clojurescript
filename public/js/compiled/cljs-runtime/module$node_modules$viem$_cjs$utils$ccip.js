shadow$provide.module$node_modules$viem$_cjs$utils$ccip=function(global,require,module,exports){async function ccipFetch({data,sender,urls}){let error=Error("An unknown error occurred.");for(let i=0;i<urls.length;i++){const url=urls[i],method=url.includes("{sender}")||url.includes("{data}")?"GET":"POST",body="POST"===method?{data,sender}:void 0;try{const response=await fetch(url.replace("{sender}",sender).replace("{data}",data),{body:JSON.stringify(body),method});let result;result=response.headers.get("Content-Type")?.startsWith("application/json")?
(await response.json()).data:await response.text();if(response.ok){if((0,isHex_js_1.isHex)(result))return result;error=new ccip_js_1.OffchainLookupResponseMalformedError({result,url})}else error=new request_js_1.HttpRequestError({body,details:(0,stringify_js_1.stringify)(result.error)||response.statusText,headers:response.headers,status:response.status,url})}catch(err){error=new request_js_1.HttpRequestError({body,details:err.message,url})}}throw error;}Object.defineProperty(exports,"__esModule",
{value:!0});exports.ccipFetch=exports.offchainLookup=exports.offchainLookupAbiItem=exports.offchainLookupSignature=void 0;const call_js_1=require("module$node_modules$viem$_cjs$actions$public$call"),ccip_js_1=require("module$node_modules$viem$_cjs$errors$ccip"),request_js_1=require("module$node_modules$viem$_cjs$errors$request"),decodeErrorResult_js_1=require("module$node_modules$viem$_cjs$utils$abi$decodeErrorResult"),encodeAbiParameters_js_1=require("module$node_modules$viem$_cjs$utils$abi$encodeAbiParameters"),
isAddressEqual_js_1=require("module$node_modules$viem$_cjs$utils$address$isAddressEqual"),concat_js_1=require("module$node_modules$viem$_cjs$utils$data$concat"),isHex_js_1=require("module$node_modules$viem$_cjs$utils$data$isHex"),stringify_js_1=require("module$node_modules$viem$_cjs$utils$stringify");exports.offchainLookupSignature="0x556f1830";exports.offchainLookupAbiItem={name:"OffchainLookup",type:"error",inputs:[{name:"sender",type:"address"},{name:"urls",type:"string[]"},{name:"callData",type:"bytes"},
{name:"callbackFunction",type:"bytes4"},{name:"extraData",type:"bytes"}]};exports.offchainLookup=async function(client,{blockNumber,blockTag,data,to}){const {args}=(0,decodeErrorResult_js_1.decodeErrorResult)({data,abi:[exports.offchainLookupAbiItem]}),[sender,urls,callData,callbackSelector,extraData]=args;try{if(!(0,isAddressEqual_js_1.isAddressEqual)(to,sender))throw new ccip_js_1.OffchainLookupSenderMismatchError({sender,to});const result=await ccipFetch({data:callData,sender,urls}),{data:data_}=
await (0,call_js_1.call)(client,{blockNumber,blockTag,data:(0,concat_js_1.concat)([callbackSelector,(0,encodeAbiParameters_js_1.encodeAbiParameters)([{type:"bytes"},{type:"bytes"}],[result,extraData])]),to});return data_}catch(err){throw new ccip_js_1.OffchainLookupError({callbackSelector,cause:err,data,extraData,sender,urls});}};exports.ccipFetch=ccipFetch}
//# sourceMappingURL=module$node_modules$viem$_cjs$utils$ccip.js.map
