["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/hash-base/index.js"],"~:js","shadow$provide[131]=function(S,A,V,q){function F(y){r.call(this);this._block=G.allocUnsafe(y);this._blockSize=y;this._blockOffset=0;this._length=[0,0,0,0];this._finalized=!1}var G=A(111).Buffer,r=A(130).Transform;A(76)(F,r);F.prototype._transform=function(y,e,u){var p=null;try{this.update(y,e)}catch(n){p=n}u(p)};F.prototype._flush=function(y){var e=null;try{this.push(this.digest())}catch(u){e=u}y(e)};F.prototype.update=function(y,e){var u=y;if(!G.isBuffer(u)&&\"string\"!==typeof u)throw new TypeError(\"Data must be a string or a buffer\");\nif(this._finalized)throw Error(\"Digest already called\");G.isBuffer(y)||(y=G.from(y,e));e=this._block;for(u=0;this._blockOffset+y.length-u>=this._blockSize;){for(var p=this._blockOffset;p<this._blockSize;)e[p++]=y[u++];this._update();this._blockOffset=0}for(;u<y.length;)e[this._blockOffset++]=y[u++];e=0;for(y=8*y.length;0<y;++e)this._length[e]+=y,y=this._length[e]/4294967296|0,0<y&&(this._length[e]-=4294967296*y);return this};F.prototype._update=function(){throw Error(\"_update is not implemented\");\n};F.prototype.digest=function(y){if(this._finalized)throw Error(\"Digest already called\");this._finalized=!0;var e=this._digest();void 0!==y&&(e=e.toString(y));this._block.fill(0);for(y=this._blockOffset=0;4>y;++y)this._length[y]=0;return e};F.prototype._digest=function(){throw Error(\"_digest is not implemented\");};V.exports=F}","~:source","shadow$provide[131] = function(global,require,module,exports) {\n'use strict'\nvar Buffer = require('safe-buffer').Buffer\nvar Transform = require('readable-stream').Transform\nvar inherits = require('inherits')\n\nfunction throwIfNotStringOrBuffer (val, prefix) {\n  if (!Buffer.isBuffer(val) && typeof val !== 'string') {\n    throw new TypeError(prefix + ' must be a string or a buffer')\n  }\n}\n\nfunction HashBase (blockSize) {\n  Transform.call(this)\n\n  this._block = Buffer.allocUnsafe(blockSize)\n  this._blockSize = blockSize\n  this._blockOffset = 0\n  this._length = [0, 0, 0, 0]\n\n  this._finalized = false\n}\n\ninherits(HashBase, Transform)\n\nHashBase.prototype._transform = function (chunk, encoding, callback) {\n  var error = null\n  try {\n    this.update(chunk, encoding)\n  } catch (err) {\n    error = err\n  }\n\n  callback(error)\n}\n\nHashBase.prototype._flush = function (callback) {\n  var error = null\n  try {\n    this.push(this.digest())\n  } catch (err) {\n    error = err\n  }\n\n  callback(error)\n}\n\nHashBase.prototype.update = function (data, encoding) {\n  throwIfNotStringOrBuffer(data, 'Data')\n  if (this._finalized) throw new Error('Digest already called')\n  if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)\n\n  // consume data\n  var block = this._block\n  var offset = 0\n  while (this._blockOffset + data.length - offset >= this._blockSize) {\n    for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++]\n    this._update()\n    this._blockOffset = 0\n  }\n  while (offset < data.length) block[this._blockOffset++] = data[offset++]\n\n  // update length\n  for (var j = 0, carry = data.length * 8; carry > 0; ++j) {\n    this._length[j] += carry\n    carry = (this._length[j] / 0x0100000000) | 0\n    if (carry > 0) this._length[j] -= 0x0100000000 * carry\n  }\n\n  return this\n}\n\nHashBase.prototype._update = function () {\n  throw new Error('_update is not implemented')\n}\n\nHashBase.prototype.digest = function (encoding) {\n  if (this._finalized) throw new Error('Digest already called')\n  this._finalized = true\n\n  var digest = this._digest()\n  if (encoding !== undefined) digest = digest.toString(encoding)\n\n  // reset state\n  this._block.fill(0)\n  this._blockOffset = 0\n  for (var i = 0; i < 4; ++i) this._length[i] = 0\n\n  return digest\n}\n\nHashBase.prototype._digest = function () {\n  throw new Error('_digest is not implemented')\n}\n\nmodule.exports = HashBase\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$inherits$inherits_browser","~$module$node_modules$safe_buffer$index","~$module$node_modules$hash_base$node_modules$readable_stream$readable_browser"]],"~:properties",["^5",["_digest","update","_transform","digest","_flush","_length","_blockSize","_blockOffset","_update","_finalized","_block"]],"~:compiled-at",1695041440801,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$hash_base$index.js\",\n\"lineCount\":3,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/hash-base/index.js\"],\n\"sourcesContent\":[\"shadow$provide[131] = function(global,require,module,exports) {\\n'use strict'\\nvar Buffer = require('safe-buffer').Buffer\\nvar Transform = require('readable-stream').Transform\\nvar inherits = require('inherits')\\n\\nfunction throwIfNotStringOrBuffer (val, prefix) {\\n  if (!Buffer.isBuffer(val) && typeof val !== 'string') {\\n    throw new TypeError(prefix + ' must be a string or a buffer')\\n  }\\n}\\n\\nfunction HashBase (blockSize) {\\n  Transform.call(this)\\n\\n  this._block = Buffer.allocUnsafe(blockSize)\\n  this._blockSize = blockSize\\n  this._blockOffset = 0\\n  this._length = [0, 0, 0, 0]\\n\\n  this._finalized = false\\n}\\n\\ninherits(HashBase, Transform)\\n\\nHashBase.prototype._transform = function (chunk, encoding, callback) {\\n  var error = null\\n  try {\\n    this.update(chunk, encoding)\\n  } catch (err) {\\n    error = err\\n  }\\n\\n  callback(error)\\n}\\n\\nHashBase.prototype._flush = function (callback) {\\n  var error = null\\n  try {\\n    this.push(this.digest())\\n  } catch (err) {\\n    error = err\\n  }\\n\\n  callback(error)\\n}\\n\\nHashBase.prototype.update = function (data, encoding) {\\n  throwIfNotStringOrBuffer(data, 'Data')\\n  if (this._finalized) throw new Error('Digest already called')\\n  if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)\\n\\n  // consume data\\n  var block = this._block\\n  var offset = 0\\n  while (this._blockOffset + data.length - offset >= this._blockSize) {\\n    for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++]\\n    this._update()\\n    this._blockOffset = 0\\n  }\\n  while (offset < data.length) block[this._blockOffset++] = data[offset++]\\n\\n  // update length\\n  for (var j = 0, carry = data.length * 8; carry > 0; ++j) {\\n    this._length[j] += carry\\n    carry = (this._length[j] / 0x0100000000) | 0\\n    if (carry > 0) this._length[j] -= 0x0100000000 * carry\\n  }\\n\\n  return this\\n}\\n\\nHashBase.prototype._update = function () {\\n  throw new Error('_update is not implemented')\\n}\\n\\nHashBase.prototype.digest = function (encoding) {\\n  if (this._finalized) throw new Error('Digest already called')\\n  this._finalized = true\\n\\n  var digest = this._digest()\\n  if (encoding !== undefined) digest = digest.toString(encoding)\\n\\n  // reset state\\n  this._block.fill(0)\\n  this._blockOffset = 0\\n  for (var i = 0; i < 4; ++i) this._length[i] = 0\\n\\n  return digest\\n}\\n\\nHashBase.prototype._digest = function () {\\n  throw new Error('_digest is not implemented')\\n}\\n\\nmodule.exports = HashBase\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"HashBase\",\"blockSize\",\"Transform\",\"call\",\"_block\",\"Buffer\",\"allocUnsafe\",\"_blockSize\",\"_blockOffset\",\"_length\",\"_finalized\",\"inherits\",\"prototype\",\"_transform\",\"HashBase.prototype._transform\",\"chunk\",\"encoding\",\"callback\",\"error\",\"update\",\"err\",\"_flush\",\"HashBase.prototype._flush\",\"push\",\"digest\",\"HashBase.prototype.update\",\"data\",\"isBuffer\",\"val\",\"TypeError\",\"Error\",\"from\",\"block\",\"offset\",\"length\",\"i\",\"_update\",\"j\",\"carry\",\"HashBase.prototype._update\",\"HashBase.prototype.digest\",\"_digest\",\"undefined\",\"toString\",\"fill\",\"HashBase.prototype._digest\"]\n}\n"]