["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/parse-asn1/fixProc.js"],"~:js","shadow$provide[245]=function(S,A,V,q){var F=/Proc-Type: 4,ENCRYPTED[\\n\\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\\n\\r]+([0-9A-z\\n\\r+/=]+)[\\n\\r]+/m,G=/^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m,r=/^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\\n\\r+/=]+)-----END \\1-----$/m,y=A(197),e=A(200),u=A(111).Buffer;V.exports=function(p,n){p=p.toString();var l=p.match(F);if(l){var h=\"aes\"+l[1],k=u.from(l[2],\"hex\");var t=u.from(l[3].replace(/[\\r\\n]/g,\"\"),\"base64\");l=y(n,k.slice(0,8),parseInt(l[1],\n10)).key;n=[];h=e.createDecipheriv(h,l,k);n.push(h.update(t));n.push(h.final());t=u.concat(n)}else t=p.match(r),t=u.from(t[2].replace(/[\\r\\n]/g,\"\"),\"base64\");return{tag:p.match(G)[1],data:t}}}","~:source","shadow$provide[245] = function(global,require,module,exports) {\n// adapted from https://github.com/apatil/pemstrip\nvar findProc = /Proc-Type: 4,ENCRYPTED[\\n\\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\\n\\r]+([0-9A-z\\n\\r+/=]+)[\\n\\r]+/m\nvar startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m\nvar fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\\n\\r+/=]+)-----END \\1-----$/m\nvar evp = require('evp_bytestokey')\nvar ciphers = require('browserify-aes')\nvar Buffer = require('safe-buffer').Buffer\nmodule.exports = function (okey, password) {\n  var key = okey.toString()\n  var match = key.match(findProc)\n  var decrypted\n  if (!match) {\n    var match2 = key.match(fullRegex)\n    decrypted = Buffer.from(match2[2].replace(/[\\r\\n]/g, ''), 'base64')\n  } else {\n    var suite = 'aes' + match[1]\n    var iv = Buffer.from(match[2], 'hex')\n    var cipherText = Buffer.from(match[3].replace(/[\\r\\n]/g, ''), 'base64')\n    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key\n    var out = []\n    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)\n    out.push(cipher.update(cipherText))\n    out.push(cipher.final())\n    decrypted = Buffer.concat(out)\n  }\n  var tag = key.match(startRegex)[1]\n  return {\n    tag: tag,\n    data: decrypted\n  }\n}\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$evp_bytestokey$index","~$shadow.js","~$module$node_modules$safe_buffer$index","~$module$node_modules$browserify_aes$browser"]],"~:properties",["^5",["tag","data"]],"~:compiled-at",1695041440860,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$parse_asn1$fixProc.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAE9D,IAAIC,EAAW,uHAAf,CACIC,EAAa,6CADjB,CAEIC,EAAY,gFAFhB,CAGIC,EAAMN,CAAA,CAAQ,GAAR,CAHV,CAIIO,EAAUP,CAAA,CAAQ,GAAR,CAJd,CAKIQ,EAASR,CAAA,CAAQ,GAAR,CAAuBQ,CAAAA,MACpCP,EAAOC,CAAAA,OAAP,CAAiBO,QAAS,CAACC,CAAD,CAAOC,CAAP,CAAiB,CACrCC,CAAAA,CAAMF,CAAKG,CAAAA,QAAL,EACV,KAAIC,EAAQF,CAAIE,CAAAA,KAAJ,CAAUX,CAAV,CAEZ,IAAKW,CAAL,CAGO,CACL,IAAIC,EAAQ,KAARA,CAAgBD,CAAA,CAAM,CAAN,CAApB,CACIE,EAAKR,CAAOS,CAAAA,IAAP,CAAYH,CAAA,CAAM,CAAN,CAAZ,CAAsB,KAAtB,CACLI,KAAAA,EAAaV,CAAOS,CAAAA,IAAP,CAAYH,CAAA,CAAM,CAAN,CAASK,CAAAA,OAAT,CAAiB,SAAjB,CAA4B,EAA5B,CAAZ,CAA6C,QAA7C,CACbC,EAAAA,CAAYd,CAAA,CAAIK,CAAJ,CAAcK,CAAGK,CAAAA,KAAH,CAAS,CAAT,CAAY,CAAZ,CAAd,CAA8BC,QAAA,CAASR,CAAA,CAAM,CAAN,CAAT;AAAmB,EAAnB,CAA9B,CAAsDF,CAAAA,GAClEW,EAAAA,CAAM,EACNC,EAAAA,CAASjB,CAAQkB,CAAAA,gBAAR,CAAyBV,CAAzB,CAAgCK,CAAhC,CAA2CJ,CAA3C,CACbO,EAAIG,CAAAA,IAAJ,CAASF,CAAOG,CAAAA,MAAP,CAAcT,CAAd,CAAT,CACAK,EAAIG,CAAAA,IAAJ,CAASF,CAAOI,CAAAA,KAAP,EAAT,CACAC,EAAA,CAAYrB,CAAOsB,CAAAA,MAAP,CAAcP,CAAd,CATP,CAHP,IACMQ,EACJ,CADanB,CAAIE,CAAAA,KAAJ,CAAUT,CAAV,CACb,CAAAwB,CAAA,CAAYrB,CAAOS,CAAAA,IAAP,CAAYc,CAAA,CAAO,CAAP,CAAUZ,CAAAA,OAAV,CAAkB,SAAlB,CAA6B,EAA7B,CAAZ,CAA8C,QAA9C,CAad,OAAO,CACLa,IAFQpB,CAAIE,CAAAA,KAAJ,CAAUV,CAAV,CAAA4B,CAAsB,CAAtBA,CACH,CAELC,KAAMJ,CAFD,CAnBkC,CARmB;\",\n\"sources\":[\"node_modules/parse-asn1/fixProc.js\"],\n\"sourcesContent\":[\"shadow$provide[245] = function(global,require,module,exports) {\\n// adapted from https://github.com/apatil/pemstrip\\nvar findProc = /Proc-Type: 4,ENCRYPTED[\\\\n\\\\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\\\\n\\\\r]+([0-9A-z\\\\n\\\\r+/=]+)[\\\\n\\\\r]+/m\\nvar startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m\\nvar fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\\\\n\\\\r+/=]+)-----END \\\\1-----$/m\\nvar evp = require('evp_bytestokey')\\nvar ciphers = require('browserify-aes')\\nvar Buffer = require('safe-buffer').Buffer\\nmodule.exports = function (okey, password) {\\n  var key = okey.toString()\\n  var match = key.match(findProc)\\n  var decrypted\\n  if (!match) {\\n    var match2 = key.match(fullRegex)\\n    decrypted = Buffer.from(match2[2].replace(/[\\\\r\\\\n]/g, ''), 'base64')\\n  } else {\\n    var suite = 'aes' + match[1]\\n    var iv = Buffer.from(match[2], 'hex')\\n    var cipherText = Buffer.from(match[3].replace(/[\\\\r\\\\n]/g, ''), 'base64')\\n    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key\\n    var out = []\\n    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)\\n    out.push(cipher.update(cipherText))\\n    out.push(cipher.final())\\n    decrypted = Buffer.concat(out)\\n  }\\n  var tag = key.match(startRegex)[1]\\n  return {\\n    tag: tag,\\n    data: decrypted\\n  }\\n}\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"findProc\",\"startRegex\",\"fullRegex\",\"evp\",\"ciphers\",\"Buffer\",\"module.exports\",\"okey\",\"password\",\"key\",\"toString\",\"match\",\"suite\",\"iv\",\"from\",\"cipherText\",\"replace\",\"cipherKey\",\"slice\",\"parseInt\",\"out\",\"cipher\",\"createDecipheriv\",\"push\",\"update\",\"final\",\"decrypted\",\"concat\",\"match2\",\"tag\",\"data\"]\n}\n"]