["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@ethersproject/bignumber/lib/bignumber.js"],"~:js","shadow$provide.module$node_modules$$ethersproject$bignumber$lib$bignumber=function(global,require,module,exports){function toHex(value){if(\"string\"!==typeof value)return toHex(value.toString(16));if(\"-\"===value[0])return value=value.substring(1),\"-\"===value[0]&&logger.throwArgumentError(\"invalid hex\",\"value\",value),value=toHex(value),\"0x00\"===value?value:\"-\"+value;\"0x\"!==value.substring(0,2)&&(value=\"0x\"+value);if(\"0x\"===value)return\"0x00\";for(value.length%2&&(value=\"0x0\"+value.substring(2));4<value.length&&\n\"0x00\"===value.substring(0,4);)value=\"0x\"+value.substring(4);return value}function toBigNumber(value){return BigNumber.from(toHex(value))}function toBN(value){value=BigNumber.from(value).toHexString();return\"-\"===value[0]?new BN(\"-\"+value.substring(3),16):new BN(value.substring(2),16)}function throwFault(fault,operation,value){operation={fault,operation};null!=value&&(operation.value=value);return logger.throwError(fault,logger_1.Logger.errors.NUMERIC_FAULT,operation)}global=this&&this.__importDefault||\nfunction(mod){return mod&&mod.__esModule?mod:{\"default\":mod}};Object.defineProperty(exports,\"__esModule\",{value:!0});exports._base16To36=exports._base36To16=exports.BigNumber=exports.isBigNumberish=void 0;var BN=global(require(\"module$node_modules$bn_DOT_js$lib$bn\")).default.BN,bytes_1=require(\"module$node_modules$$ethersproject$bytes$lib$index\"),logger_1=require(\"module$node_modules$$ethersproject$logger$lib$index\");require=require(\"module$node_modules$$ethersproject$bignumber$lib$_version\");var logger=\nnew logger_1.Logger(require.version),_constructorGuard={};exports.isBigNumberish=function(value){return null!=value&&(BigNumber.isBigNumber(value)||\"number\"===typeof value&&0===value%1||\"string\"===typeof value&&!!value.match(/^-?[0-9]+$/)||(0,bytes_1.isHexString)(value)||\"bigint\"===typeof value||(0,bytes_1.isBytes)(value))};var _warnedToStringRadix=!1,BigNumber=function(){function BigNumber(constructorGuard,hex){constructorGuard!==_constructorGuard&&logger.throwError(\"cannot call constructor directly; use BigNumber.from\",\nlogger_1.Logger.errors.UNSUPPORTED_OPERATION,{operation:\"new (BigNumber)\"});this._hex=hex;this._isBigNumber=!0;Object.freeze(this)}BigNumber.prototype.fromTwos=function(value){return toBigNumber(toBN(this).fromTwos(value))};BigNumber.prototype.toTwos=function(value){return toBigNumber(toBN(this).toTwos(value))};BigNumber.prototype.abs=function(){return\"-\"===this._hex[0]?BigNumber.from(this._hex.substring(1)):this};BigNumber.prototype.add=function(other){return toBigNumber(toBN(this).add(toBN(other)))};\nBigNumber.prototype.sub=function(other){return toBigNumber(toBN(this).sub(toBN(other)))};BigNumber.prototype.div=function(other){BigNumber.from(other).isZero()&&throwFault(\"division-by-zero\",\"div\");return toBigNumber(toBN(this).div(toBN(other)))};BigNumber.prototype.mul=function(other){return toBigNumber(toBN(this).mul(toBN(other)))};BigNumber.prototype.mod=function(other){other=toBN(other);other.isNeg()&&throwFault(\"division-by-zero\",\"mod\");return toBigNumber(toBN(this).umod(other))};BigNumber.prototype.pow=\nfunction(other){other=toBN(other);other.isNeg()&&throwFault(\"negative-power\",\"pow\");return toBigNumber(toBN(this).pow(other))};BigNumber.prototype.and=function(other){other=toBN(other);(this.isNegative()||other.isNeg())&&throwFault(\"unbound-bitwise-result\",\"and\");return toBigNumber(toBN(this).and(other))};BigNumber.prototype.or=function(other){other=toBN(other);(this.isNegative()||other.isNeg())&&throwFault(\"unbound-bitwise-result\",\"or\");return toBigNumber(toBN(this).or(other))};BigNumber.prototype.xor=\nfunction(other){other=toBN(other);(this.isNegative()||other.isNeg())&&throwFault(\"unbound-bitwise-result\",\"xor\");return toBigNumber(toBN(this).xor(other))};BigNumber.prototype.mask=function(value){(this.isNegative()||0>value)&&throwFault(\"negative-width\",\"mask\");return toBigNumber(toBN(this).maskn(value))};BigNumber.prototype.shl=function(value){(this.isNegative()||0>value)&&throwFault(\"negative-width\",\"shl\");return toBigNumber(toBN(this).shln(value))};BigNumber.prototype.shr=function(value){(this.isNegative()||\n0>value)&&throwFault(\"negative-width\",\"shr\");return toBigNumber(toBN(this).shrn(value))};BigNumber.prototype.eq=function(other){return toBN(this).eq(toBN(other))};BigNumber.prototype.lt=function(other){return toBN(this).lt(toBN(other))};BigNumber.prototype.lte=function(other){return toBN(this).lte(toBN(other))};BigNumber.prototype.gt=function(other){return toBN(this).gt(toBN(other))};BigNumber.prototype.gte=function(other){return toBN(this).gte(toBN(other))};BigNumber.prototype.isNegative=function(){return\"-\"===\nthis._hex[0]};BigNumber.prototype.isZero=function(){return toBN(this).isZero()};BigNumber.prototype.toNumber=function(){try{return toBN(this).toNumber()}catch(error){throwFault(\"overflow\",\"toNumber\",this.toString())}return null};BigNumber.prototype.toBigInt=function(){try{return BigInt(this.toString())}catch(e){}return logger.throwError(\"this platform does not support BigInt\",logger_1.Logger.errors.UNSUPPORTED_OPERATION,{value:this.toString()})};BigNumber.prototype.toString=function(){0<arguments.length&&\n(10===arguments[0]?_warnedToStringRadix||(_warnedToStringRadix=!0,logger.warn(\"BigNumber.toString does not accept any parameters; base-10 is assumed\")):16===arguments[0]?logger.throwError(\"BigNumber.toString does not accept any parameters; use bigNumber.toHexString()\",logger_1.Logger.errors.UNEXPECTED_ARGUMENT,{}):logger.throwError(\"BigNumber.toString does not accept parameters\",logger_1.Logger.errors.UNEXPECTED_ARGUMENT,{}));return toBN(this).toString(10)};BigNumber.prototype.toHexString=function(){return this._hex};\nBigNumber.prototype.toJSON=function(key){return{type:\"BigNumber\",hex:this.toHexString()}};BigNumber.from=function(value){if(value instanceof BigNumber)return value;if(\"string\"===typeof value)return value.match(/^-?0x[0-9a-f]+$/i)?new BigNumber(_constructorGuard,toHex(value)):value.match(/^-?[0-9]+$/)?new BigNumber(_constructorGuard,toHex(new BN(value))):logger.throwArgumentError(\"invalid BigNumber string\",\"value\",value);if(\"number\"===typeof value)return value%1&&throwFault(\"underflow\",\"BigNumber.from\",\nvalue),(9007199254740991<=value||-9007199254740991>=value)&&throwFault(\"overflow\",\"BigNumber.from\",value),BigNumber.from(String(value));if(\"bigint\"===typeof value)return BigNumber.from(value.toString());if((0,bytes_1.isBytes)(value))return BigNumber.from((0,bytes_1.hexlify)(value));if(value)if(value.toHexString){var hex=value.toHexString();if(\"string\"===typeof hex)return BigNumber.from(hex)}else if(hex=value._hex,null==hex&&\"BigNumber\"===value.type&&(hex=value.hex),\"string\"===typeof hex&&((0,bytes_1.isHexString)(hex)||\n\"-\"===hex[0]&&(0,bytes_1.isHexString)(hex.substring(1))))return BigNumber.from(hex);return logger.throwArgumentError(\"invalid BigNumber value\",\"value\",value)};BigNumber.isBigNumber=function(value){return!(!value||!value._isBigNumber)};return BigNumber}();exports.BigNumber=BigNumber;exports._base36To16=function(value){return(new BN(value,36)).toString(16)};exports._base16To36=function(value){return(new BN(value,16)).toString(36)}}","~:source","shadow$provide[\"module$node_modules$$ethersproject$bignumber$lib$bignumber\"] = function(global,require,module,exports) {\n\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports._base16To36 = exports._base36To16 = exports.BigNumber = exports.isBigNumberish = void 0;\n/**\n *  BigNumber\n *\n *  A wrapper around the BN.js object. We use the BN.js library\n *  because it is used by elliptic, so it is required regardless.\n *\n */\nvar bn_js_1 = __importDefault(require(\"bn.js\"));\nvar BN = bn_js_1.default.BN;\nvar bytes_1 = require(\"@ethersproject/bytes\");\nvar logger_1 = require(\"@ethersproject/logger\");\nvar _version_1 = require(\"./_version\");\nvar logger = new logger_1.Logger(_version_1.version);\nvar _constructorGuard = {};\nvar MAX_SAFE = 0x1fffffffffffff;\nfunction isBigNumberish(value) {\n    return (value != null) && (BigNumber.isBigNumber(value) ||\n        (typeof (value) === \"number\" && (value % 1) === 0) ||\n        (typeof (value) === \"string\" && !!value.match(/^-?[0-9]+$/)) ||\n        (0, bytes_1.isHexString)(value) ||\n        (typeof (value) === \"bigint\") ||\n        (0, bytes_1.isBytes)(value));\n}\nexports.isBigNumberish = isBigNumberish;\n// Only warn about passing 10 into radix once\nvar _warnedToStringRadix = false;\nvar BigNumber = /** @class */ (function () {\n    function BigNumber(constructorGuard, hex) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"cannot call constructor directly; use BigNumber.from\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new (BigNumber)\"\n            });\n        }\n        this._hex = hex;\n        this._isBigNumber = true;\n        Object.freeze(this);\n    }\n    BigNumber.prototype.fromTwos = function (value) {\n        return toBigNumber(toBN(this).fromTwos(value));\n    };\n    BigNumber.prototype.toTwos = function (value) {\n        return toBigNumber(toBN(this).toTwos(value));\n    };\n    BigNumber.prototype.abs = function () {\n        if (this._hex[0] === \"-\") {\n            return BigNumber.from(this._hex.substring(1));\n        }\n        return this;\n    };\n    BigNumber.prototype.add = function (other) {\n        return toBigNumber(toBN(this).add(toBN(other)));\n    };\n    BigNumber.prototype.sub = function (other) {\n        return toBigNumber(toBN(this).sub(toBN(other)));\n    };\n    BigNumber.prototype.div = function (other) {\n        var o = BigNumber.from(other);\n        if (o.isZero()) {\n            throwFault(\"division-by-zero\", \"div\");\n        }\n        return toBigNumber(toBN(this).div(toBN(other)));\n    };\n    BigNumber.prototype.mul = function (other) {\n        return toBigNumber(toBN(this).mul(toBN(other)));\n    };\n    BigNumber.prototype.mod = function (other) {\n        var value = toBN(other);\n        if (value.isNeg()) {\n            throwFault(\"division-by-zero\", \"mod\");\n        }\n        return toBigNumber(toBN(this).umod(value));\n    };\n    BigNumber.prototype.pow = function (other) {\n        var value = toBN(other);\n        if (value.isNeg()) {\n            throwFault(\"negative-power\", \"pow\");\n        }\n        return toBigNumber(toBN(this).pow(value));\n    };\n    BigNumber.prototype.and = function (other) {\n        var value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"unbound-bitwise-result\", \"and\");\n        }\n        return toBigNumber(toBN(this).and(value));\n    };\n    BigNumber.prototype.or = function (other) {\n        var value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"unbound-bitwise-result\", \"or\");\n        }\n        return toBigNumber(toBN(this).or(value));\n    };\n    BigNumber.prototype.xor = function (other) {\n        var value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"unbound-bitwise-result\", \"xor\");\n        }\n        return toBigNumber(toBN(this).xor(value));\n    };\n    BigNumber.prototype.mask = function (value) {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"negative-width\", \"mask\");\n        }\n        return toBigNumber(toBN(this).maskn(value));\n    };\n    BigNumber.prototype.shl = function (value) {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"negative-width\", \"shl\");\n        }\n        return toBigNumber(toBN(this).shln(value));\n    };\n    BigNumber.prototype.shr = function (value) {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"negative-width\", \"shr\");\n        }\n        return toBigNumber(toBN(this).shrn(value));\n    };\n    BigNumber.prototype.eq = function (other) {\n        return toBN(this).eq(toBN(other));\n    };\n    BigNumber.prototype.lt = function (other) {\n        return toBN(this).lt(toBN(other));\n    };\n    BigNumber.prototype.lte = function (other) {\n        return toBN(this).lte(toBN(other));\n    };\n    BigNumber.prototype.gt = function (other) {\n        return toBN(this).gt(toBN(other));\n    };\n    BigNumber.prototype.gte = function (other) {\n        return toBN(this).gte(toBN(other));\n    };\n    BigNumber.prototype.isNegative = function () {\n        return (this._hex[0] === \"-\");\n    };\n    BigNumber.prototype.isZero = function () {\n        return toBN(this).isZero();\n    };\n    BigNumber.prototype.toNumber = function () {\n        try {\n            return toBN(this).toNumber();\n        }\n        catch (error) {\n            throwFault(\"overflow\", \"toNumber\", this.toString());\n        }\n        return null;\n    };\n    BigNumber.prototype.toBigInt = function () {\n        try {\n            return BigInt(this.toString());\n        }\n        catch (e) { }\n        return logger.throwError(\"this platform does not support BigInt\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {\n            value: this.toString()\n        });\n    };\n    BigNumber.prototype.toString = function () {\n        // Lots of people expect this, which we do not support, so check (See: #889)\n        if (arguments.length > 0) {\n            if (arguments[0] === 10) {\n                if (!_warnedToStringRadix) {\n                    _warnedToStringRadix = true;\n                    logger.warn(\"BigNumber.toString does not accept any parameters; base-10 is assumed\");\n                }\n            }\n            else if (arguments[0] === 16) {\n                logger.throwError(\"BigNumber.toString does not accept any parameters; use bigNumber.toHexString()\", logger_1.Logger.errors.UNEXPECTED_ARGUMENT, {});\n            }\n            else {\n                logger.throwError(\"BigNumber.toString does not accept parameters\", logger_1.Logger.errors.UNEXPECTED_ARGUMENT, {});\n            }\n        }\n        return toBN(this).toString(10);\n    };\n    BigNumber.prototype.toHexString = function () {\n        return this._hex;\n    };\n    BigNumber.prototype.toJSON = function (key) {\n        return { type: \"BigNumber\", hex: this.toHexString() };\n    };\n    BigNumber.from = function (value) {\n        if (value instanceof BigNumber) {\n            return value;\n        }\n        if (typeof (value) === \"string\") {\n            if (value.match(/^-?0x[0-9a-f]+$/i)) {\n                return new BigNumber(_constructorGuard, toHex(value));\n            }\n            if (value.match(/^-?[0-9]+$/)) {\n                return new BigNumber(_constructorGuard, toHex(new BN(value)));\n            }\n            return logger.throwArgumentError(\"invalid BigNumber string\", \"value\", value);\n        }\n        if (typeof (value) === \"number\") {\n            if (value % 1) {\n                throwFault(\"underflow\", \"BigNumber.from\", value);\n            }\n            if (value >= MAX_SAFE || value <= -MAX_SAFE) {\n                throwFault(\"overflow\", \"BigNumber.from\", value);\n            }\n            return BigNumber.from(String(value));\n        }\n        var anyValue = value;\n        if (typeof (anyValue) === \"bigint\") {\n            return BigNumber.from(anyValue.toString());\n        }\n        if ((0, bytes_1.isBytes)(anyValue)) {\n            return BigNumber.from((0, bytes_1.hexlify)(anyValue));\n        }\n        if (anyValue) {\n            // Hexable interface (takes priority)\n            if (anyValue.toHexString) {\n                var hex = anyValue.toHexString();\n                if (typeof (hex) === \"string\") {\n                    return BigNumber.from(hex);\n                }\n            }\n            else {\n                // For now, handle legacy JSON-ified values (goes away in v6)\n                var hex = anyValue._hex;\n                // New-form JSON\n                if (hex == null && anyValue.type === \"BigNumber\") {\n                    hex = anyValue.hex;\n                }\n                if (typeof (hex) === \"string\") {\n                    if ((0, bytes_1.isHexString)(hex) || (hex[0] === \"-\" && (0, bytes_1.isHexString)(hex.substring(1)))) {\n                        return BigNumber.from(hex);\n                    }\n                }\n            }\n        }\n        return logger.throwArgumentError(\"invalid BigNumber value\", \"value\", value);\n    };\n    BigNumber.isBigNumber = function (value) {\n        return !!(value && value._isBigNumber);\n    };\n    return BigNumber;\n}());\nexports.BigNumber = BigNumber;\n// Normalize the hex string\nfunction toHex(value) {\n    // For BN, call on the hex string\n    if (typeof (value) !== \"string\") {\n        return toHex(value.toString(16));\n    }\n    // If negative, prepend the negative sign to the normalized positive value\n    if (value[0] === \"-\") {\n        // Strip off the negative sign\n        value = value.substring(1);\n        // Cannot have multiple negative signs (e.g. \"--0x04\")\n        if (value[0] === \"-\") {\n            logger.throwArgumentError(\"invalid hex\", \"value\", value);\n        }\n        // Call toHex on the positive component\n        value = toHex(value);\n        // Do not allow \"-0x00\"\n        if (value === \"0x00\") {\n            return value;\n        }\n        // Negate the value\n        return \"-\" + value;\n    }\n    // Add a \"0x\" prefix if missing\n    if (value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    // Normalize zero\n    if (value === \"0x\") {\n        return \"0x00\";\n    }\n    // Make the string even length\n    if (value.length % 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n    // Trim to smallest even-length string\n    while (value.length > 4 && value.substring(0, 4) === \"0x00\") {\n        value = \"0x\" + value.substring(4);\n    }\n    return value;\n}\nfunction toBigNumber(value) {\n    return BigNumber.from(toHex(value));\n}\nfunction toBN(value) {\n    var hex = BigNumber.from(value).toHexString();\n    if (hex[0] === \"-\") {\n        return (new BN(\"-\" + hex.substring(3), 16));\n    }\n    return new BN(hex.substring(2), 16);\n}\nfunction throwFault(fault, operation, value) {\n    var params = { fault: fault, operation: operation };\n    if (value != null) {\n        params.value = value;\n    }\n    return logger.throwError(fault, logger_1.Logger.errors.NUMERIC_FAULT, params);\n}\n// value should have no prefix\nfunction _base36To16(value) {\n    return (new BN(value, 36)).toString(16);\n}\nexports._base36To16 = _base36To16;\n// value should have no prefix\nfunction _base16To36(value) {\n    return (new BN(value, 16)).toString(36);\n}\nexports._base16To36 = _base16To36;\n//# sourceMappingURL=bignumber.js.map\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$$ethersproject$bytes$lib$index","~$module$node_modules$$ethersproject$logger$lib$index","~$module$node_modules$$ethersproject$bignumber$lib$_version","~$module$node_modules$bn_DOT_js$lib$bn"]],"~:properties",["^5",["toHexString","lt","isNegative","toTwos","isZero","sub","eq","hex","__esModule","toBigInt","pow","toString","gt","gte","isBigNumberish","shl","shr","_base36To16","value","fromTwos","or","operation","_hex","BigNumber","_isBigNumber","and","mod","mul","div","type","abs","from","lte","add","toNumber","fault","xor","_base16To36","mask","toJSON","isBigNumber"]],"~:compiled-at",1695040653382,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$ethersproject$bignumber$lib$bignumber.js\",\n\"lineCount\":14,\n\"mappings\":\"AAAAA,cAAA,CAAA,0DAAA,CAA+E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAwPvHC,QAASA,MAAK,CAACC,KAAD,CAAQ,CAElB,GAAuB,QAAvB,GAAI,MAAQA,MAAZ,CACI,MAAOD,MAAA,CAAMC,KAAMC,CAAAA,QAAN,CAAe,EAAf,CAAN,CAGX,IAAiB,GAAjB,GAAID,KAAA,CAAM,CAAN,CAAJ,CAUI,MARAA,MAQA,CARQA,KAAME,CAAAA,SAAN,CAAgB,CAAhB,CAQR,CANiB,GAMjB,GANIF,KAAA,CAAM,CAAN,CAMJ,EALIG,MAAOC,CAAAA,kBAAP,CAA0B,aAA1B,CAAyC,OAAzC,CAAkDJ,KAAlD,CAKJ,CAFAA,KAEA,CAFQD,KAAA,CAAMC,KAAN,CAER,CAAc,MAAd,GAAIA,KAAJ,CACWA,KADX,CAIO,GAJP,CAIaA,KAGa,KAA9B,GAAIA,KAAME,CAAAA,SAAN,CAAgB,CAAhB,CAAmB,CAAnB,CAAJ,GACIF,KADJ,CACY,IADZ,CACmBA,KADnB,CAIA,IAAc,IAAd,GAAIA,KAAJ,CACI,MAAO,MAOX,KAJIA,KAAMK,CAAAA,MAIV,CAJmB,CAInB,GAHIL,KAGJ,CAHY,KAGZ,CAHoBA,KAAME,CAAAA,SAAN,CAAgB,CAAhB,CAGpB,EAAsB,CAAtB,CAAOF,KAAMK,CAAAA,MAAb;AAAqD,MAArD,GAA2BL,KAAME,CAAAA,SAAN,CAAgB,CAAhB,CAAmB,CAAnB,CAA3B,CAAA,CACIF,KAAA,CAAQ,IAAR,CAAeA,KAAME,CAAAA,SAAN,CAAgB,CAAhB,CAEnB,OAAOF,MAtCW,CAwCtBM,QAASA,YAAW,CAACN,KAAD,CAAQ,CACxB,MAAOO,UAAUC,CAAAA,IAAV,CAAeT,KAAA,CAAMC,KAAN,CAAf,CADiB,CAG5BS,QAASA,KAAI,CAACT,KAAD,CAAQ,CACbU,KAAAA,CAAMH,SAAUC,CAAAA,IAAV,CAAeR,KAAf,CAAsBW,CAAAA,WAAtB,EACV,OAAe,GAAf,GAAID,KAAA,CAAI,CAAJ,CAAJ,CACY,IAAIE,EAAJ,CAAO,GAAP,CAAaF,KAAIR,CAAAA,SAAJ,CAAc,CAAd,CAAb,CAA+B,EAA/B,CADZ,CAGO,IAAIU,EAAJ,CAAOF,KAAIR,CAAAA,SAAJ,CAAc,CAAd,CAAP,CAAyB,EAAzB,CALU,CAOrBW,QAASA,WAAU,CAACC,KAAD,CAAQC,SAAR,CAAmBf,KAAnB,CAA0B,CACrCgB,SAAAA,CAAS,CAASF,KAAT,CAA2BC,SAA3B,CACA,KAAb,EAAIf,KAAJ,GACIgB,SAAOhB,CAAAA,KADX,CACmBA,KADnB,CAGA,OAAOG,OAAOc,CAAAA,UAAP,CAAkBH,KAAlB,CAAyBI,QAASC,CAAAA,MAAOC,CAAAA,MAAOC,CAAAA,aAAhD,CAA+DL,SAA/D,CALkC,CAxSzCM,MAAAA,CAAmB,IAAnBA,EAA2B,IAAKA,CAAAA,eAAhCA;AAAoD,QAAS,CAACC,GAAD,CAAM,CACnE,MAAQA,IAAD,EAAQA,GAAIC,CAAAA,UAAZ,CAA0BD,GAA1B,CAAgC,CAAE,UAAWA,GAAb,CAD4B,CAGvEE,OAAOC,CAAAA,cAAP,CAAsB5B,OAAtB,CAA+B,YAA/B,CAA6C,CAAEE,MAAO,CAAA,CAAT,CAA7C,CACAF,QAAQ6B,CAAAA,WAAR,CAAsB7B,OAAQ8B,CAAAA,WAA9B,CAA4C9B,OAAQS,CAAAA,SAApD,CAAgET,OAAQ+B,CAAAA,cAAxE,CAAyF,IAAK,EAS9F,KAAIjB,GADUU,MAAAQ,CAAgBlC,OAAA,CAAQ,sCAAR,CAAhBkC,CACGC,CAAAA,OAAQnB,CAAAA,EAAzB,CACIoB,QAAUpC,OAAA,CAAQ,oDAAR,CADd,CAEIsB,SAAWtB,OAAA,CAAQ,qDAAR,CACXqC,QAAAA,CAAarC,OAAA,CAAQ,2DAAR,CACjB,KAAIO;AAAS,IAAIe,QAASC,CAAAA,MAAb,CAAoBc,OAAWC,CAAAA,OAA/B,CAAb,CACIC,kBAAoB,EAUxBrC,QAAQ+B,CAAAA,cAAR,CARAA,QAAuB,CAAC7B,KAAD,CAAQ,CAC3B,MAAiB,KAAjB,EAAQA,KAAR,GAA2BO,SAAU6B,CAAAA,WAAV,CAAsBpC,KAAtB,CAA3B,EACwB,QADxB,GACK,MAAQA,MADb,EACoD,CADpD,GACqCA,KADrC,CAC6C,CAD7C,EAEwB,QAFxB,GAEK,MAAQA,MAFb,EAEoC,CAAC,CAACA,KAAMqC,CAAAA,KAAN,CAAY,YAAZ,CAFtC,EAGI,GAAIL,OAAQM,CAAAA,WAAZ,EAAyBtC,KAAzB,CAHJ,EAIwB,QAJxB,GAIK,MAAQA,MAJb,EAKI,GAAIgC,OAAQO,CAAAA,OAAZ,EAAqBvC,KAArB,CALJ,CAD2B,CAU/B,KAAIwC,qBAAuB,CAAA,CAA3B,CACIjC,UAA2B,QAAS,EAAG,CACvCA,QAASA,UAAS,CAACkC,gBAAD,CAAmB/B,GAAnB,CAAwB,CAClC+B,gBAAJ,GAAyBN,iBAAzB,EACIhC,MAAOc,CAAAA,UAAP,CAAkB,sDAAlB;AAA0EC,QAASC,CAAAA,MAAOC,CAAAA,MAAOsB,CAAAA,qBAAjG,CAAwH,CACpH3B,UAAW,iBADyG,CAAxH,CAIJ,KAAK4B,CAAAA,IAAL,CAAYjC,GACZ,KAAKkC,CAAAA,YAAL,CAAoB,CAAA,CACpBnB,OAAOoB,CAAAA,MAAP,CAAc,IAAd,CARsC,CAU1CtC,SAAUuC,CAAAA,SAAUC,CAAAA,QAApB,CAA+BC,QAAS,CAAChD,KAAD,CAAQ,CAC5C,MAAOM,YAAA,CAAYG,IAAA,CAAK,IAAL,CAAWsC,CAAAA,QAAX,CAAoB/C,KAApB,CAAZ,CADqC,CAGhDO,UAAUuC,CAAAA,SAAUG,CAAAA,MAApB,CAA6BC,QAAS,CAAClD,KAAD,CAAQ,CAC1C,MAAOM,YAAA,CAAYG,IAAA,CAAK,IAAL,CAAWwC,CAAAA,MAAX,CAAkBjD,KAAlB,CAAZ,CADmC,CAG9CO,UAAUuC,CAAAA,SAAUK,CAAAA,GAApB,CAA0BC,QAAS,EAAG,CAClC,MAAqB,GAArB,GAAI,IAAKT,CAAAA,IAAL,CAAU,CAAV,CAAJ,CACWpC,SAAUC,CAAAA,IAAV,CAAe,IAAKmC,CAAAA,IAAKzC,CAAAA,SAAV,CAAoB,CAApB,CAAf,CADX,CAGO,IAJ2B,CAMtCK,UAAUuC,CAAAA,SAAUO,CAAAA,GAApB,CAA0BC,QAAS,CAACC,KAAD,CAAQ,CACvC,MAAOjD,YAAA,CAAYG,IAAA,CAAK,IAAL,CAAW4C,CAAAA,GAAX,CAAe5C,IAAA,CAAK8C,KAAL,CAAf,CAAZ,CADgC,CAG3ChD;SAAUuC,CAAAA,SAAUU,CAAAA,GAApB,CAA0BC,QAAS,CAACF,KAAD,CAAQ,CACvC,MAAOjD,YAAA,CAAYG,IAAA,CAAK,IAAL,CAAW+C,CAAAA,GAAX,CAAe/C,IAAA,CAAK8C,KAAL,CAAf,CAAZ,CADgC,CAG3ChD,UAAUuC,CAAAA,SAAUY,CAAAA,GAApB,CAA0BC,QAAS,CAACJ,KAAD,CAAQ,CAC/BhD,SAAUC,CAAAA,IAAVoD,CAAeL,KAAfK,CACFC,CAAAA,MAAF,EAAJ,EACIhD,UAAA,CAAW,kBAAX,CAA+B,KAA/B,CAEJ,OAAOP,YAAA,CAAYG,IAAA,CAAK,IAAL,CAAWiD,CAAAA,GAAX,CAAejD,IAAA,CAAK8C,KAAL,CAAf,CAAZ,CALgC,CAO3ChD,UAAUuC,CAAAA,SAAUgB,CAAAA,GAApB,CAA0BC,QAAS,CAACR,KAAD,CAAQ,CACvC,MAAOjD,YAAA,CAAYG,IAAA,CAAK,IAAL,CAAWqD,CAAAA,GAAX,CAAerD,IAAA,CAAK8C,KAAL,CAAf,CAAZ,CADgC,CAG3ChD,UAAUuC,CAAAA,SAAUvB,CAAAA,GAApB,CAA0ByC,QAAS,CAACT,KAAD,CAAQ,CACnCvD,KAAAA,CAAQS,IAAA,CAAK8C,KAAL,CACRvD,MAAMiE,CAAAA,KAAN,EAAJ,EACIpD,UAAA,CAAW,kBAAX,CAA+B,KAA/B,CAEJ,OAAOP,YAAA,CAAYG,IAAA,CAAK,IAAL,CAAWyD,CAAAA,IAAX,CAAgBlE,KAAhB,CAAZ,CALgC,CAO3CO,UAAUuC,CAAAA,SAAUqB,CAAAA,GAApB;AAA0BC,QAAS,CAACb,KAAD,CAAQ,CACnCvD,KAAAA,CAAQS,IAAA,CAAK8C,KAAL,CACRvD,MAAMiE,CAAAA,KAAN,EAAJ,EACIpD,UAAA,CAAW,gBAAX,CAA6B,KAA7B,CAEJ,OAAOP,YAAA,CAAYG,IAAA,CAAK,IAAL,CAAW0D,CAAAA,GAAX,CAAenE,KAAf,CAAZ,CALgC,CAO3CO,UAAUuC,CAAAA,SAAUuB,CAAAA,GAApB,CAA0BC,QAAS,CAACf,KAAD,CAAQ,CACnCvD,KAAAA,CAAQS,IAAA,CAAK8C,KAAL,CACZ,EAAI,IAAKgB,CAAAA,UAAL,EAAJ,EAAyBvE,KAAMiE,CAAAA,KAAN,EAAzB,GACIpD,UAAA,CAAW,wBAAX,CAAqC,KAArC,CAEJ,OAAOP,YAAA,CAAYG,IAAA,CAAK,IAAL,CAAW4D,CAAAA,GAAX,CAAerE,KAAf,CAAZ,CALgC,CAO3CO,UAAUuC,CAAAA,SAAU0B,CAAAA,EAApB,CAAyBC,QAAS,CAAClB,KAAD,CAAQ,CAClCvD,KAAAA,CAAQS,IAAA,CAAK8C,KAAL,CACZ,EAAI,IAAKgB,CAAAA,UAAL,EAAJ,EAAyBvE,KAAMiE,CAAAA,KAAN,EAAzB,GACIpD,UAAA,CAAW,wBAAX,CAAqC,IAArC,CAEJ,OAAOP,YAAA,CAAYG,IAAA,CAAK,IAAL,CAAW+D,CAAAA,EAAX,CAAcxE,KAAd,CAAZ,CAL+B,CAO1CO,UAAUuC,CAAAA,SAAU4B,CAAAA,GAApB;AAA0BC,QAAS,CAACpB,KAAD,CAAQ,CACnCvD,KAAAA,CAAQS,IAAA,CAAK8C,KAAL,CACZ,EAAI,IAAKgB,CAAAA,UAAL,EAAJ,EAAyBvE,KAAMiE,CAAAA,KAAN,EAAzB,GACIpD,UAAA,CAAW,wBAAX,CAAqC,KAArC,CAEJ,OAAOP,YAAA,CAAYG,IAAA,CAAK,IAAL,CAAWiE,CAAAA,GAAX,CAAe1E,KAAf,CAAZ,CALgC,CAO3CO,UAAUuC,CAAAA,SAAU8B,CAAAA,IAApB,CAA2BC,QAAS,CAAC7E,KAAD,CAAQ,CACxC,CAAI,IAAKuE,CAAAA,UAAL,EAAJ,EAAiC,CAAjC,CAAyBvE,KAAzB,GACIa,UAAA,CAAW,gBAAX,CAA6B,MAA7B,CAEJ,OAAOP,YAAA,CAAYG,IAAA,CAAK,IAAL,CAAWqE,CAAAA,KAAX,CAAiB9E,KAAjB,CAAZ,CAJiC,CAM5CO,UAAUuC,CAAAA,SAAUiC,CAAAA,GAApB,CAA0BC,QAAS,CAAChF,KAAD,CAAQ,CACvC,CAAI,IAAKuE,CAAAA,UAAL,EAAJ,EAAiC,CAAjC,CAAyBvE,KAAzB,GACIa,UAAA,CAAW,gBAAX,CAA6B,KAA7B,CAEJ,OAAOP,YAAA,CAAYG,IAAA,CAAK,IAAL,CAAWwE,CAAAA,IAAX,CAAgBjF,KAAhB,CAAZ,CAJgC,CAM3CO,UAAUuC,CAAAA,SAAUoC,CAAAA,GAApB,CAA0BC,QAAS,CAACnF,KAAD,CAAQ,CACvC,CAAI,IAAKuE,CAAAA,UAAL,EAAJ;AAAiC,CAAjC,CAAyBvE,KAAzB,GACIa,UAAA,CAAW,gBAAX,CAA6B,KAA7B,CAEJ,OAAOP,YAAA,CAAYG,IAAA,CAAK,IAAL,CAAW2E,CAAAA,IAAX,CAAgBpF,KAAhB,CAAZ,CAJgC,CAM3CO,UAAUuC,CAAAA,SAAUuC,CAAAA,EAApB,CAAyBC,QAAS,CAAC/B,KAAD,CAAQ,CACtC,MAAO9C,KAAA,CAAK,IAAL,CAAW4E,CAAAA,EAAX,CAAc5E,IAAA,CAAK8C,KAAL,CAAd,CAD+B,CAG1ChD,UAAUuC,CAAAA,SAAUyC,CAAAA,EAApB,CAAyBC,QAAS,CAACjC,KAAD,CAAQ,CACtC,MAAO9C,KAAA,CAAK,IAAL,CAAW8E,CAAAA,EAAX,CAAc9E,IAAA,CAAK8C,KAAL,CAAd,CAD+B,CAG1ChD,UAAUuC,CAAAA,SAAU2C,CAAAA,GAApB,CAA0BC,QAAS,CAACnC,KAAD,CAAQ,CACvC,MAAO9C,KAAA,CAAK,IAAL,CAAWgF,CAAAA,GAAX,CAAehF,IAAA,CAAK8C,KAAL,CAAf,CADgC,CAG3ChD,UAAUuC,CAAAA,SAAU6C,CAAAA,EAApB,CAAyBC,QAAS,CAACrC,KAAD,CAAQ,CACtC,MAAO9C,KAAA,CAAK,IAAL,CAAWkF,CAAAA,EAAX,CAAclF,IAAA,CAAK8C,KAAL,CAAd,CAD+B,CAG1ChD,UAAUuC,CAAAA,SAAU+C,CAAAA,GAApB,CAA0BC,QAAS,CAACvC,KAAD,CAAQ,CACvC,MAAO9C,KAAA,CAAK,IAAL,CAAWoF,CAAAA,GAAX,CAAepF,IAAA,CAAK8C,KAAL,CAAf,CADgC,CAG3ChD,UAAUuC,CAAAA,SAAUyB,CAAAA,UAApB,CAAiCwB,QAAS,EAAG,CACzC,MAAyB,GAAzB;AAAQ,IAAKpD,CAAAA,IAAL,CAAU,CAAV,CADiC,CAG7CpC,UAAUuC,CAAAA,SAAUe,CAAAA,MAApB,CAA6BmC,QAAS,EAAG,CACrC,MAAOvF,KAAA,CAAK,IAAL,CAAWoD,CAAAA,MAAX,EAD8B,CAGzCtD,UAAUuC,CAAAA,SAAUmD,CAAAA,QAApB,CAA+BC,QAAS,EAAG,CACvC,GAAI,CACA,MAAOzF,KAAA,CAAK,IAAL,CAAWwF,CAAAA,QAAX,EADP,CAGJ,MAAOE,KAAP,CAAc,CACVtF,UAAA,CAAW,UAAX,CAAuB,UAAvB,CAAmC,IAAKZ,CAAAA,QAAL,EAAnC,CADU,CAGd,MAAO,KAPgC,CAS3CM,UAAUuC,CAAAA,SAAUsD,CAAAA,QAApB,CAA+BC,QAAS,EAAG,CACvC,GAAI,CACA,MAAOC,OAAA,CAAO,IAAKrG,CAAAA,QAAL,EAAP,CADP,CAGJ,MAAOsG,CAAP,CAAU,EACV,MAAOpG,OAAOc,CAAAA,UAAP,CAAkB,uCAAlB,CAA2DC,QAASC,CAAAA,MAAOC,CAAAA,MAAOsB,CAAAA,qBAAlF,CAAyG,CAC5G1C,MAAO,IAAKC,CAAAA,QAAL,EADqG,CAAzG,CALgC,CAS3CM,UAAUuC,CAAAA,SAAU7C,CAAAA,QAApB,CAA+BuG,QAAS,EAAG,CAEhB,CAAvB,CAAIC,SAAUpG,CAAAA,MAAd;CACyB,EAArB,GAAIoG,SAAA,CAAU,CAAV,CAAJ,CACSjE,oBADT,GAEQA,oBACA,CADuB,CAAA,CACvB,CAAArC,MAAOuG,CAAAA,IAAP,CAAY,uEAAZ,CAHR,EAM0B,EAArB,GAAID,SAAA,CAAU,CAAV,CAAJ,CACDtG,MAAOc,CAAAA,UAAP,CAAkB,gFAAlB,CAAoGC,QAASC,CAAAA,MAAOC,CAAAA,MAAOuF,CAAAA,mBAA3H,CAAgJ,EAAhJ,CADC,CAIDxG,MAAOc,CAAAA,UAAP,CAAkB,+CAAlB,CAAmEC,QAASC,CAAAA,MAAOC,CAAAA,MAAOuF,CAAAA,mBAA1F,CAA+G,EAA/G,CAXR,CAcA,OAAOlG,KAAA,CAAK,IAAL,CAAWR,CAAAA,QAAX,CAAoB,EAApB,CAhBgC,CAkB3CM,UAAUuC,CAAAA,SAAUnC,CAAAA,WAApB,CAAkCiG,QAAS,EAAG,CAC1C,MAAO,KAAKjE,CAAAA,IAD8B,CAG9CpC;SAAUuC,CAAAA,SAAU+D,CAAAA,MAApB,CAA6BC,QAAS,CAACC,GAAD,CAAM,CACxC,MAAO,CAAEC,KAAM,WAAR,CAAqBtG,IAAK,IAAKC,CAAAA,WAAL,EAA1B,CADiC,CAG5CJ,UAAUC,CAAAA,IAAV,CAAiByG,QAAS,CAACjH,KAAD,CAAQ,CAC9B,GAAIA,KAAJ,WAAqBO,UAArB,CACI,MAAOP,MAEX,IAAuB,QAAvB,GAAI,MAAQA,MAAZ,CACI,MAAIA,MAAMqC,CAAAA,KAAN,CAAY,kBAAZ,CAAJ,CACW,IAAI9B,SAAJ,CAAc4B,iBAAd,CAAiCpC,KAAA,CAAMC,KAAN,CAAjC,CADX,CAGIA,KAAMqC,CAAAA,KAAN,CAAY,YAAZ,CAAJ,CACW,IAAI9B,SAAJ,CAAc4B,iBAAd,CAAiCpC,KAAA,CAAM,IAAIa,EAAJ,CAAOZ,KAAP,CAAN,CAAjC,CADX,CAGOG,MAAOC,CAAAA,kBAAP,CAA0B,0BAA1B,CAAsD,OAAtD,CAA+DJ,KAA/D,CAEX,IAAuB,QAAvB,GAAI,MAAQA,MAAZ,CAOI,MANIA,MAMG,CANK,CAML,EALHa,UAAA,CAAW,WAAX,CAAwB,gBAAxB;AAA0Cb,KAA1C,CAKG,EA3LJkH,gBA2LI,EAHHlH,KAGG,EAH2B,CAxL/BkH,gBA2LI,EAHkBlH,KAGlB,GAFHa,UAAA,CAAW,UAAX,CAAuB,gBAAvB,CAAyCb,KAAzC,CAEG,CAAAO,SAAUC,CAAAA,IAAV,CAAe2G,MAAA,CAAOnH,KAAP,CAAf,CAGX,IAA0B,QAA1B,GAAI,MADWA,MACf,CACI,MAAOO,UAAUC,CAAAA,IAAV,CAFIR,KAEoBC,CAAAA,QAAT,EAAf,CAEX,IAAI,GAAI+B,OAAQO,CAAAA,OAAZ,EAJWvC,KAIX,CAAJ,CACI,MAAOO,UAAUC,CAAAA,IAAV,CAAe,GAAIwB,OAAQoF,CAAAA,OAAZ,EALXpH,KAKW,CAAf,CAEX,IAPeA,KAOf,CAEI,GATWA,KASEW,CAAAA,WAAb,CAA0B,CACtB,IAAID,IAVGV,KAUYW,CAAAA,WAAT,EACV,IAAqB,QAArB,GAAI,MAAQD,IAAZ,CACI,MAAOH,UAAUC,CAAAA,IAAV,CAAeE,GAAf,CAHW,CAA1B,IAaI,IALIA,GAKA,CAtBGV,KAiBY2C,CAAAA,IAKf,CAHO,IAGP,EAHAjC,GAGA,EAHiC,WAGjC,GAtBGV,KAmBqBgH,CAAAA,IAGxB,GAFAtG,GAEA,CAtBGV,KAoBYU,CAAAA,GAEf,EAAiB,QAAjB,GAAA,MAAQA,IAAR,GACI,GAAIsB,OAAQM,CAAAA,WAAZ,EAAyB5B,GAAzB,CADJ;AACiD,GADjD,GACsCA,GAAA,CAAI,CAAJ,CADtC,EACwD,GAAIsB,OAAQM,CAAAA,WAAZ,EAAyB5B,GAAIR,CAAAA,SAAJ,CAAc,CAAd,CAAzB,CADxD,CAAJ,CAEQ,MAAOK,UAAUC,CAAAA,IAAV,CAAeE,GAAf,CAKvB,OAAOP,OAAOC,CAAAA,kBAAP,CAA0B,yBAA1B,CAAqD,OAArD,CAA8DJ,KAA9D,CAnDuB,CAqDlCO,UAAU6B,CAAAA,WAAV,CAAwBiF,QAAS,CAACrH,KAAD,CAAQ,CACrC,MAAO,EAAGA,CAAAA,KAAH,EAAkB4C,CAAN5C,KAAM4C,CAAAA,YAAlB,CAD8B,CAGzC,OAAOrC,UAnNgC,CAAZ,EAqN/BT,QAAQS,CAAAA,SAAR,CAAoBA,SA+DpBT,QAAQ8B,CAAAA,WAAR,CAHAA,QAAoB,CAAC5B,KAAD,CAAQ,CACxB,MAA2BC,CAAnB,IAAIW,EAAJ,CAAOZ,KAAP,CAAc,EAAd,CAAmBC,EAAAA,QAApB,CAA6B,EAA7B,CADiB,CAQ5BH,QAAQ6B,CAAAA,WAAR,CAHAA,QAAoB,CAAC3B,KAAD,CAAQ,CACxB,MAA2BC,CAAnB,IAAIW,EAAJ,CAAOZ,KAAP,CAAc,EAAd,CAAmBC,EAAAA,QAApB,CAA6B,EAA7B,CADiB,CAvT2F;\",\n\"sources\":[\"node_modules/@ethersproject/bignumber/lib/bignumber.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$ethersproject$bignumber$lib$bignumber\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\nvar __importDefault = (this && this.__importDefault) || function (mod) {\\n    return (mod && mod.__esModule) ? mod : { \\\"default\\\": mod };\\n};\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nexports._base16To36 = exports._base36To16 = exports.BigNumber = exports.isBigNumberish = void 0;\\n/**\\n *  BigNumber\\n *\\n *  A wrapper around the BN.js object. We use the BN.js library\\n *  because it is used by elliptic, so it is required regardless.\\n *\\n */\\nvar bn_js_1 = __importDefault(require(\\\"bn.js\\\"));\\nvar BN = bn_js_1.default.BN;\\nvar bytes_1 = require(\\\"@ethersproject/bytes\\\");\\nvar logger_1 = require(\\\"@ethersproject/logger\\\");\\nvar _version_1 = require(\\\"./_version\\\");\\nvar logger = new logger_1.Logger(_version_1.version);\\nvar _constructorGuard = {};\\nvar MAX_SAFE = 0x1fffffffffffff;\\nfunction isBigNumberish(value) {\\n    return (value != null) && (BigNumber.isBigNumber(value) ||\\n        (typeof (value) === \\\"number\\\" && (value % 1) === 0) ||\\n        (typeof (value) === \\\"string\\\" && !!value.match(/^-?[0-9]+$/)) ||\\n        (0, bytes_1.isHexString)(value) ||\\n        (typeof (value) === \\\"bigint\\\") ||\\n        (0, bytes_1.isBytes)(value));\\n}\\nexports.isBigNumberish = isBigNumberish;\\n// Only warn about passing 10 into radix once\\nvar _warnedToStringRadix = false;\\nvar BigNumber = /** @class */ (function () {\\n    function BigNumber(constructorGuard, hex) {\\n        if (constructorGuard !== _constructorGuard) {\\n            logger.throwError(\\\"cannot call constructor directly; use BigNumber.from\\\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {\\n                operation: \\\"new (BigNumber)\\\"\\n            });\\n        }\\n        this._hex = hex;\\n        this._isBigNumber = true;\\n        Object.freeze(this);\\n    }\\n    BigNumber.prototype.fromTwos = function (value) {\\n        return toBigNumber(toBN(this).fromTwos(value));\\n    };\\n    BigNumber.prototype.toTwos = function (value) {\\n        return toBigNumber(toBN(this).toTwos(value));\\n    };\\n    BigNumber.prototype.abs = function () {\\n        if (this._hex[0] === \\\"-\\\") {\\n            return BigNumber.from(this._hex.substring(1));\\n        }\\n        return this;\\n    };\\n    BigNumber.prototype.add = function (other) {\\n        return toBigNumber(toBN(this).add(toBN(other)));\\n    };\\n    BigNumber.prototype.sub = function (other) {\\n        return toBigNumber(toBN(this).sub(toBN(other)));\\n    };\\n    BigNumber.prototype.div = function (other) {\\n        var o = BigNumber.from(other);\\n        if (o.isZero()) {\\n            throwFault(\\\"division-by-zero\\\", \\\"div\\\");\\n        }\\n        return toBigNumber(toBN(this).div(toBN(other)));\\n    };\\n    BigNumber.prototype.mul = function (other) {\\n        return toBigNumber(toBN(this).mul(toBN(other)));\\n    };\\n    BigNumber.prototype.mod = function (other) {\\n        var value = toBN(other);\\n        if (value.isNeg()) {\\n            throwFault(\\\"division-by-zero\\\", \\\"mod\\\");\\n        }\\n        return toBigNumber(toBN(this).umod(value));\\n    };\\n    BigNumber.prototype.pow = function (other) {\\n        var value = toBN(other);\\n        if (value.isNeg()) {\\n            throwFault(\\\"negative-power\\\", \\\"pow\\\");\\n        }\\n        return toBigNumber(toBN(this).pow(value));\\n    };\\n    BigNumber.prototype.and = function (other) {\\n        var value = toBN(other);\\n        if (this.isNegative() || value.isNeg()) {\\n            throwFault(\\\"unbound-bitwise-result\\\", \\\"and\\\");\\n        }\\n        return toBigNumber(toBN(this).and(value));\\n    };\\n    BigNumber.prototype.or = function (other) {\\n        var value = toBN(other);\\n        if (this.isNegative() || value.isNeg()) {\\n            throwFault(\\\"unbound-bitwise-result\\\", \\\"or\\\");\\n        }\\n        return toBigNumber(toBN(this).or(value));\\n    };\\n    BigNumber.prototype.xor = function (other) {\\n        var value = toBN(other);\\n        if (this.isNegative() || value.isNeg()) {\\n            throwFault(\\\"unbound-bitwise-result\\\", \\\"xor\\\");\\n        }\\n        return toBigNumber(toBN(this).xor(value));\\n    };\\n    BigNumber.prototype.mask = function (value) {\\n        if (this.isNegative() || value < 0) {\\n            throwFault(\\\"negative-width\\\", \\\"mask\\\");\\n        }\\n        return toBigNumber(toBN(this).maskn(value));\\n    };\\n    BigNumber.prototype.shl = function (value) {\\n        if (this.isNegative() || value < 0) {\\n            throwFault(\\\"negative-width\\\", \\\"shl\\\");\\n        }\\n        return toBigNumber(toBN(this).shln(value));\\n    };\\n    BigNumber.prototype.shr = function (value) {\\n        if (this.isNegative() || value < 0) {\\n            throwFault(\\\"negative-width\\\", \\\"shr\\\");\\n        }\\n        return toBigNumber(toBN(this).shrn(value));\\n    };\\n    BigNumber.prototype.eq = function (other) {\\n        return toBN(this).eq(toBN(other));\\n    };\\n    BigNumber.prototype.lt = function (other) {\\n        return toBN(this).lt(toBN(other));\\n    };\\n    BigNumber.prototype.lte = function (other) {\\n        return toBN(this).lte(toBN(other));\\n    };\\n    BigNumber.prototype.gt = function (other) {\\n        return toBN(this).gt(toBN(other));\\n    };\\n    BigNumber.prototype.gte = function (other) {\\n        return toBN(this).gte(toBN(other));\\n    };\\n    BigNumber.prototype.isNegative = function () {\\n        return (this._hex[0] === \\\"-\\\");\\n    };\\n    BigNumber.prototype.isZero = function () {\\n        return toBN(this).isZero();\\n    };\\n    BigNumber.prototype.toNumber = function () {\\n        try {\\n            return toBN(this).toNumber();\\n        }\\n        catch (error) {\\n            throwFault(\\\"overflow\\\", \\\"toNumber\\\", this.toString());\\n        }\\n        return null;\\n    };\\n    BigNumber.prototype.toBigInt = function () {\\n        try {\\n            return BigInt(this.toString());\\n        }\\n        catch (e) { }\\n        return logger.throwError(\\\"this platform does not support BigInt\\\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {\\n            value: this.toString()\\n        });\\n    };\\n    BigNumber.prototype.toString = function () {\\n        // Lots of people expect this, which we do not support, so check (See: #889)\\n        if (arguments.length > 0) {\\n            if (arguments[0] === 10) {\\n                if (!_warnedToStringRadix) {\\n                    _warnedToStringRadix = true;\\n                    logger.warn(\\\"BigNumber.toString does not accept any parameters; base-10 is assumed\\\");\\n                }\\n            }\\n            else if (arguments[0] === 16) {\\n                logger.throwError(\\\"BigNumber.toString does not accept any parameters; use bigNumber.toHexString()\\\", logger_1.Logger.errors.UNEXPECTED_ARGUMENT, {});\\n            }\\n            else {\\n                logger.throwError(\\\"BigNumber.toString does not accept parameters\\\", logger_1.Logger.errors.UNEXPECTED_ARGUMENT, {});\\n            }\\n        }\\n        return toBN(this).toString(10);\\n    };\\n    BigNumber.prototype.toHexString = function () {\\n        return this._hex;\\n    };\\n    BigNumber.prototype.toJSON = function (key) {\\n        return { type: \\\"BigNumber\\\", hex: this.toHexString() };\\n    };\\n    BigNumber.from = function (value) {\\n        if (value instanceof BigNumber) {\\n            return value;\\n        }\\n        if (typeof (value) === \\\"string\\\") {\\n            if (value.match(/^-?0x[0-9a-f]+$/i)) {\\n                return new BigNumber(_constructorGuard, toHex(value));\\n            }\\n            if (value.match(/^-?[0-9]+$/)) {\\n                return new BigNumber(_constructorGuard, toHex(new BN(value)));\\n            }\\n            return logger.throwArgumentError(\\\"invalid BigNumber string\\\", \\\"value\\\", value);\\n        }\\n        if (typeof (value) === \\\"number\\\") {\\n            if (value % 1) {\\n                throwFault(\\\"underflow\\\", \\\"BigNumber.from\\\", value);\\n            }\\n            if (value >= MAX_SAFE || value <= -MAX_SAFE) {\\n                throwFault(\\\"overflow\\\", \\\"BigNumber.from\\\", value);\\n            }\\n            return BigNumber.from(String(value));\\n        }\\n        var anyValue = value;\\n        if (typeof (anyValue) === \\\"bigint\\\") {\\n            return BigNumber.from(anyValue.toString());\\n        }\\n        if ((0, bytes_1.isBytes)(anyValue)) {\\n            return BigNumber.from((0, bytes_1.hexlify)(anyValue));\\n        }\\n        if (anyValue) {\\n            // Hexable interface (takes priority)\\n            if (anyValue.toHexString) {\\n                var hex = anyValue.toHexString();\\n                if (typeof (hex) === \\\"string\\\") {\\n                    return BigNumber.from(hex);\\n                }\\n            }\\n            else {\\n                // For now, handle legacy JSON-ified values (goes away in v6)\\n                var hex = anyValue._hex;\\n                // New-form JSON\\n                if (hex == null && anyValue.type === \\\"BigNumber\\\") {\\n                    hex = anyValue.hex;\\n                }\\n                if (typeof (hex) === \\\"string\\\") {\\n                    if ((0, bytes_1.isHexString)(hex) || (hex[0] === \\\"-\\\" && (0, bytes_1.isHexString)(hex.substring(1)))) {\\n                        return BigNumber.from(hex);\\n                    }\\n                }\\n            }\\n        }\\n        return logger.throwArgumentError(\\\"invalid BigNumber value\\\", \\\"value\\\", value);\\n    };\\n    BigNumber.isBigNumber = function (value) {\\n        return !!(value && value._isBigNumber);\\n    };\\n    return BigNumber;\\n}());\\nexports.BigNumber = BigNumber;\\n// Normalize the hex string\\nfunction toHex(value) {\\n    // For BN, call on the hex string\\n    if (typeof (value) !== \\\"string\\\") {\\n        return toHex(value.toString(16));\\n    }\\n    // If negative, prepend the negative sign to the normalized positive value\\n    if (value[0] === \\\"-\\\") {\\n        // Strip off the negative sign\\n        value = value.substring(1);\\n        // Cannot have multiple negative signs (e.g. \\\"--0x04\\\")\\n        if (value[0] === \\\"-\\\") {\\n            logger.throwArgumentError(\\\"invalid hex\\\", \\\"value\\\", value);\\n        }\\n        // Call toHex on the positive component\\n        value = toHex(value);\\n        // Do not allow \\\"-0x00\\\"\\n        if (value === \\\"0x00\\\") {\\n            return value;\\n        }\\n        // Negate the value\\n        return \\\"-\\\" + value;\\n    }\\n    // Add a \\\"0x\\\" prefix if missing\\n    if (value.substring(0, 2) !== \\\"0x\\\") {\\n        value = \\\"0x\\\" + value;\\n    }\\n    // Normalize zero\\n    if (value === \\\"0x\\\") {\\n        return \\\"0x00\\\";\\n    }\\n    // Make the string even length\\n    if (value.length % 2) {\\n        value = \\\"0x0\\\" + value.substring(2);\\n    }\\n    // Trim to smallest even-length string\\n    while (value.length > 4 && value.substring(0, 4) === \\\"0x00\\\") {\\n        value = \\\"0x\\\" + value.substring(4);\\n    }\\n    return value;\\n}\\nfunction toBigNumber(value) {\\n    return BigNumber.from(toHex(value));\\n}\\nfunction toBN(value) {\\n    var hex = BigNumber.from(value).toHexString();\\n    if (hex[0] === \\\"-\\\") {\\n        return (new BN(\\\"-\\\" + hex.substring(3), 16));\\n    }\\n    return new BN(hex.substring(2), 16);\\n}\\nfunction throwFault(fault, operation, value) {\\n    var params = { fault: fault, operation: operation };\\n    if (value != null) {\\n        params.value = value;\\n    }\\n    return logger.throwError(fault, logger_1.Logger.errors.NUMERIC_FAULT, params);\\n}\\n// value should have no prefix\\nfunction _base36To16(value) {\\n    return (new BN(value, 36)).toString(16);\\n}\\nexports._base36To16 = _base36To16;\\n// value should have no prefix\\nfunction _base16To36(value) {\\n    return (new BN(value, 16)).toString(36);\\n}\\nexports._base16To36 = _base16To36;\\n//# sourceMappingURL=bignumber.js.map\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"toHex\",\"value\",\"toString\",\"substring\",\"logger\",\"throwArgumentError\",\"length\",\"toBigNumber\",\"BigNumber\",\"from\",\"toBN\",\"hex\",\"toHexString\",\"BN\",\"throwFault\",\"fault\",\"operation\",\"params\",\"throwError\",\"logger_1\",\"Logger\",\"errors\",\"NUMERIC_FAULT\",\"__importDefault\",\"mod\",\"__esModule\",\"Object\",\"defineProperty\",\"_base16To36\",\"_base36To16\",\"isBigNumberish\",\"bn_js_1\",\"default\",\"bytes_1\",\"_version_1\",\"version\",\"_constructorGuard\",\"isBigNumber\",\"match\",\"isHexString\",\"isBytes\",\"_warnedToStringRadix\",\"constructorGuard\",\"UNSUPPORTED_OPERATION\",\"_hex\",\"_isBigNumber\",\"freeze\",\"prototype\",\"fromTwos\",\"BigNumber.prototype.fromTwos\",\"toTwos\",\"BigNumber.prototype.toTwos\",\"abs\",\"BigNumber.prototype.abs\",\"add\",\"BigNumber.prototype.add\",\"other\",\"sub\",\"BigNumber.prototype.sub\",\"div\",\"BigNumber.prototype.div\",\"o\",\"isZero\",\"mul\",\"BigNumber.prototype.mul\",\"BigNumber.prototype.mod\",\"isNeg\",\"umod\",\"pow\",\"BigNumber.prototype.pow\",\"and\",\"BigNumber.prototype.and\",\"isNegative\",\"or\",\"BigNumber.prototype.or\",\"xor\",\"BigNumber.prototype.xor\",\"mask\",\"BigNumber.prototype.mask\",\"maskn\",\"shl\",\"BigNumber.prototype.shl\",\"shln\",\"shr\",\"BigNumber.prototype.shr\",\"shrn\",\"eq\",\"BigNumber.prototype.eq\",\"lt\",\"BigNumber.prototype.lt\",\"lte\",\"BigNumber.prototype.lte\",\"gt\",\"BigNumber.prototype.gt\",\"gte\",\"BigNumber.prototype.gte\",\"BigNumber.prototype.isNegative\",\"BigNumber.prototype.isZero\",\"toNumber\",\"BigNumber.prototype.toNumber\",\"error\",\"toBigInt\",\"BigNumber.prototype.toBigInt\",\"BigInt\",\"e\",\"BigNumber.prototype.toString\",\"arguments\",\"warn\",\"UNEXPECTED_ARGUMENT\",\"BigNumber.prototype.toHexString\",\"toJSON\",\"BigNumber.prototype.toJSON\",\"key\",\"type\",\"BigNumber.from\",\"MAX_SAFE\",\"String\",\"hexlify\",\"BigNumber.isBigNumber\"]\n}\n"]