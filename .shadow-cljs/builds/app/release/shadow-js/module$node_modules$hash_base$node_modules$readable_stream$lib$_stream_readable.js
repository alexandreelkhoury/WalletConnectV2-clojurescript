["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/hash-base/node_modules/readable-stream/lib/_stream_readable.js"],"~:js","shadow$provide[126]=function(S,A,V,q){function F(L,Q,W){if(\"function\"===typeof L.prependListener)return L.prependListener(Q,W);if(L._events&&L._events[Q])Array.isArray(L._events[Q])?L._events[Q].unshift(W):L._events[Q]=[W,L._events[Q]];else L.on(Q,W)}function G(L,Q,W){J=J||A(121);L=L||{};\"boolean\"!==typeof W&&(W=Q instanceof J);this.objectMode=!!L.objectMode;W&&(this.objectMode=this.objectMode||!!L.readableObjectMode);this.highWaterMark=d(this,L,\"readableHighWaterMark\",W);this.buffer=new c;this.length=\n0;this.pipes=null;this.pipesCount=0;this.flowing=null;this.reading=this.endEmitted=this.ended=!1;this.sync=!0;this.resumeScheduled=this.readableListening=this.emittedReadable=this.needReadable=!1;this.paused=!0;this.emitClose=!1!==L.emitClose;this.autoDestroy=!!L.autoDestroy;this.destroyed=!1;this.defaultEncoding=L.defaultEncoding||\"utf8\";this.awaitDrain=0;this.readingMore=!1;this.encoding=this.decoder=null;L.encoding&&(x||(x=A(122).StringDecoder),this.decoder=new x(L.encoding),this.encoding=L.encoding)}\nfunction r(L){J=J||A(121);if(!(this instanceof r))return new r(L);this._readableState=new G(L,this,this instanceof J);this.readable=!0;L&&(\"function\"===typeof L.read&&(this._read=L.read),\"function\"===typeof L.destroy&&(this._destroy=L.destroy));T.call(this)}function y(L,Q,W,Z,da){b(\"readableAddChunk\",Q);var X=L._readableState;if(null===Q)X.reading=!1,b(\"onEofChunk\"),X.ended||(X.decoder&&(Q=X.decoder.end())&&Q.length&&(X.buffer.push(Q),X.length+=X.objectMode?1:Q.length),X.ended=!0,X.sync?p(L):(X.needReadable=\n!1,X.emittedReadable||(X.emittedReadable=!0,n(L))));else{if(!da){da=Q;var Y;N.isBuffer(da)||da instanceof a||\"string\"===typeof da||void 0===da||X.objectMode||(Y=new f(\"chunk\",[\"string\",\"Buffer\",\"Uint8Array\"],da));var aa=Y}if(aa)R(L,aa);else if(X.objectMode||Q&&0<Q.length)if(\"string\"===typeof Q||X.objectMode||Object.getPrototypeOf(Q)===N.prototype||(Q=N.from(Q)),Z)X.endEmitted?R(L,new w):e(L,X,Q,!0);else if(X.ended)R(L,new g);else{if(X.destroyed)return!1;X.reading=!1;X.decoder&&!W?(Q=X.decoder.write(Q),\nX.objectMode||0!==Q.length?e(L,X,Q,!1):l(L,X)):e(L,X,Q,!1)}else Z||(X.reading=!1,l(L,X))}return!X.ended&&(X.length<X.highWaterMark||0===X.length)}function e(L,Q,W,Z){Q.flowing&&0===Q.length&&!Q.sync?(Q.awaitDrain=0,L.emit(\"data\",W)):(Q.length+=Q.objectMode?1:W.length,Z?Q.buffer.unshift(W):Q.buffer.push(W),Q.needReadable&&p(L));l(L,Q)}function u(L,Q){if(0>=L||0===Q.length&&Q.ended)return 0;if(Q.objectMode)return 1;if(L!==L)return Q.flowing&&Q.length?Q.buffer.head.data.length:Q.length;if(L>Q.highWaterMark){var W=\nL;1073741824<=W?W=1073741824:(W--,W|=W>>>1,W|=W>>>2,W|=W>>>4,W|=W>>>8,W|=W>>>16,W++);Q.highWaterMark=W}return L<=Q.length?L:Q.ended?Q.length:(Q.needReadable=!0,0)}function p(L){var Q=L._readableState;b(\"emitReadable\",Q.needReadable,Q.emittedReadable);Q.needReadable=!1;Q.emittedReadable||(b(\"emitReadable\",Q.flowing),Q.emittedReadable=!0,P.nextTick(n,L))}function n(L){var Q=L._readableState;b(\"emitReadable_\",Q.destroyed,Q.length,Q.ended);Q.destroyed||!Q.length&&!Q.ended||(L.emit(\"readable\"),Q.emittedReadable=\n!1);Q.needReadable=!Q.flowing&&!Q.ended&&Q.length<=Q.highWaterMark;H(L)}function l(L,Q){Q.readingMore||(Q.readingMore=!0,P.nextTick(h,L,Q))}function h(L,Q){for(;!Q.reading&&!Q.ended&&(Q.length<Q.highWaterMark||Q.flowing&&0===Q.length);){var W=Q.length;b(\"maybeReadMore read 0\");L.read(0);if(W===Q.length)break}Q.readingMore=!1}function k(L){return function(){var Q=L._readableState;b(\"pipeOnDrain\",Q.awaitDrain);Q.awaitDrain&&Q.awaitDrain--;0===Q.awaitDrain&&L.listeners(\"data\").length&&(Q.flowing=!0,\nH(L))}}function t(L){var Q=L._readableState;Q.readableListening=0<L.listenerCount(\"readable\");Q.resumeScheduled&&!Q.paused?Q.flowing=!0:0<L.listenerCount(\"data\")&&L.resume()}function B(L){b(\"readable nexttick read 0\");L.read(0)}function E(L,Q){b(\"resume\",Q.reading);Q.reading||L.read(0);Q.resumeScheduled=!1;L.emit(\"resume\");H(L);Q.flowing&&!Q.reading&&L.read(0)}function H(L){var Q=L._readableState;for(b(\"flow\",Q.flowing);Q.flowing&&null!==L.read(););}function D(L,Q){if(0===Q.length)return null;Q.objectMode?\nL=Q.buffer.shift():!L||L>=Q.length?(L=Q.decoder?Q.buffer.join(\"\"):1===Q.buffer.length?Q.buffer.first():Q.buffer.concat(Q.length),Q.buffer.clear()):L=Q.buffer.consume(L,Q.decoder);return L}function C(L){var Q=L._readableState;b(\"endReadable\",Q.endEmitted);Q.endEmitted||(Q.ended=!0,P.nextTick(I,Q,L))}function I(L,Q){b(\"endReadableNT\",L.endEmitted,L.length);L.endEmitted||0!==L.length||(L.endEmitted=!0,Q.readable=!1,Q.emit(\"end\"),L.autoDestroy&&(L=Q._writableState,(!L||L.autoDestroy&&L.finished)&&Q.destroy()))}\nfunction M(L,Q){for(var W=0,Z=L.length;W<Z;W++)if(L[W]===Q)return W;return-1}var P=A(1);\"use strict\";V.exports=r;var J;r.ReadableState=G;A(113);var T=A(114),N=A(53).Buffer,a=(\"undefined\"!==typeof S?S:\"undefined\"!==typeof window?window:\"undefined\"!==typeof self?self:{}).Uint8Array||function(){};S=A(6);var b=S&&S.debuglog?S.debuglog(\"stream\"):function(){};var c=A(115);S=A(116);var d=A(118).getHighWaterMark;V=A(117).codes;var f=V.ERR_INVALID_ARG_TYPE,g=V.ERR_STREAM_PUSH_AFTER_EOF,m=V.ERR_METHOD_NOT_IMPLEMENTED,\nw=V.ERR_STREAM_UNSHIFT_AFTER_END_EVENT,x,z,v;A(76)(r,T);var R=S.errorOrDestroy,O=[\"error\",\"close\",\"destroy\",\"pause\",\"resume\"];Object.defineProperty(r.prototype,\"destroyed\",{enumerable:!1,get:function(){return void 0===this._readableState?!1:this._readableState.destroyed},set:function(L){this._readableState&&(this._readableState.destroyed=L)}});r.prototype.destroy=S.destroy;r.prototype._undestroy=S.undestroy;r.prototype._destroy=function(L,Q){Q(L)};r.prototype.push=function(L,Q){var W=this._readableState;\nif(W.objectMode)var Z=!0;else\"string\"===typeof L&&(Q=Q||W.defaultEncoding,Q!==W.encoding&&(L=N.from(L,Q),Q=\"\"),Z=!0);return y(this,L,Q,!1,Z)};r.prototype.unshift=function(L){return y(this,L,null,!0,!1)};r.prototype.isPaused=function(){return!1===this._readableState.flowing};r.prototype.setEncoding=function(L){x||(x=A(122).StringDecoder);L=new x(L);this._readableState.decoder=L;this._readableState.encoding=this._readableState.decoder.encoding;for(var Q=this._readableState.buffer.head,W=\"\";null!==Q;)W+=\nL.write(Q.data),Q=Q.next;this._readableState.buffer.clear();\"\"!==W&&this._readableState.buffer.push(W);this._readableState.length=W.length;return this};r.prototype.read=function(L){b(\"read\",L);L=parseInt(L,10);var Q=this._readableState,W=L;0!==L&&(Q.emittedReadable=!1);if(0===L&&Q.needReadable&&((0!==Q.highWaterMark?Q.length>=Q.highWaterMark:0<Q.length)||Q.ended))return b(\"read: emitReadable\",Q.length,Q.ended),0===Q.length&&Q.ended?C(this):p(this),null;L=u(L,Q);if(0===L&&Q.ended)return 0===Q.length&&\nC(this),null;var Z=Q.needReadable;b(\"need readable\",Z);if(0===Q.length||Q.length-L<Q.highWaterMark)Z=!0,b(\"length less than watermark\",Z);Q.ended||Q.reading?b(\"reading or ended\",!1):Z&&(b(\"do read\"),Q.reading=!0,Q.sync=!0,0===Q.length&&(Q.needReadable=!0),this._read(Q.highWaterMark),Q.sync=!1,Q.reading||(L=u(W,Q)));Z=0<L?D(L,Q):null;null===Z?(Q.needReadable=Q.length<=Q.highWaterMark,L=0):(Q.length-=L,Q.awaitDrain=0);0===Q.length&&(Q.ended||(Q.needReadable=!0),W!==L&&Q.ended&&C(this));null!==Z&&this.emit(\"data\",\nZ);return Z};r.prototype._read=function(L){R(this,new m(\"_read()\"))};r.prototype.pipe=function(L,Q){function W(ia,na){b(\"onunpipe\");ia===ea&&na&&!1===na.hasUnpiped&&(na.hasUnpiped=!0,b(\"cleanup\"),L.removeListener(\"close\",Y),L.removeListener(\"finish\",aa),L.removeListener(\"drain\",ka),L.removeListener(\"error\",X),L.removeListener(\"unpipe\",W),ea.removeListener(\"end\",Z),ea.removeListener(\"end\",ca),ea.removeListener(\"data\",da),la=!0,!ja.awaitDrain||L._writableState&&!L._writableState.needDrain||ka())}function Z(){b(\"onend\");\nL.end()}function da(ia){b(\"ondata\");ia=L.write(ia);b(\"dest.write\",ia);!1===ia&&((1===ja.pipesCount&&ja.pipes===L||1<ja.pipesCount&&-1!==M(ja.pipes,L))&&!la&&(b(\"false write response, pause\",ja.awaitDrain),ja.awaitDrain++),ea.pause())}function X(ia){b(\"onerror\",ia);ca();L.removeListener(\"error\",X);0===L.listeners(\"error\").length&&R(L,ia)}function Y(){L.removeListener(\"finish\",aa);ca()}function aa(){b(\"onfinish\");L.removeListener(\"close\",Y);ca()}function ca(){b(\"unpipe\");ea.unpipe(L)}var ea=this,ja=\nthis._readableState;switch(ja.pipesCount){case 0:ja.pipes=L;break;case 1:ja.pipes=[ja.pipes,L];break;default:ja.pipes.push(L)}ja.pipesCount+=1;b(\"pipe count\\x3d%d opts\\x3d%j\",ja.pipesCount,Q);Q=Q&&!1===Q.end||L===P.stdout||L===P.stderr?ca:Z;if(ja.endEmitted)P.nextTick(Q);else ea.once(\"end\",Q);L.on(\"unpipe\",W);var ka=k(ea);L.on(\"drain\",ka);var la=!1;ea.on(\"data\",da);F(L,\"error\",X);L.once(\"close\",Y);L.once(\"finish\",aa);L.emit(\"pipe\",ea);ja.flowing||(b(\"pipe resume\"),ea.resume());return L};r.prototype.unpipe=\nfunction(L){var Q=this._readableState,W={hasUnpiped:!1};if(0===Q.pipesCount)return this;if(1===Q.pipesCount){if(L&&L!==Q.pipes)return this;L||(L=Q.pipes);Q.pipes=null;Q.pipesCount=0;Q.flowing=!1;L&&L.emit(\"unpipe\",this,W);return this}if(!L){L=Q.pipes;W=Q.pipesCount;Q.pipes=null;Q.pipesCount=0;Q.flowing=!1;for(Q=0;Q<W;Q++)L[Q].emit(\"unpipe\",this,{hasUnpiped:!1});return this}var Z=M(Q.pipes,L);if(-1===Z)return this;Q.pipes.splice(Z,1);--Q.pipesCount;1===Q.pipesCount&&(Q.pipes=Q.pipes[0]);L.emit(\"unpipe\",\nthis,W);return this};r.prototype.on=function(L,Q){Q=T.prototype.on.call(this,L,Q);var W=this._readableState;\"data\"===L?(W.readableListening=0<this.listenerCount(\"readable\"),!1!==W.flowing&&this.resume()):\"readable\"!==L||W.endEmitted||W.readableListening||(W.readableListening=W.needReadable=!0,W.flowing=!1,W.emittedReadable=!1,b(\"on readable\",W.length,W.reading),W.length?p(this):W.reading||P.nextTick(B,this));return Q};r.prototype.addListener=r.prototype.on;r.prototype.removeListener=function(L,Q){Q=\nT.prototype.removeListener.call(this,L,Q);\"readable\"===L&&P.nextTick(t,this);return Q};r.prototype.removeAllListeners=function(L){var Q=T.prototype.removeAllListeners.apply(this,arguments);\"readable\"!==L&&void 0!==L||P.nextTick(t,this);return Q};r.prototype.resume=function(){var L=this._readableState;L.flowing||(b(\"resume\"),L.flowing=!L.readableListening,L.resumeScheduled||(L.resumeScheduled=!0,P.nextTick(E,this,L)));L.paused=!1;return this};r.prototype.pause=function(){b(\"call pause flowing\\x3d%j\",\nthis._readableState.flowing);!1!==this._readableState.flowing&&(b(\"pause\"),this._readableState.flowing=!1,this.emit(\"pause\"));this._readableState.paused=!0;return this};r.prototype.wrap=function(L){var Q=this,W=this._readableState,Z=!1;L.on(\"end\",function(){b(\"wrapped end\");if(W.decoder&&!W.ended){var X=W.decoder.end();X&&X.length&&Q.push(X)}Q.push(null)});L.on(\"data\",function(X){b(\"wrapped data\");W.decoder&&(X=W.decoder.write(X));W.objectMode&&(null===X||void 0===X)||!(W.objectMode||X&&X.length)||\nQ.push(X)||(Z=!0,L.pause())});for(var da in L)void 0===this[da]&&\"function\"===typeof L[da]&&(this[da]=function(X){return function(){return L[X].apply(L,arguments)}}(da));for(da=0;da<O.length;da++)L.on(O[da],this.emit.bind(this,O[da]));this._read=function(X){b(\"wrapped _read\",X);Z&&(Z=!1,L.resume())};return this};\"function\"===typeof Symbol&&(r.prototype[Symbol.asyncIterator]=function(){void 0===z&&(z=A(124));return z(this)});Object.defineProperty(r.prototype,\"readableHighWaterMark\",{enumerable:!1,\nget:function(){return this._readableState.highWaterMark}});Object.defineProperty(r.prototype,\"readableBuffer\",{enumerable:!1,get:function(){return this._readableState&&this._readableState.buffer}});Object.defineProperty(r.prototype,\"readableFlowing\",{enumerable:!1,get:function(){return this._readableState.flowing},set:function(L){this._readableState&&(this._readableState.flowing=L)}});r._fromList=D;Object.defineProperty(r.prototype,\"readableLength\",{enumerable:!1,get:function(){return this._readableState.length}});\n\"function\"===typeof Symbol&&(r.from=function(L,Q){void 0===v&&(v=A(125));return v(r,L,Q)})}","~:source","shadow$provide[126] = function(global,require,module,exports) {\nvar process = require('process');\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nmodule.exports = Readable;\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n\n/*<replacement>*/\nvar EE = require('events').EventEmitter;\nvar EElistenerCount = function EElistenerCount(emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\nvar Buffer = require('buffer').Buffer;\nvar OurUint8Array = (typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\n/*<replacement>*/\nvar debugUtil = require('util');\nvar debug;\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function debug() {};\n}\n/*</replacement>*/\n\nvar BufferList = require('./internal/streams/buffer_list');\nvar destroyImpl = require('./internal/streams/destroy');\nvar _require = require('./internal/streams/state'),\n  getHighWaterMark = _require.getHighWaterMark;\nvar _require$codes = require('../errors').codes,\n  ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,\n  ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,\n  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n  ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;\n\n// Lazy loaded to improve the startup performance.\nvar StringDecoder;\nvar createReadableStreamAsyncIterator;\nvar from;\nrequire('inherits')(Readable, Stream);\nvar errorOrDestroy = destroyImpl.errorOrDestroy;\nvar kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];\nfunction prependListener(emitter, event, fn) {\n  // Sadly this is not cacheable as some libraries bundle their own\n  // event emitter implementation with them.\n  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);\n\n  // This is a hack to make sure that our error handler is attached before any\n  // userland ones.  NEVER DO THIS. This is here only because this code needs\n  // to continue to work with older versions of Node.js that do not include\n  // the prependListener() method. The goal is to eventually remove this hack.\n  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\n}\nfunction ReadableState(options, stream, isDuplex) {\n  Duplex = Duplex || require('./_stream_duplex');\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex;\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex);\n\n  // A linked list is used to store data chunks instead of an array because the\n  // linked list can remove elements from the beginning faster than\n  // array.shift()\n  this.buffer = new BufferList();\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // a flag to be able to tell if the event 'readable'/'data' is emitted\n  // immediately, or on a later tick.  We set this to true at first, because\n  // any actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first read call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n  this.paused = true;\n\n  // Should close be emitted on destroy. Defaults to true.\n  this.emitClose = options.emitClose !== false;\n\n  // Should .destroy() be called after 'end' (and potentially 'finish')\n  this.autoDestroy = !!options.autoDestroy;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\nfunction Readable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n  if (!(this instanceof Readable)) return new Readable(options);\n\n  // Checking for a Stream.Duplex instance is faster here instead of inside\n  // the ReadableState constructor, at least with V8 6.5\n  var isDuplex = this instanceof Duplex;\n  this._readableState = new ReadableState(options, this, isDuplex);\n\n  // legacy\n  this.readable = true;\n  if (options) {\n    if (typeof options.read === 'function') this._read = options.read;\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n  }\n  Stream.call(this);\n}\nObject.defineProperty(Readable.prototype, 'destroyed', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    if (this._readableState === undefined) {\n      return false;\n    }\n    return this._readableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._readableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._readableState.destroyed = value;\n  }\n});\nReadable.prototype.destroy = destroyImpl.destroy;\nReadable.prototype._undestroy = destroyImpl.undestroy;\nReadable.prototype._destroy = function (err, cb) {\n  cb(err);\n};\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n  var skipChunkCheck;\n  if (!state.objectMode) {\n    if (typeof chunk === 'string') {\n      encoding = encoding || state.defaultEncoding;\n      if (encoding !== state.encoding) {\n        chunk = Buffer.from(chunk, encoding);\n        encoding = '';\n      }\n      skipChunkCheck = true;\n    }\n  } else {\n    skipChunkCheck = true;\n  }\n  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function (chunk) {\n  return readableAddChunk(this, chunk, null, true, false);\n};\nfunction readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n  debug('readableAddChunk', chunk);\n  var state = stream._readableState;\n  if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else {\n    var er;\n    if (!skipChunkCheck) er = chunkInvalid(state, chunk);\n    if (er) {\n      errorOrDestroy(stream, er);\n    } else if (state.objectMode || chunk && chunk.length > 0) {\n      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {\n        chunk = _uint8ArrayToBuffer(chunk);\n      }\n      if (addToFront) {\n        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);\n      } else if (state.ended) {\n        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());\n      } else if (state.destroyed) {\n        return false;\n      } else {\n        state.reading = false;\n        if (state.decoder && !encoding) {\n          chunk = state.decoder.write(chunk);\n          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);\n        } else {\n          addChunk(stream, state, chunk, false);\n        }\n      }\n    } else if (!addToFront) {\n      state.reading = false;\n      maybeReadMore(stream, state);\n    }\n  }\n\n  // We can push more data if we are below the highWaterMark.\n  // Also, if we have no data yet, we can stand some more bytes.\n  // This is to work around cases where hwm=0, such as the repl.\n  return !state.ended && (state.length < state.highWaterMark || state.length === 0);\n}\nfunction addChunk(stream, state, chunk, addToFront) {\n  if (state.flowing && state.length === 0 && !state.sync) {\n    state.awaitDrain = 0;\n    stream.emit('data', chunk);\n  } else {\n    // update the buffer info.\n    state.length += state.objectMode ? 1 : chunk.length;\n    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n    if (state.needReadable) emitReadable(stream);\n  }\n  maybeReadMore(stream, state);\n}\nfunction chunkInvalid(state, chunk) {\n  var er;\n  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);\n  }\n  return er;\n}\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n};\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n  var decoder = new StringDecoder(enc);\n  this._readableState.decoder = decoder;\n  // If setEncoding(null), decoder.encoding equals utf8\n  this._readableState.encoding = this._readableState.decoder.encoding;\n\n  // Iterate over current buffer to convert already stored Buffers:\n  var p = this._readableState.buffer.head;\n  var content = '';\n  while (p !== null) {\n    content += decoder.write(p.data);\n    p = p.next;\n  }\n  this._readableState.buffer.clear();\n  if (content !== '') this._readableState.buffer.push(content);\n  this._readableState.length = content.length;\n  return this;\n};\n\n// Don't raise the hwm > 1GB\nvar MAX_HWM = 0x40000000;\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\n    // tiny amounts\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n  return n;\n}\n\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction howMuchToRead(n, state) {\n  if (n <= 0 || state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return 1;\n  if (n !== n) {\n    // Only flow one buffer at a time\n    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\n  }\n  // If we're asking for more than the current hwm, then raise the hwm.\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n  if (n <= state.length) return n;\n  // Don't have enough\n  if (!state.ended) {\n    state.needReadable = true;\n    return 0;\n  }\n  return state.length;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  n = parseInt(n, 10);\n  var state = this._readableState;\n  var nOrig = n;\n  if (n !== 0) state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n  debug('need readable', doRead);\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  }\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  } else if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0) state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n    // If _read pushed data synchronously, then `reading` will be false,\n    // and we need to re-evaluate how much data we can return to the user.\n    if (!state.reading) n = howMuchToRead(nOrig, state);\n  }\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n  if (ret === null) {\n    state.needReadable = state.length <= state.highWaterMark;\n    n = 0;\n  } else {\n    state.length -= n;\n    state.awaitDrain = 0;\n  }\n  if (state.length === 0) {\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (!state.ended) state.needReadable = true;\n\n    // If we tried to read() past the EOF, then emit end on the next tick.\n    if (nOrig !== n && state.ended) endReadable(this);\n  }\n  if (ret !== null) this.emit('data', ret);\n  return ret;\n};\nfunction onEofChunk(stream, state) {\n  debug('onEofChunk');\n  if (state.ended) return;\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n  if (state.sync) {\n    // if we are sync, wait until next tick to emit the data.\n    // Otherwise we risk emitting data in the flow()\n    // the readable code triggers during a read() call\n    emitReadable(stream);\n  } else {\n    // emit 'readable' now to make sure it gets picked up.\n    state.needReadable = false;\n    if (!state.emittedReadable) {\n      state.emittedReadable = true;\n      emitReadable_(stream);\n    }\n  }\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  debug('emitReadable', state.needReadable, state.emittedReadable);\n  state.needReadable = false;\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    process.nextTick(emitReadable_, stream);\n  }\n}\nfunction emitReadable_(stream) {\n  var state = stream._readableState;\n  debug('emitReadable_', state.destroyed, state.length, state.ended);\n  if (!state.destroyed && (state.length || state.ended)) {\n    stream.emit('readable');\n    state.emittedReadable = false;\n  }\n\n  // The stream needs another readable event if\n  // 1. It is not flowing, as the flow mechanism will take\n  //    care of it.\n  // 2. It is not ended.\n  // 3. It is below the highWaterMark, so we can schedule\n  //    another readable later.\n  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;\n  flow(stream);\n}\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    process.nextTick(maybeReadMore_, stream, state);\n  }\n}\nfunction maybeReadMore_(stream, state) {\n  // Attempt to read more data if we should.\n  //\n  // The conditions for reading more data are (one of):\n  // - Not enough data buffered (state.length < state.highWaterMark). The loop\n  //   is responsible for filling the buffer with enough data if such data\n  //   is available. If highWaterMark is 0 and we are not in the flowing mode\n  //   we should _not_ attempt to buffer any extra data. We'll get more data\n  //   when the stream consumer calls read() instead.\n  // - No data in the buffer, and the stream is in flowing mode. In this mode\n  //   the loop below is responsible for ensuring read() is called. Failing to\n  //   call read here would abort the flow and there's no other mechanism for\n  //   continuing the flow if the stream consumer has just subscribed to the\n  //   'data' event.\n  //\n  // In addition to the above conditions to keep reading data, the following\n  // conditions prevent the data from being read:\n  // - The stream has ended (state.ended).\n  // - There is already a pending 'read' operation (state.reading). This is a\n  //   case where the the stream has called the implementation defined _read()\n  //   method, but they are processing the call asynchronously and have _not_\n  //   called push() with new data. In this case we skip performing more\n  //   read()s. The execution ends in this method again after the _read() ends\n  //   up calling push() with more data.\n  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {\n    var len = state.length;\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function (n) {\n  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));\n};\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n  var endFn = doEnd ? onend : unpipe;\n  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable, unpipeInfo) {\n    debug('onunpipe');\n    if (readable === src) {\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n        unpipeInfo.hasUnpiped = true;\n        cleanup();\n      }\n    }\n  }\n  function onend() {\n    debug('onend');\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n  var cleanedUp = false;\n  function cleanup() {\n    debug('cleanup');\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', unpipe);\n    src.removeListener('data', ondata);\n    cleanedUp = true;\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n  src.on('data', ondata);\n  function ondata(chunk) {\n    debug('ondata');\n    var ret = dest.write(chunk);\n    debug('dest.write', ret);\n    if (ret === false) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      // => Check whether `dest` is still a piping destination.\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n        debug('false write response, pause', state.awaitDrain);\n        state.awaitDrain++;\n      }\n      src.pause();\n    }\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);\n  }\n\n  // Make sure our error handler is attached before userland ones.\n  prependListener(dest, 'error', onerror);\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n  return dest;\n};\nfunction pipeOnDrain(src) {\n  return function pipeOnDrainFunctionResult() {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n  var unpipeInfo = {\n    hasUnpiped: false\n  };\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0) return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n    if (!dest) dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this, unpipeInfo);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    for (var i = 0; i < len; i++) dests[i].emit('unpipe', this, {\n      hasUnpiped: false\n    });\n    return this;\n  }\n\n  // try to find the right one.\n  var index = indexOf(state.pipes, dest);\n  if (index === -1) return this;\n  state.pipes.splice(index, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n  dest.emit('unpipe', this, unpipeInfo);\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n  var state = this._readableState;\n  if (ev === 'data') {\n    // update readableListening so that resume() may be a no-op\n    // a few lines down. This is needed to support once('readable').\n    state.readableListening = this.listenerCount('readable') > 0;\n\n    // Try start flowing on next tick if stream isn't explicitly paused\n    if (state.flowing !== false) this.resume();\n  } else if (ev === 'readable') {\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true;\n      state.flowing = false;\n      state.emittedReadable = false;\n      debug('on readable', state.length, state.reading);\n      if (state.length) {\n        emitReadable(this);\n      } else if (!state.reading) {\n        process.nextTick(nReadingNextTick, this);\n      }\n    }\n  }\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\nReadable.prototype.removeListener = function (ev, fn) {\n  var res = Stream.prototype.removeListener.call(this, ev, fn);\n  if (ev === 'readable') {\n    // We need to check if there is someone still listening to\n    // readable and reset the state. However this needs to happen\n    // after readable has been emitted but before I/O (nextTick) to\n    // support once('readable', fn) cycles. This means that calling\n    // resume within the same tick will have no\n    // effect.\n    process.nextTick(updateReadableListening, this);\n  }\n  return res;\n};\nReadable.prototype.removeAllListeners = function (ev) {\n  var res = Stream.prototype.removeAllListeners.apply(this, arguments);\n  if (ev === 'readable' || ev === undefined) {\n    // We need to check if there is someone still listening to\n    // readable and reset the state. However this needs to happen\n    // after readable has been emitted but before I/O (nextTick) to\n    // support once('readable', fn) cycles. This means that calling\n    // resume within the same tick will have no\n    // effect.\n    process.nextTick(updateReadableListening, this);\n  }\n  return res;\n};\nfunction updateReadableListening(self) {\n  var state = self._readableState;\n  state.readableListening = self.listenerCount('readable') > 0;\n  if (state.resumeScheduled && !state.paused) {\n    // flowing needs to be set to true now, otherwise\n    // the upcoming resume will not flow.\n    state.flowing = true;\n\n    // crude way to check if we should resume\n  } else if (self.listenerCount('data') > 0) {\n    self.resume();\n  }\n}\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n}\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n  if (!state.flowing) {\n    debug('resume');\n    // we flow only if there is no one listening\n    // for readable, but we still have to call\n    // resume()\n    state.flowing = !state.readableListening;\n    resume(this, state);\n  }\n  state.paused = false;\n  return this;\n};\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    process.nextTick(resume_, stream, state);\n  }\n}\nfunction resume_(stream, state) {\n  debug('resume', state.reading);\n  if (!state.reading) {\n    stream.read(0);\n  }\n  state.resumeScheduled = false;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n  if (this._readableState.flowing !== false) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n  this._readableState.paused = true;\n  return this;\n};\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n  while (state.flowing && stream.read() !== null);\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function (stream) {\n  var _this = this;\n  var state = this._readableState;\n  var paused = false;\n  stream.on('end', function () {\n    debug('wrapped end');\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) _this.push(chunk);\n    }\n    _this.push(null);\n  });\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk);\n\n    // don't skip over falsy values in objectMode\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n    var ret = _this.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function methodWrap(method) {\n        return function methodWrapReturnFunction() {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  }\n\n  // proxy certain important events.\n  for (var n = 0; n < kProxyEvents.length; n++) {\n    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n  }\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  this._read = function (n) {\n    debug('wrapped _read', n);\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n  return this;\n};\nif (typeof Symbol === 'function') {\n  Readable.prototype[Symbol.asyncIterator] = function () {\n    if (createReadableStreamAsyncIterator === undefined) {\n      createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');\n    }\n    return createReadableStreamAsyncIterator(this);\n  };\n}\nObject.defineProperty(Readable.prototype, 'readableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState.highWaterMark;\n  }\n});\nObject.defineProperty(Readable.prototype, 'readableBuffer', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState && this._readableState.buffer;\n  }\n});\nObject.defineProperty(Readable.prototype, 'readableFlowing', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState.flowing;\n  },\n  set: function set(state) {\n    if (this._readableState) {\n      this._readableState.flowing = state;\n    }\n  }\n});\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\nObject.defineProperty(Readable.prototype, 'readableLength', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState.length;\n  }\n});\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromList(n, state) {\n  // nothing buffered\n  if (state.length === 0) return null;\n  var ret;\n  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n    // read it all, truncate the list\n    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);\n    state.buffer.clear();\n  } else {\n    // read part of list\n    ret = state.buffer.consume(n, state.decoder);\n  }\n  return ret;\n}\nfunction endReadable(stream) {\n  var state = stream._readableState;\n  debug('endReadable', state.endEmitted);\n  if (!state.endEmitted) {\n    state.ended = true;\n    process.nextTick(endReadableNT, state, stream);\n  }\n}\nfunction endReadableNT(state, stream) {\n  debug('endReadableNT', state.endEmitted, state.length);\n\n  // Check that we didn't get one last unshift.\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n    if (state.autoDestroy) {\n      // In case of duplex streams we need a way to detect\n      // if the writable side is ready for autoDestroy as well\n      var wState = stream._writableState;\n      if (!wState || wState.autoDestroy && wState.finished) {\n        stream.destroy();\n      }\n    }\n  }\n}\nif (typeof Symbol === 'function') {\n  Readable.from = function (iterable, opts) {\n    if (from === undefined) {\n      from = require('./internal/streams/from');\n    }\n    return from(Readable, iterable, opts);\n  };\n}\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$hash_base$node_modules$readable_stream$errors","~$module$node_modules$hash_base$node_modules$readable_stream$lib$_stream_duplex","~$module$node_modules$process$browser","~$module$node_modules$hash_base$node_modules$readable_stream$lib$internal$streams$stream_browser","~$module$node_modules$hash_base$node_modules$readable_stream$lib$internal$streams$async_iterator","~$module$node_modules$events$events","~$shadow$empty","~$module$node_modules$hash_base$node_modules$readable_stream$lib$internal$streams$destroy","~$shadow.js","~$module$node_modules$inherits$inherits_browser","~$module$node_modules$hash_base$node_modules$readable_stream$lib$internal$streams$from_browser","~$module$node_modules$hash_base$node_modules$readable_stream$lib$internal$streams$state","~$module$node_modules$hash_base$node_modules$readable_stream$lib$internal$streams$buffer_list","~$module$node_modules$buffer$index","~$module$node_modules$string_decoder$lib$string_decoder"]],"~:properties",["^5",["_destroy","_readableState","reading","emittedReadable","_undestroy","_fromList","readableFlowing","awaitDrain","readable","pipesCount","defaultEncoding","ended","setEncoding","resumeScheduled","encoding","read","push","removeAllListeners","readableLength","flowing","wrap","_read","buffer","unshift","paused","removeListener","sync","destroy","unpipe","enumerable","addListener","hasUnpiped","pause","readingMore","needReadable","pipe","on","highWaterMark","pipes","length","endEmitted","isPaused","from","autoDestroy","readableHighWaterMark","set","readableBuffer","destroyed","objectMode","get","decoder","ReadableState","readableListening","emitClose","resume"]],"~:compiled-at",1695041440798,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$hash_base$node_modules$readable_stream$lib$_stream_readable.js\",\n\"lineCount\":24,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/hash-base/node_modules/readable-stream/lib/_stream_readable.js\"],\n\"sourcesContent\":[\"shadow$provide[126] = function(global,require,module,exports) {\\nvar process = require('process');\\n// Copyright Joyent, Inc. and other Node contributors.\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a\\n// copy of this software and associated documentation files (the\\n// \\\"Software\\\"), to deal in the Software without restriction, including\\n// without limitation the rights to use, copy, modify, merge, publish,\\n// distribute, sublicense, and/or sell copies of the Software, and to permit\\n// persons to whom the Software is furnished to do so, subject to the\\n// following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included\\n// in all copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\\n\\n'use strict';\\n\\nmodule.exports = Readable;\\n\\n/*<replacement>*/\\nvar Duplex;\\n/*</replacement>*/\\n\\nReadable.ReadableState = ReadableState;\\n\\n/*<replacement>*/\\nvar EE = require('events').EventEmitter;\\nvar EElistenerCount = function EElistenerCount(emitter, type) {\\n  return emitter.listeners(type).length;\\n};\\n/*</replacement>*/\\n\\n/*<replacement>*/\\nvar Stream = require('./internal/streams/stream');\\n/*</replacement>*/\\n\\nvar Buffer = require('buffer').Buffer;\\nvar OurUint8Array = (typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};\\nfunction _uint8ArrayToBuffer(chunk) {\\n  return Buffer.from(chunk);\\n}\\nfunction _isUint8Array(obj) {\\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\\n}\\n\\n/*<replacement>*/\\nvar debugUtil = require('util');\\nvar debug;\\nif (debugUtil && debugUtil.debuglog) {\\n  debug = debugUtil.debuglog('stream');\\n} else {\\n  debug = function debug() {};\\n}\\n/*</replacement>*/\\n\\nvar BufferList = require('./internal/streams/buffer_list');\\nvar destroyImpl = require('./internal/streams/destroy');\\nvar _require = require('./internal/streams/state'),\\n  getHighWaterMark = _require.getHighWaterMark;\\nvar _require$codes = require('../errors').codes,\\n  ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,\\n  ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,\\n  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\\n  ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;\\n\\n// Lazy loaded to improve the startup performance.\\nvar StringDecoder;\\nvar createReadableStreamAsyncIterator;\\nvar from;\\nrequire('inherits')(Readable, Stream);\\nvar errorOrDestroy = destroyImpl.errorOrDestroy;\\nvar kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];\\nfunction prependListener(emitter, event, fn) {\\n  // Sadly this is not cacheable as some libraries bundle their own\\n  // event emitter implementation with them.\\n  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);\\n\\n  // This is a hack to make sure that our error handler is attached before any\\n  // userland ones.  NEVER DO THIS. This is here only because this code needs\\n  // to continue to work with older versions of Node.js that do not include\\n  // the prependListener() method. The goal is to eventually remove this hack.\\n  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\\n}\\nfunction ReadableState(options, stream, isDuplex) {\\n  Duplex = Duplex || require('./_stream_duplex');\\n  options = options || {};\\n\\n  // Duplex streams are both readable and writable, but share\\n  // the same options object.\\n  // However, some cases require setting options to different\\n  // values for the readable and the writable sides of the duplex stream.\\n  // These options can be provided separately as readableXXX and writableXXX.\\n  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex;\\n\\n  // object stream flag. Used to make read(n) ignore n and to\\n  // make all the buffer merging and length checks go away\\n  this.objectMode = !!options.objectMode;\\n  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;\\n\\n  // the point at which it stops calling _read() to fill the buffer\\n  // Note: 0 is a valid value, means \\\"don't call _read preemptively ever\\\"\\n  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex);\\n\\n  // A linked list is used to store data chunks instead of an array because the\\n  // linked list can remove elements from the beginning faster than\\n  // array.shift()\\n  this.buffer = new BufferList();\\n  this.length = 0;\\n  this.pipes = null;\\n  this.pipesCount = 0;\\n  this.flowing = null;\\n  this.ended = false;\\n  this.endEmitted = false;\\n  this.reading = false;\\n\\n  // a flag to be able to tell if the event 'readable'/'data' is emitted\\n  // immediately, or on a later tick.  We set this to true at first, because\\n  // any actions that shouldn't happen until \\\"later\\\" should generally also\\n  // not happen before the first read call.\\n  this.sync = true;\\n\\n  // whenever we return null, then we set a flag to say\\n  // that we're awaiting a 'readable' event emission.\\n  this.needReadable = false;\\n  this.emittedReadable = false;\\n  this.readableListening = false;\\n  this.resumeScheduled = false;\\n  this.paused = true;\\n\\n  // Should close be emitted on destroy. Defaults to true.\\n  this.emitClose = options.emitClose !== false;\\n\\n  // Should .destroy() be called after 'end' (and potentially 'finish')\\n  this.autoDestroy = !!options.autoDestroy;\\n\\n  // has it been destroyed\\n  this.destroyed = false;\\n\\n  // Crypto is kind of old and crusty.  Historically, its default string\\n  // encoding is 'binary' so we have to make this configurable.\\n  // Everything else in the universe uses 'utf8', though.\\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\\n\\n  // the number of writers that are awaiting a drain event in .pipe()s\\n  this.awaitDrain = 0;\\n\\n  // if true, a maybeReadMore has been scheduled\\n  this.readingMore = false;\\n  this.decoder = null;\\n  this.encoding = null;\\n  if (options.encoding) {\\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\\n    this.decoder = new StringDecoder(options.encoding);\\n    this.encoding = options.encoding;\\n  }\\n}\\nfunction Readable(options) {\\n  Duplex = Duplex || require('./_stream_duplex');\\n  if (!(this instanceof Readable)) return new Readable(options);\\n\\n  // Checking for a Stream.Duplex instance is faster here instead of inside\\n  // the ReadableState constructor, at least with V8 6.5\\n  var isDuplex = this instanceof Duplex;\\n  this._readableState = new ReadableState(options, this, isDuplex);\\n\\n  // legacy\\n  this.readable = true;\\n  if (options) {\\n    if (typeof options.read === 'function') this._read = options.read;\\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\\n  }\\n  Stream.call(this);\\n}\\nObject.defineProperty(Readable.prototype, 'destroyed', {\\n  // making it explicit this property is not enumerable\\n  // because otherwise some prototype manipulation in\\n  // userland will fail\\n  enumerable: false,\\n  get: function get() {\\n    if (this._readableState === undefined) {\\n      return false;\\n    }\\n    return this._readableState.destroyed;\\n  },\\n  set: function set(value) {\\n    // we ignore the value if the stream\\n    // has not been initialized yet\\n    if (!this._readableState) {\\n      return;\\n    }\\n\\n    // backward compatibility, the user is explicitly\\n    // managing destroyed\\n    this._readableState.destroyed = value;\\n  }\\n});\\nReadable.prototype.destroy = destroyImpl.destroy;\\nReadable.prototype._undestroy = destroyImpl.undestroy;\\nReadable.prototype._destroy = function (err, cb) {\\n  cb(err);\\n};\\n\\n// Manually shove something into the read() buffer.\\n// This returns true if the highWaterMark has not been hit yet,\\n// similar to how Writable.write() returns true if you should\\n// write() some more.\\nReadable.prototype.push = function (chunk, encoding) {\\n  var state = this._readableState;\\n  var skipChunkCheck;\\n  if (!state.objectMode) {\\n    if (typeof chunk === 'string') {\\n      encoding = encoding || state.defaultEncoding;\\n      if (encoding !== state.encoding) {\\n        chunk = Buffer.from(chunk, encoding);\\n        encoding = '';\\n      }\\n      skipChunkCheck = true;\\n    }\\n  } else {\\n    skipChunkCheck = true;\\n  }\\n  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\\n};\\n\\n// Unshift should *always* be something directly out of read()\\nReadable.prototype.unshift = function (chunk) {\\n  return readableAddChunk(this, chunk, null, true, false);\\n};\\nfunction readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\\n  debug('readableAddChunk', chunk);\\n  var state = stream._readableState;\\n  if (chunk === null) {\\n    state.reading = false;\\n    onEofChunk(stream, state);\\n  } else {\\n    var er;\\n    if (!skipChunkCheck) er = chunkInvalid(state, chunk);\\n    if (er) {\\n      errorOrDestroy(stream, er);\\n    } else if (state.objectMode || chunk && chunk.length > 0) {\\n      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {\\n        chunk = _uint8ArrayToBuffer(chunk);\\n      }\\n      if (addToFront) {\\n        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);\\n      } else if (state.ended) {\\n        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());\\n      } else if (state.destroyed) {\\n        return false;\\n      } else {\\n        state.reading = false;\\n        if (state.decoder && !encoding) {\\n          chunk = state.decoder.write(chunk);\\n          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);\\n        } else {\\n          addChunk(stream, state, chunk, false);\\n        }\\n      }\\n    } else if (!addToFront) {\\n      state.reading = false;\\n      maybeReadMore(stream, state);\\n    }\\n  }\\n\\n  // We can push more data if we are below the highWaterMark.\\n  // Also, if we have no data yet, we can stand some more bytes.\\n  // This is to work around cases where hwm=0, such as the repl.\\n  return !state.ended && (state.length < state.highWaterMark || state.length === 0);\\n}\\nfunction addChunk(stream, state, chunk, addToFront) {\\n  if (state.flowing && state.length === 0 && !state.sync) {\\n    state.awaitDrain = 0;\\n    stream.emit('data', chunk);\\n  } else {\\n    // update the buffer info.\\n    state.length += state.objectMode ? 1 : chunk.length;\\n    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\\n    if (state.needReadable) emitReadable(stream);\\n  }\\n  maybeReadMore(stream, state);\\n}\\nfunction chunkInvalid(state, chunk) {\\n  var er;\\n  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\\n    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);\\n  }\\n  return er;\\n}\\nReadable.prototype.isPaused = function () {\\n  return this._readableState.flowing === false;\\n};\\n\\n// backwards compatibility.\\nReadable.prototype.setEncoding = function (enc) {\\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\\n  var decoder = new StringDecoder(enc);\\n  this._readableState.decoder = decoder;\\n  // If setEncoding(null), decoder.encoding equals utf8\\n  this._readableState.encoding = this._readableState.decoder.encoding;\\n\\n  // Iterate over current buffer to convert already stored Buffers:\\n  var p = this._readableState.buffer.head;\\n  var content = '';\\n  while (p !== null) {\\n    content += decoder.write(p.data);\\n    p = p.next;\\n  }\\n  this._readableState.buffer.clear();\\n  if (content !== '') this._readableState.buffer.push(content);\\n  this._readableState.length = content.length;\\n  return this;\\n};\\n\\n// Don't raise the hwm > 1GB\\nvar MAX_HWM = 0x40000000;\\nfunction computeNewHighWaterMark(n) {\\n  if (n >= MAX_HWM) {\\n    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.\\n    n = MAX_HWM;\\n  } else {\\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\\n    // tiny amounts\\n    n--;\\n    n |= n >>> 1;\\n    n |= n >>> 2;\\n    n |= n >>> 4;\\n    n |= n >>> 8;\\n    n |= n >>> 16;\\n    n++;\\n  }\\n  return n;\\n}\\n\\n// This function is designed to be inlinable, so please take care when making\\n// changes to the function body.\\nfunction howMuchToRead(n, state) {\\n  if (n <= 0 || state.length === 0 && state.ended) return 0;\\n  if (state.objectMode) return 1;\\n  if (n !== n) {\\n    // Only flow one buffer at a time\\n    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\\n  }\\n  // If we're asking for more than the current hwm, then raise the hwm.\\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\\n  if (n <= state.length) return n;\\n  // Don't have enough\\n  if (!state.ended) {\\n    state.needReadable = true;\\n    return 0;\\n  }\\n  return state.length;\\n}\\n\\n// you can override either this method, or the async _read(n) below.\\nReadable.prototype.read = function (n) {\\n  debug('read', n);\\n  n = parseInt(n, 10);\\n  var state = this._readableState;\\n  var nOrig = n;\\n  if (n !== 0) state.emittedReadable = false;\\n\\n  // if we're doing read(0) to trigger a readable event, but we\\n  // already have a bunch of data in the buffer, then just trigger\\n  // the 'readable' event and move on.\\n  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {\\n    debug('read: emitReadable', state.length, state.ended);\\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\\n    return null;\\n  }\\n  n = howMuchToRead(n, state);\\n\\n  // if we've ended, and we're now clear, then finish it up.\\n  if (n === 0 && state.ended) {\\n    if (state.length === 0) endReadable(this);\\n    return null;\\n  }\\n\\n  // All the actual chunk generation logic needs to be\\n  // *below* the call to _read.  The reason is that in certain\\n  // synthetic stream cases, such as passthrough streams, _read\\n  // may be a completely synchronous operation which may change\\n  // the state of the read buffer, providing enough data when\\n  // before there was *not* enough.\\n  //\\n  // So, the steps are:\\n  // 1. Figure out what the state of things will be after we do\\n  // a read from the buffer.\\n  //\\n  // 2. If that resulting state will trigger a _read, then call _read.\\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\\n  // deeply ugly to write APIs this way, but that still doesn't mean\\n  // that the Readable class should behave improperly, as streams are\\n  // designed to be sync/async agnostic.\\n  // Take note if the _read call is sync or async (ie, if the read call\\n  // has returned yet), so that we know whether or not it's safe to emit\\n  // 'readable' etc.\\n  //\\n  // 3. Actually pull the requested chunks out of the buffer and return.\\n\\n  // if we need a readable event, then we need to do some reading.\\n  var doRead = state.needReadable;\\n  debug('need readable', doRead);\\n\\n  // if we currently have less than the highWaterMark, then also read some\\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\\n    doRead = true;\\n    debug('length less than watermark', doRead);\\n  }\\n\\n  // however, if we've ended, then there's no point, and if we're already\\n  // reading, then it's unnecessary.\\n  if (state.ended || state.reading) {\\n    doRead = false;\\n    debug('reading or ended', doRead);\\n  } else if (doRead) {\\n    debug('do read');\\n    state.reading = true;\\n    state.sync = true;\\n    // if the length is currently zero, then we *need* a readable event.\\n    if (state.length === 0) state.needReadable = true;\\n    // call internal read method\\n    this._read(state.highWaterMark);\\n    state.sync = false;\\n    // If _read pushed data synchronously, then `reading` will be false,\\n    // and we need to re-evaluate how much data we can return to the user.\\n    if (!state.reading) n = howMuchToRead(nOrig, state);\\n  }\\n  var ret;\\n  if (n > 0) ret = fromList(n, state);else ret = null;\\n  if (ret === null) {\\n    state.needReadable = state.length <= state.highWaterMark;\\n    n = 0;\\n  } else {\\n    state.length -= n;\\n    state.awaitDrain = 0;\\n  }\\n  if (state.length === 0) {\\n    // If we have nothing in the buffer, then we want to know\\n    // as soon as we *do* get something into the buffer.\\n    if (!state.ended) state.needReadable = true;\\n\\n    // If we tried to read() past the EOF, then emit end on the next tick.\\n    if (nOrig !== n && state.ended) endReadable(this);\\n  }\\n  if (ret !== null) this.emit('data', ret);\\n  return ret;\\n};\\nfunction onEofChunk(stream, state) {\\n  debug('onEofChunk');\\n  if (state.ended) return;\\n  if (state.decoder) {\\n    var chunk = state.decoder.end();\\n    if (chunk && chunk.length) {\\n      state.buffer.push(chunk);\\n      state.length += state.objectMode ? 1 : chunk.length;\\n    }\\n  }\\n  state.ended = true;\\n  if (state.sync) {\\n    // if we are sync, wait until next tick to emit the data.\\n    // Otherwise we risk emitting data in the flow()\\n    // the readable code triggers during a read() call\\n    emitReadable(stream);\\n  } else {\\n    // emit 'readable' now to make sure it gets picked up.\\n    state.needReadable = false;\\n    if (!state.emittedReadable) {\\n      state.emittedReadable = true;\\n      emitReadable_(stream);\\n    }\\n  }\\n}\\n\\n// Don't emit readable right away in sync mode, because this can trigger\\n// another read() call => stack overflow.  This way, it might trigger\\n// a nextTick recursion warning, but that's not so bad.\\nfunction emitReadable(stream) {\\n  var state = stream._readableState;\\n  debug('emitReadable', state.needReadable, state.emittedReadable);\\n  state.needReadable = false;\\n  if (!state.emittedReadable) {\\n    debug('emitReadable', state.flowing);\\n    state.emittedReadable = true;\\n    process.nextTick(emitReadable_, stream);\\n  }\\n}\\nfunction emitReadable_(stream) {\\n  var state = stream._readableState;\\n  debug('emitReadable_', state.destroyed, state.length, state.ended);\\n  if (!state.destroyed && (state.length || state.ended)) {\\n    stream.emit('readable');\\n    state.emittedReadable = false;\\n  }\\n\\n  // The stream needs another readable event if\\n  // 1. It is not flowing, as the flow mechanism will take\\n  //    care of it.\\n  // 2. It is not ended.\\n  // 3. It is below the highWaterMark, so we can schedule\\n  //    another readable later.\\n  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;\\n  flow(stream);\\n}\\n\\n// at this point, the user has presumably seen the 'readable' event,\\n// and called read() to consume some data.  that may have triggered\\n// in turn another _read(n) call, in which case reading = true if\\n// it's in progress.\\n// However, if we're not ended, or reading, and the length < hwm,\\n// then go ahead and try to read some more preemptively.\\nfunction maybeReadMore(stream, state) {\\n  if (!state.readingMore) {\\n    state.readingMore = true;\\n    process.nextTick(maybeReadMore_, stream, state);\\n  }\\n}\\nfunction maybeReadMore_(stream, state) {\\n  // Attempt to read more data if we should.\\n  //\\n  // The conditions for reading more data are (one of):\\n  // - Not enough data buffered (state.length < state.highWaterMark). The loop\\n  //   is responsible for filling the buffer with enough data if such data\\n  //   is available. If highWaterMark is 0 and we are not in the flowing mode\\n  //   we should _not_ attempt to buffer any extra data. We'll get more data\\n  //   when the stream consumer calls read() instead.\\n  // - No data in the buffer, and the stream is in flowing mode. In this mode\\n  //   the loop below is responsible for ensuring read() is called. Failing to\\n  //   call read here would abort the flow and there's no other mechanism for\\n  //   continuing the flow if the stream consumer has just subscribed to the\\n  //   'data' event.\\n  //\\n  // In addition to the above conditions to keep reading data, the following\\n  // conditions prevent the data from being read:\\n  // - The stream has ended (state.ended).\\n  // - There is already a pending 'read' operation (state.reading). This is a\\n  //   case where the the stream has called the implementation defined _read()\\n  //   method, but they are processing the call asynchronously and have _not_\\n  //   called push() with new data. In this case we skip performing more\\n  //   read()s. The execution ends in this method again after the _read() ends\\n  //   up calling push() with more data.\\n  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {\\n    var len = state.length;\\n    debug('maybeReadMore read 0');\\n    stream.read(0);\\n    if (len === state.length)\\n      // didn't get any data, stop spinning.\\n      break;\\n  }\\n  state.readingMore = false;\\n}\\n\\n// abstract method.  to be overridden in specific implementation classes.\\n// call cb(er, data) where data is <= n in length.\\n// for virtual (non-string, non-buffer) streams, \\\"length\\\" is somewhat\\n// arbitrary, and perhaps not very meaningful.\\nReadable.prototype._read = function (n) {\\n  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));\\n};\\nReadable.prototype.pipe = function (dest, pipeOpts) {\\n  var src = this;\\n  var state = this._readableState;\\n  switch (state.pipesCount) {\\n    case 0:\\n      state.pipes = dest;\\n      break;\\n    case 1:\\n      state.pipes = [state.pipes, dest];\\n      break;\\n    default:\\n      state.pipes.push(dest);\\n      break;\\n  }\\n  state.pipesCount += 1;\\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\\n  var endFn = doEnd ? onend : unpipe;\\n  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);\\n  dest.on('unpipe', onunpipe);\\n  function onunpipe(readable, unpipeInfo) {\\n    debug('onunpipe');\\n    if (readable === src) {\\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\\n        unpipeInfo.hasUnpiped = true;\\n        cleanup();\\n      }\\n    }\\n  }\\n  function onend() {\\n    debug('onend');\\n    dest.end();\\n  }\\n\\n  // when the dest drains, it reduces the awaitDrain counter\\n  // on the source.  This would be more elegant with a .once()\\n  // handler in flow(), but adding and removing repeatedly is\\n  // too slow.\\n  var ondrain = pipeOnDrain(src);\\n  dest.on('drain', ondrain);\\n  var cleanedUp = false;\\n  function cleanup() {\\n    debug('cleanup');\\n    // cleanup event handlers once the pipe is broken\\n    dest.removeListener('close', onclose);\\n    dest.removeListener('finish', onfinish);\\n    dest.removeListener('drain', ondrain);\\n    dest.removeListener('error', onerror);\\n    dest.removeListener('unpipe', onunpipe);\\n    src.removeListener('end', onend);\\n    src.removeListener('end', unpipe);\\n    src.removeListener('data', ondata);\\n    cleanedUp = true;\\n\\n    // if the reader is waiting for a drain event from this\\n    // specific writer, then it would cause it to never start\\n    // flowing again.\\n    // So, if this is awaiting a drain, then we just call it now.\\n    // If we don't know, then assume that we are waiting for one.\\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\\n  }\\n  src.on('data', ondata);\\n  function ondata(chunk) {\\n    debug('ondata');\\n    var ret = dest.write(chunk);\\n    debug('dest.write', ret);\\n    if (ret === false) {\\n      // If the user unpiped during `dest.write()`, it is possible\\n      // to get stuck in a permanently paused state if that write\\n      // also returned false.\\n      // => Check whether `dest` is still a piping destination.\\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\\n        debug('false write response, pause', state.awaitDrain);\\n        state.awaitDrain++;\\n      }\\n      src.pause();\\n    }\\n  }\\n\\n  // if the dest has an error, then stop piping into it.\\n  // however, don't suppress the throwing behavior for this.\\n  function onerror(er) {\\n    debug('onerror', er);\\n    unpipe();\\n    dest.removeListener('error', onerror);\\n    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);\\n  }\\n\\n  // Make sure our error handler is attached before userland ones.\\n  prependListener(dest, 'error', onerror);\\n\\n  // Both close and finish should trigger unpipe, but only once.\\n  function onclose() {\\n    dest.removeListener('finish', onfinish);\\n    unpipe();\\n  }\\n  dest.once('close', onclose);\\n  function onfinish() {\\n    debug('onfinish');\\n    dest.removeListener('close', onclose);\\n    unpipe();\\n  }\\n  dest.once('finish', onfinish);\\n  function unpipe() {\\n    debug('unpipe');\\n    src.unpipe(dest);\\n  }\\n\\n  // tell the dest that it's being piped to\\n  dest.emit('pipe', src);\\n\\n  // start the flow if it hasn't been started already.\\n  if (!state.flowing) {\\n    debug('pipe resume');\\n    src.resume();\\n  }\\n  return dest;\\n};\\nfunction pipeOnDrain(src) {\\n  return function pipeOnDrainFunctionResult() {\\n    var state = src._readableState;\\n    debug('pipeOnDrain', state.awaitDrain);\\n    if (state.awaitDrain) state.awaitDrain--;\\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\\n      state.flowing = true;\\n      flow(src);\\n    }\\n  };\\n}\\nReadable.prototype.unpipe = function (dest) {\\n  var state = this._readableState;\\n  var unpipeInfo = {\\n    hasUnpiped: false\\n  };\\n\\n  // if we're not piping anywhere, then do nothing.\\n  if (state.pipesCount === 0) return this;\\n\\n  // just one destination.  most common case.\\n  if (state.pipesCount === 1) {\\n    // passed in one, but it's not the right one.\\n    if (dest && dest !== state.pipes) return this;\\n    if (!dest) dest = state.pipes;\\n\\n    // got a match.\\n    state.pipes = null;\\n    state.pipesCount = 0;\\n    state.flowing = false;\\n    if (dest) dest.emit('unpipe', this, unpipeInfo);\\n    return this;\\n  }\\n\\n  // slow case. multiple pipe destinations.\\n\\n  if (!dest) {\\n    // remove all.\\n    var dests = state.pipes;\\n    var len = state.pipesCount;\\n    state.pipes = null;\\n    state.pipesCount = 0;\\n    state.flowing = false;\\n    for (var i = 0; i < len; i++) dests[i].emit('unpipe', this, {\\n      hasUnpiped: false\\n    });\\n    return this;\\n  }\\n\\n  // try to find the right one.\\n  var index = indexOf(state.pipes, dest);\\n  if (index === -1) return this;\\n  state.pipes.splice(index, 1);\\n  state.pipesCount -= 1;\\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\\n  dest.emit('unpipe', this, unpipeInfo);\\n  return this;\\n};\\n\\n// set up data events if they are asked for\\n// Ensure readable listeners eventually get something\\nReadable.prototype.on = function (ev, fn) {\\n  var res = Stream.prototype.on.call(this, ev, fn);\\n  var state = this._readableState;\\n  if (ev === 'data') {\\n    // update readableListening so that resume() may be a no-op\\n    // a few lines down. This is needed to support once('readable').\\n    state.readableListening = this.listenerCount('readable') > 0;\\n\\n    // Try start flowing on next tick if stream isn't explicitly paused\\n    if (state.flowing !== false) this.resume();\\n  } else if (ev === 'readable') {\\n    if (!state.endEmitted && !state.readableListening) {\\n      state.readableListening = state.needReadable = true;\\n      state.flowing = false;\\n      state.emittedReadable = false;\\n      debug('on readable', state.length, state.reading);\\n      if (state.length) {\\n        emitReadable(this);\\n      } else if (!state.reading) {\\n        process.nextTick(nReadingNextTick, this);\\n      }\\n    }\\n  }\\n  return res;\\n};\\nReadable.prototype.addListener = Readable.prototype.on;\\nReadable.prototype.removeListener = function (ev, fn) {\\n  var res = Stream.prototype.removeListener.call(this, ev, fn);\\n  if (ev === 'readable') {\\n    // We need to check if there is someone still listening to\\n    // readable and reset the state. However this needs to happen\\n    // after readable has been emitted but before I/O (nextTick) to\\n    // support once('readable', fn) cycles. This means that calling\\n    // resume within the same tick will have no\\n    // effect.\\n    process.nextTick(updateReadableListening, this);\\n  }\\n  return res;\\n};\\nReadable.prototype.removeAllListeners = function (ev) {\\n  var res = Stream.prototype.removeAllListeners.apply(this, arguments);\\n  if (ev === 'readable' || ev === undefined) {\\n    // We need to check if there is someone still listening to\\n    // readable and reset the state. However this needs to happen\\n    // after readable has been emitted but before I/O (nextTick) to\\n    // support once('readable', fn) cycles. This means that calling\\n    // resume within the same tick will have no\\n    // effect.\\n    process.nextTick(updateReadableListening, this);\\n  }\\n  return res;\\n};\\nfunction updateReadableListening(self) {\\n  var state = self._readableState;\\n  state.readableListening = self.listenerCount('readable') > 0;\\n  if (state.resumeScheduled && !state.paused) {\\n    // flowing needs to be set to true now, otherwise\\n    // the upcoming resume will not flow.\\n    state.flowing = true;\\n\\n    // crude way to check if we should resume\\n  } else if (self.listenerCount('data') > 0) {\\n    self.resume();\\n  }\\n}\\nfunction nReadingNextTick(self) {\\n  debug('readable nexttick read 0');\\n  self.read(0);\\n}\\n\\n// pause() and resume() are remnants of the legacy readable stream API\\n// If the user uses them, then switch into old mode.\\nReadable.prototype.resume = function () {\\n  var state = this._readableState;\\n  if (!state.flowing) {\\n    debug('resume');\\n    // we flow only if there is no one listening\\n    // for readable, but we still have to call\\n    // resume()\\n    state.flowing = !state.readableListening;\\n    resume(this, state);\\n  }\\n  state.paused = false;\\n  return this;\\n};\\nfunction resume(stream, state) {\\n  if (!state.resumeScheduled) {\\n    state.resumeScheduled = true;\\n    process.nextTick(resume_, stream, state);\\n  }\\n}\\nfunction resume_(stream, state) {\\n  debug('resume', state.reading);\\n  if (!state.reading) {\\n    stream.read(0);\\n  }\\n  state.resumeScheduled = false;\\n  stream.emit('resume');\\n  flow(stream);\\n  if (state.flowing && !state.reading) stream.read(0);\\n}\\nReadable.prototype.pause = function () {\\n  debug('call pause flowing=%j', this._readableState.flowing);\\n  if (this._readableState.flowing !== false) {\\n    debug('pause');\\n    this._readableState.flowing = false;\\n    this.emit('pause');\\n  }\\n  this._readableState.paused = true;\\n  return this;\\n};\\nfunction flow(stream) {\\n  var state = stream._readableState;\\n  debug('flow', state.flowing);\\n  while (state.flowing && stream.read() !== null);\\n}\\n\\n// wrap an old-style stream as the async data source.\\n// This is *not* part of the readable stream interface.\\n// It is an ugly unfortunate mess of history.\\nReadable.prototype.wrap = function (stream) {\\n  var _this = this;\\n  var state = this._readableState;\\n  var paused = false;\\n  stream.on('end', function () {\\n    debug('wrapped end');\\n    if (state.decoder && !state.ended) {\\n      var chunk = state.decoder.end();\\n      if (chunk && chunk.length) _this.push(chunk);\\n    }\\n    _this.push(null);\\n  });\\n  stream.on('data', function (chunk) {\\n    debug('wrapped data');\\n    if (state.decoder) chunk = state.decoder.write(chunk);\\n\\n    // don't skip over falsy values in objectMode\\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\\n    var ret = _this.push(chunk);\\n    if (!ret) {\\n      paused = true;\\n      stream.pause();\\n    }\\n  });\\n\\n  // proxy all the other methods.\\n  // important when wrapping filters and duplexes.\\n  for (var i in stream) {\\n    if (this[i] === undefined && typeof stream[i] === 'function') {\\n      this[i] = function methodWrap(method) {\\n        return function methodWrapReturnFunction() {\\n          return stream[method].apply(stream, arguments);\\n        };\\n      }(i);\\n    }\\n  }\\n\\n  // proxy certain important events.\\n  for (var n = 0; n < kProxyEvents.length; n++) {\\n    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\\n  }\\n\\n  // when we try to consume some more bytes, simply unpause the\\n  // underlying stream.\\n  this._read = function (n) {\\n    debug('wrapped _read', n);\\n    if (paused) {\\n      paused = false;\\n      stream.resume();\\n    }\\n  };\\n  return this;\\n};\\nif (typeof Symbol === 'function') {\\n  Readable.prototype[Symbol.asyncIterator] = function () {\\n    if (createReadableStreamAsyncIterator === undefined) {\\n      createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');\\n    }\\n    return createReadableStreamAsyncIterator(this);\\n  };\\n}\\nObject.defineProperty(Readable.prototype, 'readableHighWaterMark', {\\n  // making it explicit this property is not enumerable\\n  // because otherwise some prototype manipulation in\\n  // userland will fail\\n  enumerable: false,\\n  get: function get() {\\n    return this._readableState.highWaterMark;\\n  }\\n});\\nObject.defineProperty(Readable.prototype, 'readableBuffer', {\\n  // making it explicit this property is not enumerable\\n  // because otherwise some prototype manipulation in\\n  // userland will fail\\n  enumerable: false,\\n  get: function get() {\\n    return this._readableState && this._readableState.buffer;\\n  }\\n});\\nObject.defineProperty(Readable.prototype, 'readableFlowing', {\\n  // making it explicit this property is not enumerable\\n  // because otherwise some prototype manipulation in\\n  // userland will fail\\n  enumerable: false,\\n  get: function get() {\\n    return this._readableState.flowing;\\n  },\\n  set: function set(state) {\\n    if (this._readableState) {\\n      this._readableState.flowing = state;\\n    }\\n  }\\n});\\n\\n// exposed for testing purposes only.\\nReadable._fromList = fromList;\\nObject.defineProperty(Readable.prototype, 'readableLength', {\\n  // making it explicit this property is not enumerable\\n  // because otherwise some prototype manipulation in\\n  // userland will fail\\n  enumerable: false,\\n  get: function get() {\\n    return this._readableState.length;\\n  }\\n});\\n\\n// Pluck off n bytes from an array of buffers.\\n// Length is the combined lengths of all the buffers in the list.\\n// This function is designed to be inlinable, so please take care when making\\n// changes to the function body.\\nfunction fromList(n, state) {\\n  // nothing buffered\\n  if (state.length === 0) return null;\\n  var ret;\\n  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\\n    // read it all, truncate the list\\n    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);\\n    state.buffer.clear();\\n  } else {\\n    // read part of list\\n    ret = state.buffer.consume(n, state.decoder);\\n  }\\n  return ret;\\n}\\nfunction endReadable(stream) {\\n  var state = stream._readableState;\\n  debug('endReadable', state.endEmitted);\\n  if (!state.endEmitted) {\\n    state.ended = true;\\n    process.nextTick(endReadableNT, state, stream);\\n  }\\n}\\nfunction endReadableNT(state, stream) {\\n  debug('endReadableNT', state.endEmitted, state.length);\\n\\n  // Check that we didn't get one last unshift.\\n  if (!state.endEmitted && state.length === 0) {\\n    state.endEmitted = true;\\n    stream.readable = false;\\n    stream.emit('end');\\n    if (state.autoDestroy) {\\n      // In case of duplex streams we need a way to detect\\n      // if the writable side is ready for autoDestroy as well\\n      var wState = stream._writableState;\\n      if (!wState || wState.autoDestroy && wState.finished) {\\n        stream.destroy();\\n      }\\n    }\\n  }\\n}\\nif (typeof Symbol === 'function') {\\n  Readable.from = function (iterable, opts) {\\n    if (from === undefined) {\\n      from = require('./internal/streams/from');\\n    }\\n    return from(Readable, iterable, opts);\\n  };\\n}\\nfunction indexOf(xs, x) {\\n  for (var i = 0, l = xs.length; i < l; i++) {\\n    if (xs[i] === x) return i;\\n  }\\n  return -1;\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"prependListener\",\"emitter\",\"event\",\"fn\",\"_events\",\"Array\",\"isArray\",\"unshift\",\"on\",\"ReadableState\",\"options\",\"stream\",\"isDuplex\",\"Duplex\",\"objectMode\",\"readableObjectMode\",\"highWaterMark\",\"getHighWaterMark\",\"buffer\",\"BufferList\",\"length\",\"pipes\",\"pipesCount\",\"flowing\",\"reading\",\"endEmitted\",\"ended\",\"sync\",\"resumeScheduled\",\"readableListening\",\"emittedReadable\",\"needReadable\",\"paused\",\"emitClose\",\"autoDestroy\",\"destroyed\",\"defaultEncoding\",\"awaitDrain\",\"readingMore\",\"encoding\",\"decoder\",\"StringDecoder\",\"Readable\",\"_readableState\",\"readable\",\"read\",\"_read\",\"destroy\",\"_destroy\",\"Stream\",\"call\",\"readableAddChunk\",\"chunk\",\"addToFront\",\"skipChunkCheck\",\"debug\",\"state\",\"end\",\"push\",\"emitReadable\",\"emitReadable_\",\"er\",\"Buffer\",\"isBuffer\",\"OurUint8Array\",\"undefined\",\"ERR_INVALID_ARG_TYPE\",\"errorOrDestroy\",\"Object\",\"getPrototypeOf\",\"prototype\",\"from\",\"ERR_STREAM_UNSHIFT_AFTER_END_EVENT\",\"addChunk\",\"ERR_STREAM_PUSH_AFTER_EOF\",\"write\",\"maybeReadMore\",\"emit\",\"howMuchToRead\",\"n\",\"head\",\"data\",\"MAX_HWM\",\"process\",\"nextTick\",\"flow\",\"maybeReadMore_\",\"len\",\"pipeOnDrain\",\"src\",\"pipeOnDrainFunctionResult\",\"listeners\",\"type\",\"updateReadableListening\",\"self\",\"listenerCount\",\"resume\",\"nReadingNextTick\",\"resume_\",\"fromList\",\"ret\",\"shift\",\"join\",\"first\",\"concat\",\"clear\",\"consume\",\"endReadable\",\"endReadableNT\",\"wState\",\"_writableState\",\"finished\",\"indexOf\",\"xs\",\"x\",\"i\",\"l\",\"Uint8Array\",\"window\",\"debugUtil\",\"debuglog\",\"destroyImpl\",\"_require\",\"_require$codes\",\"codes\",\"ERR_METHOD_NOT_IMPLEMENTED\",\"createReadableStreamAsyncIterator\",\"kProxyEvents\",\"defineProperty\",\"enumerable\",\"get\",\"set\",\"value\",\"_undestroy\",\"undestroy\",\"Readable.prototype._destroy\",\"err\",\"cb\",\"Readable.prototype.push\",\"Readable.prototype.unshift\",\"isPaused\",\"Readable.prototype.isPaused\",\"setEncoding\",\"Readable.prototype.setEncoding\",\"enc\",\"p\",\"content\",\"next\",\"Readable.prototype.read\",\"parseInt\",\"nOrig\",\"doRead\",\"Readable.prototype._read\",\"pipe\",\"Readable.prototype.pipe\",\"dest\",\"pipeOpts\",\"onunpipe\",\"unpipeInfo\",\"hasUnpiped\",\"removeListener\",\"onclose\",\"onfinish\",\"ondrain\",\"onerror\",\"onend\",\"unpipe\",\"ondata\",\"cleanedUp\",\"needDrain\",\"pause\",\"endFn\",\"stdout\",\"stderr\",\"once\",\"Readable.prototype.unpipe\",\"dests\",\"index\",\"splice\",\"Readable.prototype.on\",\"ev\",\"res\",\"addListener\",\"Readable.prototype.removeListener\",\"removeAllListeners\",\"Readable.prototype.removeAllListeners\",\"apply\",\"arguments\",\"Readable.prototype.resume\",\"Readable.prototype.pause\",\"wrap\",\"Readable.prototype.wrap\",\"_this\",\"methodWrap\",\"method\",\"methodWrapReturnFunction\",\"bind\",\"this._read\",\"Symbol\",\"asyncIterator\",\"_fromList\",\"Readable.from\",\"iterable\",\"opts\"]\n}\n"]