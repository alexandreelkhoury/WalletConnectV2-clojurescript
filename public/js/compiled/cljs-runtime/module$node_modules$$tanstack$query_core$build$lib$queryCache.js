shadow$provide.module$node_modules$$tanstack$query_core$build$lib$queryCache=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});var utils=require("module$node_modules$$tanstack$query_core$build$lib$utils"),query$jscomp$0=require("module$node_modules$$tanstack$query_core$build$lib$query"),notifyManager=require("module$node_modules$$tanstack$query_core$build$lib$notifyManager");global=require("module$node_modules$$tanstack$query_core$build$lib$subscribable");
class QueryCache extends global.Subscribable{constructor(config){super();this.config=config||{};this.queries=[];this.queriesMap={}}build(client,options,state){var _options$queryHash;const queryKey=options.queryKey,queryHash=null!=(_options$queryHash=options.queryHash)?_options$queryHash:utils.hashQueryKeyByOptions(queryKey,options);_options$queryHash=this.get(queryHash);_options$queryHash||(_options$queryHash=new query$jscomp$0.Query({cache:this,logger:client.getLogger(),queryKey,queryHash,options:client.defaultQueryOptions(options),
state,defaultOptions:client.getQueryDefaults(queryKey)}),this.add(_options$queryHash));return _options$queryHash}add(query){this.queriesMap[query.queryHash]||(this.queriesMap[query.queryHash]=query,this.queries.push(query),this.notify({type:"added",query}))}remove(query){const queryInMap=this.queriesMap[query.queryHash];queryInMap&&(query.destroy(),this.queries=this.queries.filter(x=>x!==query),queryInMap===query&&delete this.queriesMap[query.queryHash],this.notify({type:"removed",query}))}clear(){notifyManager.notifyManager.batch(()=>
{this.queries.forEach(query=>{this.remove(query)})})}get(queryHash){return this.queriesMap[queryHash]}getAll(){return this.queries}find(arg1,arg2){const [filters]=utils.parseFilterArgs(arg1,arg2);"undefined"===typeof filters.exact&&(filters.exact=!0);return this.queries.find(query=>utils.matchQuery(filters,query))}findAll(arg1,arg2){const [filters]=utils.parseFilterArgs(arg1,arg2);return 0<Object.keys(filters).length?this.queries.filter(query=>utils.matchQuery(filters,query)):this.queries}notify(event){notifyManager.notifyManager.batch(()=>
{this.listeners.forEach(({listener})=>{listener(event)})})}onFocus(){notifyManager.notifyManager.batch(()=>{this.queries.forEach(query=>{query.onFocus()})})}onOnline(){notifyManager.notifyManager.batch(()=>{this.queries.forEach(query=>{query.onOnline()})})}}exports.QueryCache=QueryCache}
//# sourceMappingURL=module$node_modules$$tanstack$query_core$build$lib$queryCache.js.map
