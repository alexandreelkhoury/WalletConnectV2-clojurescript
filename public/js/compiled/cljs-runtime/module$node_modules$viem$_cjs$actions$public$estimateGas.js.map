{
"version":3,
"file":"module$node_modules$viem$_cjs$actions$public$estimateGas.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,CAAA,wDAAA,CAA6E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAErHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CACAH,QAAQI,CAAAA,WAAR,CAAsB,IAAK,EAC3B,OAAMC,kBAAoBP,OAAA,CAAQ,2DAAR,CAA1B,CACMQ,aAAeR,OAAA,CAAQ,8CAAR,CADrB,CAEMS,WAAaT,OAAA,CAAQ,oDAAR,CAFnB,CAGMU,yBAA2BV,OAAA,CAAQ,gEAAR,CAHjC;AAIMW,aAAeX,OAAA,CAAQ,wDAAR,CAJrB,CAKMY,wBAA0BZ,OAAA,CAAQ,mEAAR,CALhC,CAMMa,mBAAqBb,OAAA,CAAQ,+DAAR,CAN3B,CAOMc,+BAAiCd,OAAA,CAAQ,wEAAR,CA4CvCE,QAAQI,CAAAA,WAAR,CA3CAA,cAA0B,CAACS,MAAD,CAASC,IAAT,CAAe,CACrC,IAAMC,SAAWD,IAAKE,CAAAA,OAAhBD,EAA2BF,MAAOG,CAAAA,OACxC,IAAI,CAACD,QAAL,CACI,KAAM,KAAIT,YAAaW,CAAAA,oBAAjB,CAAsC,CACxCC,SAAU,kCAD8B,CAAtC,CAAN;AAGEF,QAAAA,CAAU,GAAIX,iBAAkBc,CAAAA,YAAtB,EAAoCJ,QAApC,CAChB,IAAI,CACA,MAAM,CAAEK,UAAF,CAAcC,WAAd,CAA2BC,QAA3B,CAAqCC,IAArC,CAA2CC,GAA3C,CAAgDC,QAAhD,CAA0DC,YAA1D,CAAwEC,oBAAxE,CAA8FC,KAA9F,CAAqGC,EAArG,CAAyG1B,KAAzG,CAAgH,GAAG2B,IAAnH,CAAA,CAA6I,OAAjB,GAAAd,QAAQe,CAAAA,IAAR,CAC3H,MAAM,GAAInB,8BAA+BoB,CAAAA,yBAAnC,EAA8DnB,MAA9D,CAAsEC,IAAtE,CADqH,CAE5HA,IAFN,CAIMmB,OADiBZ,WAAAa,CAAc,GAAI3B,UAAW4B,CAAAA,WAAf,EAA4Bd,WAA5B,CAAda,CAAyDE,IAAAA,EAC1EH,GAA0BX,QAChC,IAAIX,kBAAmB0B,CAAAA,aAAvB,EAAsCvB,IAAtC,CACA,OAAMwB,OAASzB,MAAO0B,CAAAA,KAAOC,EAAAA,UAAYC,EAAAA,kBAAoBH,EAAAA,MAAvDA,EACF5B,uBAAwBgC,CAAAA,wBAD5B;AAEMC,QAAUL,MAAA,CAAO,CACnB,GAAG,GAAI7B,YAAamC,CAAAA,OAAjB,EAA0Bd,IAA1B,CAAgC,CAAEQ,MAAF,CAAhC,CADgB,CAEnBO,KAAM7B,QAAQ8B,CAAAA,OAFK,CAGnB1B,UAHmB,CAInBG,IAJmB,CAKnBC,GALmB,CAMnBC,QANmB,CAOnBC,YAPmB,CAQnBC,oBARmB,CASnBC,KATmB,CAUnBC,EAVmB,CAWnB1B,KAXmB,CAAP,CAFhB,CAeM4C,QAAU,MAAMlC,MAAO8B,CAAAA,OAAP,CAAe,CACjCK,OAAQ,iBADyB,CAEjCC,OAAQhB,KAAA,CAAQ,CAACU,OAAD,CAAUV,KAAV,CAAR,CAA2B,CAACU,OAAD,CAFF,CAAf,CAItB,OAAOO,OAAA,CAAOH,OAAP,CA1BP,CA4BJ,MAAOI,GAAP,CAAY,CACR,KAAM,GAAI3C,wBAAyB4C,CAAAA,mBAA7B,EAAkDD,GAAlD,CAAuD,CACzD,GAAGrC,IADsD,CAEzDE,QAAAA,QAFyD,CAGzDuB,MAAO1B,MAAO0B,CAAAA,KAH2C,CAAvD,CAAN,CADQ,CAnCyB,CAZ4E;",
"sources":["node_modules/viem/_cjs/actions/public/estimateGas.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$viem$_cjs$actions$public$estimateGas\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.estimateGas = void 0;\nconst parseAccount_js_1 = require(\"../../accounts/utils/parseAccount.js\");\nconst account_js_1 = require(\"../../errors/account.js\");\nconst toHex_js_1 = require(\"../../utils/encoding/toHex.js\");\nconst getEstimateGasError_js_1 = require(\"../../utils/errors/getEstimateGasError.js\");\nconst extract_js_1 = require(\"../../utils/formatters/extract.js\");\nconst transactionRequest_js_1 = require(\"../../utils/formatters/transactionRequest.js\");\nconst assertRequest_js_1 = require(\"../../utils/transaction/assertRequest.js\");\nconst prepareTransactionRequest_js_1 = require(\"../wallet/prepareTransactionRequest.js\");\nasync function estimateGas(client, args) {\n    const account_ = args.account ?? client.account;\n    if (!account_)\n        throw new account_js_1.AccountNotFoundError({\n            docsPath: '/docs/actions/public/estimateGas',\n        });\n    const account = (0, parseAccount_js_1.parseAccount)(account_);\n    try {\n        const { accessList, blockNumber, blockTag, data, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, nonce, to, value, ...rest } = account.type === 'local'\n            ? (await (0, prepareTransactionRequest_js_1.prepareTransactionRequest)(client, args))\n            : args;\n        const blockNumberHex = blockNumber ? (0, toHex_js_1.numberToHex)(blockNumber) : undefined;\n        const block = blockNumberHex || blockTag;\n        (0, assertRequest_js_1.assertRequest)(args);\n        const format = client.chain?.formatters?.transactionRequest?.format ||\n            transactionRequest_js_1.formatTransactionRequest;\n        const request = format({\n            ...(0, extract_js_1.extract)(rest, { format }),\n            from: account.address,\n            accessList,\n            data,\n            gas,\n            gasPrice,\n            maxFeePerGas,\n            maxPriorityFeePerGas,\n            nonce,\n            to,\n            value,\n        });\n        const balance = await client.request({\n            method: 'eth_estimateGas',\n            params: block ? [request, block] : [request],\n        });\n        return BigInt(balance);\n    }\n    catch (err) {\n        throw (0, getEstimateGasError_js_1.getEstimateGasError)(err, {\n            ...args,\n            account,\n            chain: client.chain,\n        });\n    }\n}\nexports.estimateGas = estimateGas;\n//# sourceMappingURL=estimateGas.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","estimateGas","parseAccount_js_1","account_js_1","toHex_js_1","getEstimateGasError_js_1","extract_js_1","transactionRequest_js_1","assertRequest_js_1","prepareTransactionRequest_js_1","client","args","account_","account","AccountNotFoundError","docsPath","parseAccount","accessList","blockNumber","blockTag","data","gas","gasPrice","maxFeePerGas","maxPriorityFeePerGas","nonce","to","rest","type","prepareTransactionRequest","block","blockNumberHex","numberToHex","undefined","assertRequest","format","chain","formatters","transactionRequest","formatTransactionRequest","request","extract","from","address","balance","method","params","BigInt","err","getEstimateGasError"]
}
