["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/readable-stream/lib/_stream_writable.js"],"~:js","shadow$provide[150]=function(S,A,V,q){function F(M){var P=this;this.entry=this.next=null;this.finish=function(){var J=P.entry;for(P.entry=null;J;){var T=J.callback;M.pendingcb--;T(void 0);J=J.next}M.corkedRequestsFree.next=P}}function G(){}function r(M,P){B=B||A(151);M=M||{};var J=P instanceof B;this.objectMode=!!M.objectMode;J&&(this.objectMode=this.objectMode||!!M.writableObjectMode);var T=M.highWaterMark,N=M.writableHighWaterMark,a=this.objectMode?16:16384;this.highWaterMark=T||0===T?T:J&&(N||\n0===N)?N:a;this.highWaterMark=Math.floor(this.highWaterMark);this.destroyed=this.finished=this.ended=this.ending=this.needDrain=this.finalCalled=!1;this.decodeStrings=!1!==M.decodeStrings;this.defaultEncoding=M.defaultEncoding||\"utf8\";this.length=0;this.writing=!1;this.corked=0;this.sync=!0;this.bufferProcessing=!1;this.onwrite=function(b){var c=P._writableState,d=c.sync,f=c.writecb;c.writing=!1;c.writecb=null;c.length-=c.writelen;c.writelen=0;b?(--c.pendingcb,d?(k.nextTick(f,b),k.nextTick(h,P,c),\nP._writableState.errorEmitted=!0,P.emit(\"error\",b)):(f(b),P._writableState.errorEmitted=!0,P.emit(\"error\",b),h(P,c))):((b=n(c))||c.corked||c.bufferProcessing||!c.bufferedRequest||p(P,c),d?t(u,P,c,b,f):u(P,c,b,f))};this.writecb=null;this.writelen=0;this.lastBufferedRequest=this.bufferedRequest=null;this.pendingcb=0;this.errorEmitted=this.prefinished=!1;this.bufferedRequestCount=0;this.corkedRequestsFree=new F(this)}function y(M){B=B||A(151);if(!(I.call(y,this)||this instanceof B))return new y(M);this._writableState=\nnew r(M,this);this.writable=!0;M&&(\"function\"===typeof M.write&&(this._write=M.write),\"function\"===typeof M.writev&&(this._writev=M.writev),\"function\"===typeof M.destroy&&(this._destroy=M.destroy),\"function\"===typeof M.final&&(this._final=M.final));H.call(this)}function e(M,P,J,T,N,a,b){P.writelen=T;P.writecb=b;P.writing=!0;P.sync=!0;J?M._writev(N,P.onwrite):M._write(N,a,P.onwrite);P.sync=!1}function u(M,P,J,T){!J&&0===P.length&&P.needDrain&&(P.needDrain=!1,M.emit(\"drain\"));P.pendingcb--;T();h(M,\nP)}function p(M,P){P.bufferProcessing=!0;var J=P.bufferedRequest;if(M._writev&&J&&J.next){var T=Array(P.bufferedRequestCount),N=P.corkedRequestsFree;N.entry=J;for(var a=0,b=!0;J;)T[a]=J,J.isBuf||(b=!1),J=J.next,a+=1;T.allBuffers=b;e(M,P,!0,P.length,T,\"\",N.finish);P.pendingcb++;P.lastBufferedRequest=null;N.next?(P.corkedRequestsFree=N.next,N.next=null):P.corkedRequestsFree=new F(P);P.bufferedRequestCount=0}else{for(;J&&(T=J.chunk,e(M,P,!1,P.objectMode?1:T.length,T,J.encoding,J.callback),J=J.next,P.bufferedRequestCount--,\n!P.writing););null===J&&(P.lastBufferedRequest=null)}P.bufferedRequest=J;P.bufferProcessing=!1}function n(M){return M.ending&&0===M.length&&null===M.bufferedRequest&&!M.finished&&!M.writing}function l(M,P){M._final(function(J){P.pendingcb--;J&&M.emit(\"error\",J);P.prefinished=!0;M.emit(\"prefinish\");h(M,P)})}function h(M,P){var J=n(P);J&&(P.prefinished||P.finalCalled||(\"function\"===typeof M._final?(P.pendingcb++,P.finalCalled=!0,k.nextTick(l,M,P)):(P.prefinished=!0,M.emit(\"prefinish\"))),0===P.pendingcb&&\n(P.finished=!0,M.emit(\"finish\")));return J}q=A(1);\"use strict\";var k=A(142);V.exports=y;var t=!q.browser&&-1<[\"v0.10\",\"v0.9.\"].indexOf(q.version.slice(0,5))?setImmediate:k.nextTick,B;y.WritableState=r;V=Object.create(A(147));V.inherits=A(76);var E={deprecate:A(119)},H=A(143),D=A(144).Buffer,C=(\"undefined\"!==typeof S?S:\"undefined\"!==typeof window?window:\"undefined\"!==typeof self?self:{}).Uint8Array||function(){};S=A(149);V.inherits(y,H);r.prototype.getBuffer=function(){for(var M=this.bufferedRequest,\nP=[];M;)P.push(M),M=M.next;return P};(function(){try{Object.defineProperty(r.prototype,\"buffer\",{get:E.deprecate(function(){return this.getBuffer()},\"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.\",\"DEP0003\")})}catch(M){}})();if(\"function\"===typeof Symbol&&Symbol.hasInstance&&\"function\"===typeof Function.prototype[Symbol.hasInstance]){var I=Function.prototype[Symbol.hasInstance];Object.defineProperty(y,Symbol.hasInstance,{value:function(M){return I.call(this,M)?!0:this!==\ny?!1:M&&M._writableState instanceof r}})}else I=function(M){return M instanceof this};y.prototype.pipe=function(){this.emit(\"error\",Error(\"Cannot pipe, not readable\"))};y.prototype.write=function(M,P,J){var T=this._writableState,N=!1,a;if(a=!T.objectMode)a=M,a=D.isBuffer(a)||a instanceof C;a&&!D.isBuffer(M)&&(M=D.from(M));\"function\"===typeof P&&(J=P,P=null);a?P=\"buffer\":P||(P=T.defaultEncoding);\"function\"!==typeof J&&(J=G);if(T.ended)T=J,J=Error(\"write after end\"),this.emit(\"error\",J),k.nextTick(T,\nJ);else{var b;if(!(b=a)){b=M;var c=J,d=!0,f=!1;null===b?f=new TypeError(\"May not write null values to stream\"):\"string\"===typeof b||void 0===b||T.objectMode||(f=new TypeError(\"Invalid non-string/buffer chunk\"));f&&(this.emit(\"error\",f),k.nextTick(c,f),d=!1);b=d}b&&(T.pendingcb++,N=a,N||(a=M,T.objectMode||!1===T.decodeStrings||\"string\"!==typeof a||(a=D.from(a,P)),M!==a&&(N=!0,P=\"buffer\",M=a)),b=T.objectMode?1:M.length,T.length+=b,a=T.length<T.highWaterMark,a||(T.needDrain=!0),T.writing||T.corked?(b=\nT.lastBufferedRequest,T.lastBufferedRequest={chunk:M,encoding:P,isBuf:N,callback:J,next:null},b?b.next=T.lastBufferedRequest:T.bufferedRequest=T.lastBufferedRequest,T.bufferedRequestCount+=1):e(this,T,!1,b,M,P,J),N=a)}return N};y.prototype.cork=function(){this._writableState.corked++};y.prototype.uncork=function(){var M=this._writableState;M.corked&&(M.corked--,M.writing||M.corked||M.bufferProcessing||!M.bufferedRequest||p(this,M))};y.prototype.setDefaultEncoding=function(M){\"string\"===typeof M&&\n(M=M.toLowerCase());if(!(-1<\"hex utf8 utf-8 ascii binary base64 ucs2 ucs-2 utf16le utf-16le raw\".split(\" \").indexOf((M+\"\").toLowerCase())))throw new TypeError(\"Unknown encoding: \"+M);this._writableState.defaultEncoding=M;return this};Object.defineProperty(y.prototype,\"writableHighWaterMark\",{enumerable:!1,get:function(){return this._writableState.highWaterMark}});y.prototype._write=function(M,P,J){J(Error(\"_write() is not implemented\"))};y.prototype._writev=null;y.prototype.end=function(M,P,J){var T=\nthis._writableState;\"function\"===typeof M?(J=M,P=M=null):\"function\"===typeof P&&(J=P,P=null);null!==M&&void 0!==M&&this.write(M,P);T.corked&&(T.corked=1,this.uncork());if(!T.ending){M=J;T.ending=!0;h(this,T);if(M)if(T.finished)k.nextTick(M);else this.once(\"finish\",M);T.ended=!0;this.writable=!1}};Object.defineProperty(y.prototype,\"destroyed\",{get:function(){return void 0===this._writableState?!1:this._writableState.destroyed},set:function(M){this._writableState&&(this._writableState.destroyed=M)}});\ny.prototype.destroy=S.destroy;y.prototype._undestroy=S.undestroy;y.prototype._destroy=function(M,P){this.end();P(M)}}","~:source","shadow$provide[150] = function(global,require,module,exports) {\nvar process = require('process');\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n\n'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\nmodule.exports = Writable;\n\n/* <replacement> */\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n}\n\n// It seems a linked list but it is not\n// there will be only 2 of these for each stream\nfunction CorkedRequest(state) {\n  var _this = this;\n\n  this.next = null;\n  this.entry = null;\n  this.finish = function () {\n    onCorkedFinish(_this, state);\n  };\n}\n/* </replacement> */\n\n/*<replacement>*/\nvar asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;\n/*</replacement>*/\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n\n/*<replacement>*/\nvar util = Object.create(require('core-util-is'));\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar internalUtil = {\n  deprecate: require('util-deprecate')\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\nvar OurUint8Array = (typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\n/*</replacement>*/\n\nvar destroyImpl = require('./internal/streams/destroy');\n\nutil.inherits(Writable, Stream);\n\nfunction nop() {}\n\nfunction WritableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  var isDuplex = stream instanceof Duplex;\n\n  // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!options.objectMode;\n\n  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n  // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n  var hwm = options.highWaterMark;\n  var writableHwm = options.writableHighWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = Math.floor(this.highWaterMark);\n\n  // if _final has been called\n  this.finalCalled = false;\n\n  // drain event flag.\n  this.needDrain = false;\n  // at the start of calling end()\n  this.ending = false;\n  // when end() has been called, and returned\n  this.ended = false;\n  // when 'finish' is emitted\n  this.finished = false;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0;\n\n  // a flag to see when we're in the middle of a write.\n  this.writing = false;\n\n  // when true all writes will be buffered until .uncork() call\n  this.corked = 0;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false;\n\n  // the callback that's passed to _write(chunk,cb)\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  };\n\n  // the callback that the user supplies to write(chunk,encoding,cb)\n  this.writecb = null;\n\n  // the amount that is being written when _write is called.\n  this.writelen = 0;\n\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null;\n\n  // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n  this.pendingcb = 0;\n\n  // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n  this.prefinished = false;\n\n  // True if the error was already emitted and should not be thrown again\n  this.errorEmitted = false;\n\n  // count buffered requests\n  this.bufferedRequestCount = 0;\n\n  // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\n\nWritableState.prototype.getBuffer = function getBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n  return out;\n};\n\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function () {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')\n    });\n  } catch (_) {}\n})();\n\n// Test _writableState for inheritance to account for Duplex streams,\n// whose prototype chain only points to Readable.\nvar realHasInstance;\nif (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {\n  realHasInstance = Function.prototype[Symbol.hasInstance];\n  Object.defineProperty(Writable, Symbol.hasInstance, {\n    value: function (object) {\n      if (realHasInstance.call(this, object)) return true;\n      if (this !== Writable) return false;\n\n      return object && object._writableState instanceof WritableState;\n    }\n  });\n} else {\n  realHasInstance = function (object) {\n    return object instanceof this;\n  };\n}\n\nfunction Writable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {\n    return new Writable(options);\n  }\n\n  this._writableState = new WritableState(options, this);\n\n  // legacy.\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n\n    if (typeof options.writev === 'function') this._writev = options.writev;\n\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n\n    if (typeof options.final === 'function') this._final = options.final;\n  }\n\n  Stream.call(this);\n}\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function () {\n  this.emit('error', new Error('Cannot pipe, not readable'));\n};\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new Error('write after end');\n  // TODO: defer error events consistently everywhere, not just the cb\n  stream.emit('error', er);\n  pna.nextTick(cb, er);\n}\n\n// Checks that a user-supplied chunk is valid, especially for the particular\n// mode the stream is in. Currently this means that `null` is never accepted\n// and undefined/non-string values are only allowed in object mode.\nfunction validChunk(stream, state, chunk, cb) {\n  var valid = true;\n  var er = false;\n\n  if (chunk === null) {\n    er = new TypeError('May not write null values to stream');\n  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  if (er) {\n    stream.emit('error', er);\n    pna.nextTick(cb, er);\n    valid = false;\n  }\n  return valid;\n}\n\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n  var isBuf = !state.objectMode && _isUint8Array(chunk);\n\n  if (isBuf && !Buffer.isBuffer(chunk)) {\n    chunk = _uint8ArrayToBuffer(chunk);\n  }\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n\n  if (typeof cb !== 'function') cb = nop;\n\n  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n  }\n\n  return ret;\n};\n\nWritable.prototype.cork = function () {\n  var state = this._writableState;\n\n  state.corked++;\n};\n\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n\n    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = Buffer.from(chunk, encoding);\n  }\n  return chunk;\n}\n\nObject.defineProperty(Writable.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._writableState.highWaterMark;\n  }\n});\n\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n  if (!isBuf) {\n    var newChunk = decodeChunk(state, chunk, encoding);\n    if (chunk !== newChunk) {\n      isBuf = true;\n      encoding = 'buffer';\n      chunk = newChunk;\n    }\n  }\n  var len = state.objectMode ? 1 : chunk.length;\n\n  state.length += len;\n\n  var ret = state.length < state.highWaterMark;\n  // we must ensure that previous needDrain will not be reset to false.\n  if (!ret) state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = {\n      chunk: chunk,\n      encoding: encoding,\n      isBuf: isBuf,\n      callback: cb,\n      next: null\n    };\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n\n  if (sync) {\n    // defer the callback if we are being called synchronously\n    // to avoid piling up things on the stack\n    pna.nextTick(cb, er);\n    // this can emit finish, and it will always happen\n    // after error\n    pna.nextTick(finishMaybe, stream, state);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n  } else {\n    // the caller expect this to happen before if\n    // it is async\n    cb(er);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n    // this can emit finish, but finish must\n    // always follow error\n    finishMaybe(stream, state);\n  }\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n\n  onwriteStateUpdate(state);\n\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state);\n\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      /*<replacement>*/\n      asyncWrite(afterWrite, stream, state, finished, cb);\n      /*</replacement>*/\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n}\n\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n}\n\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n\n    var count = 0;\n    var allBuffers = true;\n    while (entry) {\n      buffer[count] = entry;\n      if (!entry.isBuf) allBuffers = false;\n      entry = entry.next;\n      count += 1;\n    }\n    buffer.allBuffers = allBuffers;\n\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish);\n\n    // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n    state.bufferedRequestCount = 0;\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      state.bufferedRequestCount--;\n      // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new Error('_write() is not implemented'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);\n\n  // .end() fully uncorks\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  }\n\n  // ignore unnecessary end() calls.\n  if (!state.ending) endWritable(this, state, cb);\n};\n\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\nfunction callFinal(stream, state) {\n  stream._final(function (err) {\n    state.pendingcb--;\n    if (err) {\n      stream.emit('error', err);\n    }\n    state.prefinished = true;\n    stream.emit('prefinish');\n    finishMaybe(stream, state);\n  });\n}\nfunction prefinish(stream, state) {\n  if (!state.prefinished && !state.finalCalled) {\n    if (typeof stream._final === 'function') {\n      state.pendingcb++;\n      state.finalCalled = true;\n      pna.nextTick(callFinal, stream, state);\n    } else {\n      state.prefinished = true;\n      stream.emit('prefinish');\n    }\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n  if (need) {\n    prefinish(stream, state);\n    if (state.pendingcb === 0) {\n      state.finished = true;\n      stream.emit('finish');\n    }\n  }\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n  if (cb) {\n    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);\n  }\n  state.ended = true;\n  stream.writable = false;\n}\n\nfunction onCorkedFinish(corkReq, state, err) {\n  var entry = corkReq.entry;\n  corkReq.entry = null;\n  while (entry) {\n    var cb = entry.callback;\n    state.pendingcb--;\n    cb(err);\n    entry = entry.next;\n  }\n\n  // reuse the free corkReq.\n  state.corkedRequestsFree.next = corkReq;\n}\n\nObject.defineProperty(Writable.prototype, 'destroyed', {\n  get: function () {\n    if (this._writableState === undefined) {\n      return false;\n    }\n    return this._writableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._writableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._writableState.destroyed = value;\n  }\n});\n\nWritable.prototype.destroy = destroyImpl.destroy;\nWritable.prototype._undestroy = destroyImpl.undestroy;\nWritable.prototype._destroy = function (err, cb) {\n  this.end();\n  cb(err);\n};\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$process$browser","~$shadow.js","~$module$node_modules$inherits$inherits_browser","~$module$node_modules$readable_stream$lib$_stream_duplex","~$module$node_modules$util$util","~$module$node_modules$readable_stream$lib$internal$streams$destroy","~$module$node_modules$readable_stream$lib$internal$streams$stream_browser","~$module$node_modules$process_nextick_args$index","~$module$node_modules$util_deprecate$browser","~$module$node_modules$readable_stream$node_modules$safe_buffer$index"]],"~:properties",["^5",["WritableState","callback","writelen","entry","_destroy","bufferedRequestCount","allBuffers","getBuffer","deprecate","next","prefinished","corked","_undestroy","needDrain","writecb","finalCalled","defaultEncoding","ended","encoding","bufferedRequest","onwrite","buffer","chunk","writing","value","sync","destroy","enumerable","finish","pendingcb","writable","inherits","_write","pipe","highWaterMark","length","cork","_writableState","_writev","lastBufferedRequest","corkedRequestsFree","set","bufferProcessing","ending","errorEmitted","isBuf","uncork","destroyed","decodeStrings","write","_final","objectMode","get","end","writableHighWaterMark","finished","setDefaultEncoding"]],"~:compiled-at",1695041440811,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$readable_stream$lib$_stream_writable.js\",\n\"lineCount\":14,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/readable-stream/lib/_stream_writable.js\"],\n\"sourcesContent\":[\"shadow$provide[150] = function(global,require,module,exports) {\\nvar process = require('process');\\n// Copyright Joyent, Inc. and other Node contributors.\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a\\n// copy of this software and associated documentation files (the\\n// \\\"Software\\\"), to deal in the Software without restriction, including\\n// without limitation the rights to use, copy, modify, merge, publish,\\n// distribute, sublicense, and/or sell copies of the Software, and to permit\\n// persons to whom the Software is furnished to do so, subject to the\\n// following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included\\n// in all copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\\n\\n// A bit simpler than readable streams.\\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\\n// the drain event emission and buffering.\\n\\n'use strict';\\n\\n/*<replacement>*/\\n\\nvar pna = require('process-nextick-args');\\n/*</replacement>*/\\n\\nmodule.exports = Writable;\\n\\n/* <replacement> */\\nfunction WriteReq(chunk, encoding, cb) {\\n  this.chunk = chunk;\\n  this.encoding = encoding;\\n  this.callback = cb;\\n  this.next = null;\\n}\\n\\n// It seems a linked list but it is not\\n// there will be only 2 of these for each stream\\nfunction CorkedRequest(state) {\\n  var _this = this;\\n\\n  this.next = null;\\n  this.entry = null;\\n  this.finish = function () {\\n    onCorkedFinish(_this, state);\\n  };\\n}\\n/* </replacement> */\\n\\n/*<replacement>*/\\nvar asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;\\n/*</replacement>*/\\n\\n/*<replacement>*/\\nvar Duplex;\\n/*</replacement>*/\\n\\nWritable.WritableState = WritableState;\\n\\n/*<replacement>*/\\nvar util = Object.create(require('core-util-is'));\\nutil.inherits = require('inherits');\\n/*</replacement>*/\\n\\n/*<replacement>*/\\nvar internalUtil = {\\n  deprecate: require('util-deprecate')\\n};\\n/*</replacement>*/\\n\\n/*<replacement>*/\\nvar Stream = require('./internal/streams/stream');\\n/*</replacement>*/\\n\\n/*<replacement>*/\\n\\nvar Buffer = require('safe-buffer').Buffer;\\nvar OurUint8Array = (typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};\\nfunction _uint8ArrayToBuffer(chunk) {\\n  return Buffer.from(chunk);\\n}\\nfunction _isUint8Array(obj) {\\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\\n}\\n\\n/*</replacement>*/\\n\\nvar destroyImpl = require('./internal/streams/destroy');\\n\\nutil.inherits(Writable, Stream);\\n\\nfunction nop() {}\\n\\nfunction WritableState(options, stream) {\\n  Duplex = Duplex || require('./_stream_duplex');\\n\\n  options = options || {};\\n\\n  // Duplex streams are both readable and writable, but share\\n  // the same options object.\\n  // However, some cases require setting options to different\\n  // values for the readable and the writable sides of the duplex stream.\\n  // These options can be provided separately as readableXXX and writableXXX.\\n  var isDuplex = stream instanceof Duplex;\\n\\n  // object stream flag to indicate whether or not this stream\\n  // contains buffers or objects.\\n  this.objectMode = !!options.objectMode;\\n\\n  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;\\n\\n  // the point at which write() starts returning false\\n  // Note: 0 is a valid value, means that we always return false if\\n  // the entire buffer is not flushed immediately on write()\\n  var hwm = options.highWaterMark;\\n  var writableHwm = options.writableHighWaterMark;\\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\\n\\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;\\n\\n  // cast to ints.\\n  this.highWaterMark = Math.floor(this.highWaterMark);\\n\\n  // if _final has been called\\n  this.finalCalled = false;\\n\\n  // drain event flag.\\n  this.needDrain = false;\\n  // at the start of calling end()\\n  this.ending = false;\\n  // when end() has been called, and returned\\n  this.ended = false;\\n  // when 'finish' is emitted\\n  this.finished = false;\\n\\n  // has it been destroyed\\n  this.destroyed = false;\\n\\n  // should we decode strings into buffers before passing to _write?\\n  // this is here so that some node-core streams can optimize string\\n  // handling at a lower level.\\n  var noDecode = options.decodeStrings === false;\\n  this.decodeStrings = !noDecode;\\n\\n  // Crypto is kind of old and crusty.  Historically, its default string\\n  // encoding is 'binary' so we have to make this configurable.\\n  // Everything else in the universe uses 'utf8', though.\\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\\n\\n  // not an actual buffer we keep track of, but a measurement\\n  // of how much we're waiting to get pushed to some underlying\\n  // socket or file.\\n  this.length = 0;\\n\\n  // a flag to see when we're in the middle of a write.\\n  this.writing = false;\\n\\n  // when true all writes will be buffered until .uncork() call\\n  this.corked = 0;\\n\\n  // a flag to be able to tell if the onwrite cb is called immediately,\\n  // or on a later tick.  We set this to true at first, because any\\n  // actions that shouldn't happen until \\\"later\\\" should generally also\\n  // not happen before the first write call.\\n  this.sync = true;\\n\\n  // a flag to know if we're processing previously buffered items, which\\n  // may call the _write() callback in the same tick, so that we don't\\n  // end up in an overlapped onwrite situation.\\n  this.bufferProcessing = false;\\n\\n  // the callback that's passed to _write(chunk,cb)\\n  this.onwrite = function (er) {\\n    onwrite(stream, er);\\n  };\\n\\n  // the callback that the user supplies to write(chunk,encoding,cb)\\n  this.writecb = null;\\n\\n  // the amount that is being written when _write is called.\\n  this.writelen = 0;\\n\\n  this.bufferedRequest = null;\\n  this.lastBufferedRequest = null;\\n\\n  // number of pending user-supplied write callbacks\\n  // this must be 0 before 'finish' can be emitted\\n  this.pendingcb = 0;\\n\\n  // emit prefinish if the only thing we're waiting for is _write cbs\\n  // This is relevant for synchronous Transform streams\\n  this.prefinished = false;\\n\\n  // True if the error was already emitted and should not be thrown again\\n  this.errorEmitted = false;\\n\\n  // count buffered requests\\n  this.bufferedRequestCount = 0;\\n\\n  // allocate the first CorkedRequest, there is always\\n  // one allocated and free to use, and we maintain at most two\\n  this.corkedRequestsFree = new CorkedRequest(this);\\n}\\n\\nWritableState.prototype.getBuffer = function getBuffer() {\\n  var current = this.bufferedRequest;\\n  var out = [];\\n  while (current) {\\n    out.push(current);\\n    current = current.next;\\n  }\\n  return out;\\n};\\n\\n(function () {\\n  try {\\n    Object.defineProperty(WritableState.prototype, 'buffer', {\\n      get: internalUtil.deprecate(function () {\\n        return this.getBuffer();\\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')\\n    });\\n  } catch (_) {}\\n})();\\n\\n// Test _writableState for inheritance to account for Duplex streams,\\n// whose prototype chain only points to Readable.\\nvar realHasInstance;\\nif (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {\\n  realHasInstance = Function.prototype[Symbol.hasInstance];\\n  Object.defineProperty(Writable, Symbol.hasInstance, {\\n    value: function (object) {\\n      if (realHasInstance.call(this, object)) return true;\\n      if (this !== Writable) return false;\\n\\n      return object && object._writableState instanceof WritableState;\\n    }\\n  });\\n} else {\\n  realHasInstance = function (object) {\\n    return object instanceof this;\\n  };\\n}\\n\\nfunction Writable(options) {\\n  Duplex = Duplex || require('./_stream_duplex');\\n\\n  // Writable ctor is applied to Duplexes, too.\\n  // `realHasInstance` is necessary because using plain `instanceof`\\n  // would return false, as no `_writableState` property is attached.\\n\\n  // Trying to use the custom `instanceof` for Writable here will also break the\\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\\n  // `_writableState` that would lead to infinite recursion.\\n  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {\\n    return new Writable(options);\\n  }\\n\\n  this._writableState = new WritableState(options, this);\\n\\n  // legacy.\\n  this.writable = true;\\n\\n  if (options) {\\n    if (typeof options.write === 'function') this._write = options.write;\\n\\n    if (typeof options.writev === 'function') this._writev = options.writev;\\n\\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\\n\\n    if (typeof options.final === 'function') this._final = options.final;\\n  }\\n\\n  Stream.call(this);\\n}\\n\\n// Otherwise people can pipe Writable streams, which is just wrong.\\nWritable.prototype.pipe = function () {\\n  this.emit('error', new Error('Cannot pipe, not readable'));\\n};\\n\\nfunction writeAfterEnd(stream, cb) {\\n  var er = new Error('write after end');\\n  // TODO: defer error events consistently everywhere, not just the cb\\n  stream.emit('error', er);\\n  pna.nextTick(cb, er);\\n}\\n\\n// Checks that a user-supplied chunk is valid, especially for the particular\\n// mode the stream is in. Currently this means that `null` is never accepted\\n// and undefined/non-string values are only allowed in object mode.\\nfunction validChunk(stream, state, chunk, cb) {\\n  var valid = true;\\n  var er = false;\\n\\n  if (chunk === null) {\\n    er = new TypeError('May not write null values to stream');\\n  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\\n    er = new TypeError('Invalid non-string/buffer chunk');\\n  }\\n  if (er) {\\n    stream.emit('error', er);\\n    pna.nextTick(cb, er);\\n    valid = false;\\n  }\\n  return valid;\\n}\\n\\nWritable.prototype.write = function (chunk, encoding, cb) {\\n  var state = this._writableState;\\n  var ret = false;\\n  var isBuf = !state.objectMode && _isUint8Array(chunk);\\n\\n  if (isBuf && !Buffer.isBuffer(chunk)) {\\n    chunk = _uint8ArrayToBuffer(chunk);\\n  }\\n\\n  if (typeof encoding === 'function') {\\n    cb = encoding;\\n    encoding = null;\\n  }\\n\\n  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\\n\\n  if (typeof cb !== 'function') cb = nop;\\n\\n  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {\\n    state.pendingcb++;\\n    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\\n  }\\n\\n  return ret;\\n};\\n\\nWritable.prototype.cork = function () {\\n  var state = this._writableState;\\n\\n  state.corked++;\\n};\\n\\nWritable.prototype.uncork = function () {\\n  var state = this._writableState;\\n\\n  if (state.corked) {\\n    state.corked--;\\n\\n    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\\n  }\\n};\\n\\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\\n  // node::ParseEncoding() requires lower case.\\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);\\n  this._writableState.defaultEncoding = encoding;\\n  return this;\\n};\\n\\nfunction decodeChunk(state, chunk, encoding) {\\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\\n    chunk = Buffer.from(chunk, encoding);\\n  }\\n  return chunk;\\n}\\n\\nObject.defineProperty(Writable.prototype, 'writableHighWaterMark', {\\n  // making it explicit this property is not enumerable\\n  // because otherwise some prototype manipulation in\\n  // userland will fail\\n  enumerable: false,\\n  get: function () {\\n    return this._writableState.highWaterMark;\\n  }\\n});\\n\\n// if we're already writing something, then just put this\\n// in the queue, and wait our turn.  Otherwise, call _write\\n// If we return false, then we need a drain event, so set that flag.\\nfunction writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\\n  if (!isBuf) {\\n    var newChunk = decodeChunk(state, chunk, encoding);\\n    if (chunk !== newChunk) {\\n      isBuf = true;\\n      encoding = 'buffer';\\n      chunk = newChunk;\\n    }\\n  }\\n  var len = state.objectMode ? 1 : chunk.length;\\n\\n  state.length += len;\\n\\n  var ret = state.length < state.highWaterMark;\\n  // we must ensure that previous needDrain will not be reset to false.\\n  if (!ret) state.needDrain = true;\\n\\n  if (state.writing || state.corked) {\\n    var last = state.lastBufferedRequest;\\n    state.lastBufferedRequest = {\\n      chunk: chunk,\\n      encoding: encoding,\\n      isBuf: isBuf,\\n      callback: cb,\\n      next: null\\n    };\\n    if (last) {\\n      last.next = state.lastBufferedRequest;\\n    } else {\\n      state.bufferedRequest = state.lastBufferedRequest;\\n    }\\n    state.bufferedRequestCount += 1;\\n  } else {\\n    doWrite(stream, state, false, len, chunk, encoding, cb);\\n  }\\n\\n  return ret;\\n}\\n\\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\\n  state.writelen = len;\\n  state.writecb = cb;\\n  state.writing = true;\\n  state.sync = true;\\n  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\\n  state.sync = false;\\n}\\n\\nfunction onwriteError(stream, state, sync, er, cb) {\\n  --state.pendingcb;\\n\\n  if (sync) {\\n    // defer the callback if we are being called synchronously\\n    // to avoid piling up things on the stack\\n    pna.nextTick(cb, er);\\n    // this can emit finish, and it will always happen\\n    // after error\\n    pna.nextTick(finishMaybe, stream, state);\\n    stream._writableState.errorEmitted = true;\\n    stream.emit('error', er);\\n  } else {\\n    // the caller expect this to happen before if\\n    // it is async\\n    cb(er);\\n    stream._writableState.errorEmitted = true;\\n    stream.emit('error', er);\\n    // this can emit finish, but finish must\\n    // always follow error\\n    finishMaybe(stream, state);\\n  }\\n}\\n\\nfunction onwriteStateUpdate(state) {\\n  state.writing = false;\\n  state.writecb = null;\\n  state.length -= state.writelen;\\n  state.writelen = 0;\\n}\\n\\nfunction onwrite(stream, er) {\\n  var state = stream._writableState;\\n  var sync = state.sync;\\n  var cb = state.writecb;\\n\\n  onwriteStateUpdate(state);\\n\\n  if (er) onwriteError(stream, state, sync, er, cb);else {\\n    // Check if we're actually ready to finish, but don't emit yet\\n    var finished = needFinish(state);\\n\\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\\n      clearBuffer(stream, state);\\n    }\\n\\n    if (sync) {\\n      /*<replacement>*/\\n      asyncWrite(afterWrite, stream, state, finished, cb);\\n      /*</replacement>*/\\n    } else {\\n      afterWrite(stream, state, finished, cb);\\n    }\\n  }\\n}\\n\\nfunction afterWrite(stream, state, finished, cb) {\\n  if (!finished) onwriteDrain(stream, state);\\n  state.pendingcb--;\\n  cb();\\n  finishMaybe(stream, state);\\n}\\n\\n// Must force callback to be called on nextTick, so that we don't\\n// emit 'drain' before the write() consumer gets the 'false' return\\n// value, and has a chance to attach a 'drain' listener.\\nfunction onwriteDrain(stream, state) {\\n  if (state.length === 0 && state.needDrain) {\\n    state.needDrain = false;\\n    stream.emit('drain');\\n  }\\n}\\n\\n// if there's something in the buffer waiting, then process it\\nfunction clearBuffer(stream, state) {\\n  state.bufferProcessing = true;\\n  var entry = state.bufferedRequest;\\n\\n  if (stream._writev && entry && entry.next) {\\n    // Fast case, write everything using _writev()\\n    var l = state.bufferedRequestCount;\\n    var buffer = new Array(l);\\n    var holder = state.corkedRequestsFree;\\n    holder.entry = entry;\\n\\n    var count = 0;\\n    var allBuffers = true;\\n    while (entry) {\\n      buffer[count] = entry;\\n      if (!entry.isBuf) allBuffers = false;\\n      entry = entry.next;\\n      count += 1;\\n    }\\n    buffer.allBuffers = allBuffers;\\n\\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish);\\n\\n    // doWrite is almost always async, defer these to save a bit of time\\n    // as the hot path ends with doWrite\\n    state.pendingcb++;\\n    state.lastBufferedRequest = null;\\n    if (holder.next) {\\n      state.corkedRequestsFree = holder.next;\\n      holder.next = null;\\n    } else {\\n      state.corkedRequestsFree = new CorkedRequest(state);\\n    }\\n    state.bufferedRequestCount = 0;\\n  } else {\\n    // Slow case, write chunks one-by-one\\n    while (entry) {\\n      var chunk = entry.chunk;\\n      var encoding = entry.encoding;\\n      var cb = entry.callback;\\n      var len = state.objectMode ? 1 : chunk.length;\\n\\n      doWrite(stream, state, false, len, chunk, encoding, cb);\\n      entry = entry.next;\\n      state.bufferedRequestCount--;\\n      // if we didn't call the onwrite immediately, then\\n      // it means that we need to wait until it does.\\n      // also, that means that the chunk and cb are currently\\n      // being processed, so move the buffer counter past them.\\n      if (state.writing) {\\n        break;\\n      }\\n    }\\n\\n    if (entry === null) state.lastBufferedRequest = null;\\n  }\\n\\n  state.bufferedRequest = entry;\\n  state.bufferProcessing = false;\\n}\\n\\nWritable.prototype._write = function (chunk, encoding, cb) {\\n  cb(new Error('_write() is not implemented'));\\n};\\n\\nWritable.prototype._writev = null;\\n\\nWritable.prototype.end = function (chunk, encoding, cb) {\\n  var state = this._writableState;\\n\\n  if (typeof chunk === 'function') {\\n    cb = chunk;\\n    chunk = null;\\n    encoding = null;\\n  } else if (typeof encoding === 'function') {\\n    cb = encoding;\\n    encoding = null;\\n  }\\n\\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);\\n\\n  // .end() fully uncorks\\n  if (state.corked) {\\n    state.corked = 1;\\n    this.uncork();\\n  }\\n\\n  // ignore unnecessary end() calls.\\n  if (!state.ending) endWritable(this, state, cb);\\n};\\n\\nfunction needFinish(state) {\\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\\n}\\nfunction callFinal(stream, state) {\\n  stream._final(function (err) {\\n    state.pendingcb--;\\n    if (err) {\\n      stream.emit('error', err);\\n    }\\n    state.prefinished = true;\\n    stream.emit('prefinish');\\n    finishMaybe(stream, state);\\n  });\\n}\\nfunction prefinish(stream, state) {\\n  if (!state.prefinished && !state.finalCalled) {\\n    if (typeof stream._final === 'function') {\\n      state.pendingcb++;\\n      state.finalCalled = true;\\n      pna.nextTick(callFinal, stream, state);\\n    } else {\\n      state.prefinished = true;\\n      stream.emit('prefinish');\\n    }\\n  }\\n}\\n\\nfunction finishMaybe(stream, state) {\\n  var need = needFinish(state);\\n  if (need) {\\n    prefinish(stream, state);\\n    if (state.pendingcb === 0) {\\n      state.finished = true;\\n      stream.emit('finish');\\n    }\\n  }\\n  return need;\\n}\\n\\nfunction endWritable(stream, state, cb) {\\n  state.ending = true;\\n  finishMaybe(stream, state);\\n  if (cb) {\\n    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);\\n  }\\n  state.ended = true;\\n  stream.writable = false;\\n}\\n\\nfunction onCorkedFinish(corkReq, state, err) {\\n  var entry = corkReq.entry;\\n  corkReq.entry = null;\\n  while (entry) {\\n    var cb = entry.callback;\\n    state.pendingcb--;\\n    cb(err);\\n    entry = entry.next;\\n  }\\n\\n  // reuse the free corkReq.\\n  state.corkedRequestsFree.next = corkReq;\\n}\\n\\nObject.defineProperty(Writable.prototype, 'destroyed', {\\n  get: function () {\\n    if (this._writableState === undefined) {\\n      return false;\\n    }\\n    return this._writableState.destroyed;\\n  },\\n  set: function (value) {\\n    // we ignore the value if the stream\\n    // has not been initialized yet\\n    if (!this._writableState) {\\n      return;\\n    }\\n\\n    // backward compatibility, the user is explicitly\\n    // managing destroyed\\n    this._writableState.destroyed = value;\\n  }\\n});\\n\\nWritable.prototype.destroy = destroyImpl.destroy;\\nWritable.prototype._undestroy = destroyImpl.undestroy;\\nWritable.prototype._destroy = function (err, cb) {\\n  this.end();\\n  cb(err);\\n};\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"CorkedRequest\",\"state\",\"_this\",\"entry\",\"next\",\"finish\",\"this.finish\",\"cb\",\"callback\",\"pendingcb\",\"err\",\"corkedRequestsFree\",\"nop\",\"WritableState\",\"options\",\"stream\",\"Duplex\",\"isDuplex\",\"objectMode\",\"writableObjectMode\",\"hwm\",\"highWaterMark\",\"writableHwm\",\"writableHighWaterMark\",\"defaultHwm\",\"Math\",\"floor\",\"destroyed\",\"finished\",\"ended\",\"ending\",\"needDrain\",\"finalCalled\",\"decodeStrings\",\"defaultEncoding\",\"length\",\"writing\",\"corked\",\"sync\",\"bufferProcessing\",\"onwrite\",\"this.onwrite\",\"er\",\"_writableState\",\"writecb\",\"writelen\",\"pna\",\"nextTick\",\"finishMaybe\",\"errorEmitted\",\"emit\",\"needFinish\",\"bufferedRequest\",\"clearBuffer\",\"asyncWrite\",\"afterWrite\",\"lastBufferedRequest\",\"prefinished\",\"bufferedRequestCount\",\"Writable\",\"realHasInstance\",\"call\",\"writable\",\"write\",\"_write\",\"writev\",\"_writev\",\"destroy\",\"_destroy\",\"final\",\"_final\",\"Stream\",\"doWrite\",\"len\",\"chunk\",\"encoding\",\"buffer\",\"Array\",\"holder\",\"count\",\"allBuffers\",\"isBuf\",\"callFinal\",\"need\",\"process\",\"browser\",\"indexOf\",\"version\",\"slice\",\"setImmediate\",\"util\",\"Object\",\"create\",\"inherits\",\"internalUtil\",\"deprecate\",\"Buffer\",\"OurUint8Array\",\"Uint8Array\",\"window\",\"self\",\"destroyImpl\",\"prototype\",\"getBuffer\",\"WritableState.prototype.getBuffer\",\"current\",\"out\",\"push\",\"defineProperty\",\"get\",\"_\",\"Symbol\",\"hasInstance\",\"Function\",\"value\",\"object\",\"pipe\",\"Writable.prototype.pipe\",\"Error\",\"Writable.prototype.write\",\"ret\",\"isBuffer\",\"obj\",\"from\",\"valid\",\"TypeError\",\"undefined\",\"newChunk\",\"last\",\"cork\",\"Writable.prototype.cork\",\"uncork\",\"Writable.prototype.uncork\",\"setDefaultEncoding\",\"Writable.prototype.setDefaultEncoding\",\"toLowerCase\",\"enumerable\",\"Writable.prototype._write\",\"end\",\"Writable.prototype.end\",\"once\",\"set\",\"_undestroy\",\"undestroy\",\"Writable.prototype._destroy\"]\n}\n"]