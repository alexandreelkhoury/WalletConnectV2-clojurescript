["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/viem/node_modules/abitype/dist/cjs/human-readable/parseAbiParameters.js"],"~:js","shadow$provide.module$node_modules$viem$node_modules$abitype$dist$cjs$human_readable$parseAbiParameters=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.parseAbiParameters=void 0;const index_js_1=require(\"module$node_modules$viem$node_modules$abitype$dist$cjs$index\"),signatures_js_1=require(\"module$node_modules$viem$node_modules$abitype$dist$cjs$human_readable$runtime$signatures\"),structs_js_1=require(\"module$node_modules$viem$node_modules$abitype$dist$cjs$human_readable$runtime$structs\"),\nutils_js_1=require(\"module$node_modules$viem$node_modules$abitype$dist$cjs$human_readable$runtime$utils\"),utils_js_2=require(\"module$node_modules$viem$node_modules$abitype$dist$cjs$human_readable$runtime$utils\");exports.parseAbiParameters=function(params){const abiParameters=[];if(\"string\"===typeof params){var parameters=(0,utils_js_1.splitParameters)(params),length$jscomp$0=parameters.length;for(var i=0;i<length$jscomp$0;i++)abiParameters.push((0,utils_js_2.parseAbiParameter)(parameters[i],{modifiers:signatures_js_1.modifiers}))}else for(parameters=\n(0,structs_js_1.parseStructs)(params),length$jscomp$0=params.length,i=0;i<length$jscomp$0;i++){var signature=params[i];if((0,signatures_js_1.isStructSignature)(signature))continue;signature=(0,utils_js_1.splitParameters)(signature);const length=signature.length;for(let k=0;k<length;k++)abiParameters.push((0,utils_js_2.parseAbiParameter)(signature[k],{modifiers:signatures_js_1.modifiers,structs:parameters}))}if(0===abiParameters.length)throw new index_js_1.InvalidAbiParametersError({params});return abiParameters}}","~:source","shadow$provide[\"module$node_modules$viem$node_modules$abitype$dist$cjs$human_readable$parseAbiParameters\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseAbiParameters = void 0;\nconst index_js_1 = require(\"../index.js\");\nconst signatures_js_1 = require(\"./runtime/signatures.js\");\nconst structs_js_1 = require(\"./runtime/structs.js\");\nconst utils_js_1 = require(\"./runtime/utils.js\");\nconst utils_js_2 = require(\"./runtime/utils.js\");\nfunction parseAbiParameters(params) {\n    const abiParameters = [];\n    if (typeof params === 'string') {\n        const parameters = (0, utils_js_1.splitParameters)(params);\n        const length = parameters.length;\n        for (let i = 0; i < length; i++) {\n            abiParameters.push((0, utils_js_2.parseAbiParameter)(parameters[i], { modifiers: signatures_js_1.modifiers }));\n        }\n    }\n    else {\n        const structs = (0, structs_js_1.parseStructs)(params);\n        const length = params.length;\n        for (let i = 0; i < length; i++) {\n            const signature = params[i];\n            if ((0, signatures_js_1.isStructSignature)(signature))\n                continue;\n            const parameters = (0, utils_js_1.splitParameters)(signature);\n            const length = parameters.length;\n            for (let k = 0; k < length; k++) {\n                abiParameters.push((0, utils_js_2.parseAbiParameter)(parameters[k], { modifiers: signatures_js_1.modifiers, structs }));\n            }\n        }\n    }\n    if (abiParameters.length === 0)\n        throw new index_js_1.InvalidAbiParametersError({ params });\n    return abiParameters;\n}\nexports.parseAbiParameters = parseAbiParameters;\n//# sourceMappingURL=parseAbiParameters.js.map\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$viem$node_modules$abitype$dist$cjs$human_readable$runtime$utils","~$module$node_modules$viem$node_modules$abitype$dist$cjs$human_readable$runtime$structs","~$shadow.js","~$module$node_modules$viem$node_modules$abitype$dist$cjs$index","~$module$node_modules$viem$node_modules$abitype$dist$cjs$human_readable$runtime$signatures"]],"~:properties",["^5",["params","parseAbiParameters","__esModule","value","modifiers","structs"]],"~:compiled-at",1695111490216,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$viem$node_modules$abitype$dist$cjs$human_readable$parseAbiParameters.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAA,wFAAA,CAA6G,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAErJC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CACAH,QAAQI,CAAAA,kBAAR,CAA6B,IAAK,EAClC,OAAMC,WAAaP,OAAA,CAAQ,8DAAR,CAAnB,CACMQ,gBAAkBR,OAAA,CAAQ,0FAAR,CADxB,CAEMS,aAAeT,OAAA,CAAQ,uFAAR,CAFrB;AAGMU,WAAaV,OAAA,CAAQ,qFAAR,CAHnB,CAIMW,WAAaX,OAAA,CAAQ,qFAAR,CA4BnBE,QAAQI,CAAAA,kBAAR,CA3BAA,QAA2B,CAACM,MAAD,CAAS,CAChC,MAAMC,cAAgB,EACtB,IAAsB,QAAtB,GAAI,MAAOD,OAAX,CAAgC,CAC5B,IAAME,WAAa,GAAIJ,UAAWK,CAAAA,eAAf,EAAgCH,MAAhC,CAAnB,CACMI,gBAASF,UAAWE,CAAAA,MAC1B,KAAK,IAAIC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBD,eAApB,CAA4BC,CAAA,EAA5B,CACIJ,aAAcK,CAAAA,IAAd,CAAmB,GAAIP,UAAWQ,CAAAA,iBAAf,EAAkCL,UAAA,CAAWG,CAAX,CAAlC,CAAiD,CAAEG,UAAWZ,eAAgBY,CAAAA,SAA7B,CAAjD,CAAnB,CAJwB,CAAhC,IAUI,KAFMC,UAEGJ;AAFO,GAAIR,YAAaa,CAAAA,YAAjB,EAA+BV,MAA/B,CAEPK,CADHD,eACGC,CADML,MAAOI,CAAAA,MACbC,CAAAA,CAAAA,CAAI,CAAb,CAAgBA,CAAhB,CAAoBD,eAApB,CAA4BC,CAAA,EAA5B,CAAiC,CAC7B,IAAMM,UAAYX,MAAA,CAAOK,CAAP,CAClB,IAAI,GAAIT,eAAgBgB,CAAAA,iBAApB,EAAuCD,SAAvC,CAAJ,CACI,QACET,UAAAA,CAAa,GAAIJ,UAAWK,CAAAA,eAAf,EAAgCQ,SAAhC,CACnB,OAAMP,OAASF,SAAWE,CAAAA,MAC1B,KAAK,IAAIS,EAAI,CAAb,CAAgBA,CAAhB,CAAoBT,MAApB,CAA4BS,CAAA,EAA5B,CACIZ,aAAcK,CAAAA,IAAd,CAAmB,GAAIP,UAAWQ,CAAAA,iBAAf,EAAkCL,SAAA,CAAWW,CAAX,CAAlC,CAAiD,CAAEL,UAAWZ,eAAgBY,CAAAA,SAA7B,CAAwCC,QAAAA,UAAxC,CAAjD,CAAnB,CAPyB,CAWrC,GAA6B,CAA7B,GAAIR,aAAcG,CAAAA,MAAlB,CACI,KAAM,KAAIT,UAAWmB,CAAAA,yBAAf,CAAyC,CAAEd,MAAF,CAAzC,CAAN,CACJ,MAAOC,cAzByB,CATiH;\",\n\"sources\":[\"node_modules/viem/node_modules/abitype/dist/cjs/human-readable/parseAbiParameters.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$viem$node_modules$abitype$dist$cjs$human_readable$parseAbiParameters\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nexports.parseAbiParameters = void 0;\\nconst index_js_1 = require(\\\"../index.js\\\");\\nconst signatures_js_1 = require(\\\"./runtime/signatures.js\\\");\\nconst structs_js_1 = require(\\\"./runtime/structs.js\\\");\\nconst utils_js_1 = require(\\\"./runtime/utils.js\\\");\\nconst utils_js_2 = require(\\\"./runtime/utils.js\\\");\\nfunction parseAbiParameters(params) {\\n    const abiParameters = [];\\n    if (typeof params === 'string') {\\n        const parameters = (0, utils_js_1.splitParameters)(params);\\n        const length = parameters.length;\\n        for (let i = 0; i < length; i++) {\\n            abiParameters.push((0, utils_js_2.parseAbiParameter)(parameters[i], { modifiers: signatures_js_1.modifiers }));\\n        }\\n    }\\n    else {\\n        const structs = (0, structs_js_1.parseStructs)(params);\\n        const length = params.length;\\n        for (let i = 0; i < length; i++) {\\n            const signature = params[i];\\n            if ((0, signatures_js_1.isStructSignature)(signature))\\n                continue;\\n            const parameters = (0, utils_js_1.splitParameters)(signature);\\n            const length = parameters.length;\\n            for (let k = 0; k < length; k++) {\\n                abiParameters.push((0, utils_js_2.parseAbiParameter)(parameters[k], { modifiers: signatures_js_1.modifiers, structs }));\\n            }\\n        }\\n    }\\n    if (abiParameters.length === 0)\\n        throw new index_js_1.InvalidAbiParametersError({ params });\\n    return abiParameters;\\n}\\nexports.parseAbiParameters = parseAbiParameters;\\n//# sourceMappingURL=parseAbiParameters.js.map\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"parseAbiParameters\",\"index_js_1\",\"signatures_js_1\",\"structs_js_1\",\"utils_js_1\",\"utils_js_2\",\"params\",\"abiParameters\",\"parameters\",\"splitParameters\",\"length\",\"i\",\"push\",\"parseAbiParameter\",\"modifiers\",\"structs\",\"parseStructs\",\"signature\",\"isStructSignature\",\"k\",\"InvalidAbiParametersError\"]\n}\n"]