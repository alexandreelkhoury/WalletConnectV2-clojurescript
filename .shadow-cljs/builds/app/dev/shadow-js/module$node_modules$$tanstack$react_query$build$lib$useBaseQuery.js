["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@tanstack/react-query/build/lib/useBaseQuery.js"],"~:js","shadow$provide.module$node_modules$$tanstack$react_query$build$lib$useBaseQuery=function(global,require,module,exports){\"use client\";\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0});global=require(\"module$node_modules$react$index\");var queryCore=require(\"module$node_modules$$tanstack$query_core$build$lib$index\"),useSyncExternalStore=require(\"module$node_modules$$tanstack$react_query$build$lib$useSyncExternalStore\"),QueryErrorResetBoundary=require(\"module$node_modules$$tanstack$react_query$build$lib$QueryErrorResetBoundary\"),\nQueryClientProvider=require(\"module$node_modules$$tanstack$react_query$build$lib$QueryClientProvider\"),isRestoring=require(\"module$node_modules$$tanstack$react_query$build$lib$isRestoring\"),errorBoundaryUtils=require(\"module$node_modules$$tanstack$react_query$build$lib$errorBoundaryUtils\"),suspense=require(\"module$node_modules$$tanstack$react_query$build$lib$suspense\"),React__namespace=function(e){if(e&&e.__esModule)return e;var n=Object.create(null);e&&Object.keys(e).forEach(function(k){if(\"default\"!==\nk){var d=Object.getOwnPropertyDescriptor(e,k);Object.defineProperty(n,k,d.get?d:{enumerable:!0,get:function(){return e[k]}})}});n[\"default\"]=e;return Object.freeze(n)}(global);exports.useBaseQuery=function(options,Observer){const queryClient=QueryClientProvider.useQueryClient({context:options.context}),isRestoring$1=isRestoring.useIsRestoring(),errorResetBoundary=QueryErrorResetBoundary.useQueryErrorResetBoundary(),defaultedOptions=queryClient.defaultQueryOptions(options);defaultedOptions._optimisticResults=\nisRestoring$1?\"isRestoring\":\"optimistic\";defaultedOptions.onError&&(defaultedOptions.onError=queryCore.notifyManager.batchCalls(defaultedOptions.onError));defaultedOptions.onSuccess&&(defaultedOptions.onSuccess=queryCore.notifyManager.batchCalls(defaultedOptions.onSuccess));defaultedOptions.onSettled&&(defaultedOptions.onSettled=queryCore.notifyManager.batchCalls(defaultedOptions.onSettled));suspense.ensureStaleTime(defaultedOptions);errorBoundaryUtils.ensurePreventErrorBoundaryRetry(defaultedOptions,\nerrorResetBoundary);errorBoundaryUtils.useClearResetErrorBoundary(errorResetBoundary);const [observer]=React__namespace.useState(()=>new Observer(queryClient,defaultedOptions));options=observer.getOptimisticResult(defaultedOptions);useSyncExternalStore.useSyncExternalStore(React__namespace.useCallback(onStoreChange=>{onStoreChange=isRestoring$1?()=>{}:observer.subscribe(queryCore.notifyManager.batchCalls(onStoreChange));observer.updateResult();return onStoreChange},[observer,isRestoring$1]),()=>observer.getCurrentResult(),\n()=>observer.getCurrentResult());React__namespace.useEffect(()=>{observer.setOptions(defaultedOptions,{listeners:!1})},[defaultedOptions,observer]);if(suspense.shouldSuspend(defaultedOptions,options,isRestoring$1))throw suspense.fetchOptimistic(defaultedOptions,observer,errorResetBoundary);if(errorBoundaryUtils.getHasError({result:options,errorResetBoundary,useErrorBoundary:defaultedOptions.useErrorBoundary,query:observer.getCurrentQuery()}))throw options.error;return defaultedOptions.notifyOnChangeProps?\noptions:observer.trackResult(options)}}","~:source","shadow$provide[\"module$node_modules$$tanstack$react_query$build$lib$useBaseQuery\"] = function(global,require,module,exports) {\n'use client';\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar React = require('react');\nvar queryCore = require('@tanstack/query-core');\nvar useSyncExternalStore = require('./useSyncExternalStore');\nvar QueryErrorResetBoundary = require('./QueryErrorResetBoundary.js');\nvar QueryClientProvider = require('./QueryClientProvider.js');\nvar isRestoring = require('./isRestoring.js');\nvar errorBoundaryUtils = require('./errorBoundaryUtils.js');\nvar suspense = require('./suspense.js');\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () { return e[k]; }\n        });\n      }\n    });\n  }\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\n\nvar React__namespace = /*#__PURE__*/_interopNamespace(React);\n\nfunction useBaseQuery(options, Observer) {\n  const queryClient = QueryClientProvider.useQueryClient({\n    context: options.context\n  });\n  const isRestoring$1 = isRestoring.useIsRestoring();\n  const errorResetBoundary = QueryErrorResetBoundary.useQueryErrorResetBoundary();\n  const defaultedOptions = queryClient.defaultQueryOptions(options); // Make sure results are optimistically set in fetching state before subscribing or updating options\n\n  defaultedOptions._optimisticResults = isRestoring$1 ? 'isRestoring' : 'optimistic'; // Include callbacks in batch renders\n\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = queryCore.notifyManager.batchCalls(defaultedOptions.onError);\n  }\n\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = queryCore.notifyManager.batchCalls(defaultedOptions.onSuccess);\n  }\n\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = queryCore.notifyManager.batchCalls(defaultedOptions.onSettled);\n  }\n\n  suspense.ensureStaleTime(defaultedOptions);\n  errorBoundaryUtils.ensurePreventErrorBoundaryRetry(defaultedOptions, errorResetBoundary);\n  errorBoundaryUtils.useClearResetErrorBoundary(errorResetBoundary);\n  const [observer] = React__namespace.useState(() => new Observer(queryClient, defaultedOptions));\n  const result = observer.getOptimisticResult(defaultedOptions);\n  useSyncExternalStore.useSyncExternalStore(React__namespace.useCallback(onStoreChange => {\n    const unsubscribe = isRestoring$1 ? () => undefined : observer.subscribe(queryCore.notifyManager.batchCalls(onStoreChange)); // Update result to make sure we did not miss any query updates\n    // between creating the observer and subscribing to it.\n\n    observer.updateResult();\n    return unsubscribe;\n  }, [observer, isRestoring$1]), () => observer.getCurrentResult(), () => observer.getCurrentResult());\n  React__namespace.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setOptions(defaultedOptions, {\n      listeners: false\n    });\n  }, [defaultedOptions, observer]); // Handle suspense\n\n  if (suspense.shouldSuspend(defaultedOptions, result, isRestoring$1)) {\n    throw suspense.fetchOptimistic(defaultedOptions, observer, errorResetBoundary);\n  } // Handle error boundary\n\n\n  if (errorBoundaryUtils.getHasError({\n    result,\n    errorResetBoundary,\n    useErrorBoundary: defaultedOptions.useErrorBoundary,\n    query: observer.getCurrentQuery()\n  })) {\n    throw result.error;\n  } // Handle result property usage tracking\n\n\n  return !defaultedOptions.notifyOnChangeProps ? observer.trackResult(result) : result;\n}\n\nexports.useBaseQuery = useBaseQuery;\n//# sourceMappingURL=useBaseQuery.js.map\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$$tanstack$react_query$build$lib$isRestoring","~$module$node_modules$$tanstack$query_core$build$lib$index","~$module$node_modules$react$index","~$shadow.js","~$module$node_modules$$tanstack$react_query$build$lib$suspense","~$module$node_modules$$tanstack$react_query$build$lib$QueryClientProvider","~$module$node_modules$$tanstack$react_query$build$lib$errorBoundaryUtils","~$module$node_modules$$tanstack$react_query$build$lib$useSyncExternalStore","~$module$node_modules$$tanstack$react_query$build$lib$QueryErrorResetBoundary"]],"~:properties",["^5",["useErrorBoundary","onSettled","query","__esModule","onError","errorResetBoundary","value","enumerable","context","useBaseQuery","onSuccess","_optimisticResults","listeners","get","result"]],"~:compiled-at",1695111490190,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$tanstack$react_query$build$lib$useBaseQuery.js\",\n\"lineCount\":7,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/@tanstack/react-query/build/lib/useBaseQuery.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$tanstack$react_query$build$lib$useBaseQuery\\\"] = function(global,require,module,exports) {\\n'use client';\\n'use strict';\\n\\nObject.defineProperty(exports, '__esModule', { value: true });\\n\\nvar React = require('react');\\nvar queryCore = require('@tanstack/query-core');\\nvar useSyncExternalStore = require('./useSyncExternalStore');\\nvar QueryErrorResetBoundary = require('./QueryErrorResetBoundary.js');\\nvar QueryClientProvider = require('./QueryClientProvider.js');\\nvar isRestoring = require('./isRestoring.js');\\nvar errorBoundaryUtils = require('./errorBoundaryUtils.js');\\nvar suspense = require('./suspense.js');\\n\\nfunction _interopNamespace(e) {\\n  if (e && e.__esModule) return e;\\n  var n = Object.create(null);\\n  if (e) {\\n    Object.keys(e).forEach(function (k) {\\n      if (k !== 'default') {\\n        var d = Object.getOwnPropertyDescriptor(e, k);\\n        Object.defineProperty(n, k, d.get ? d : {\\n          enumerable: true,\\n          get: function () { return e[k]; }\\n        });\\n      }\\n    });\\n  }\\n  n[\\\"default\\\"] = e;\\n  return Object.freeze(n);\\n}\\n\\nvar React__namespace = /*#__PURE__*/_interopNamespace(React);\\n\\nfunction useBaseQuery(options, Observer) {\\n  const queryClient = QueryClientProvider.useQueryClient({\\n    context: options.context\\n  });\\n  const isRestoring$1 = isRestoring.useIsRestoring();\\n  const errorResetBoundary = QueryErrorResetBoundary.useQueryErrorResetBoundary();\\n  const defaultedOptions = queryClient.defaultQueryOptions(options); // Make sure results are optimistically set in fetching state before subscribing or updating options\\n\\n  defaultedOptions._optimisticResults = isRestoring$1 ? 'isRestoring' : 'optimistic'; // Include callbacks in batch renders\\n\\n  if (defaultedOptions.onError) {\\n    defaultedOptions.onError = queryCore.notifyManager.batchCalls(defaultedOptions.onError);\\n  }\\n\\n  if (defaultedOptions.onSuccess) {\\n    defaultedOptions.onSuccess = queryCore.notifyManager.batchCalls(defaultedOptions.onSuccess);\\n  }\\n\\n  if (defaultedOptions.onSettled) {\\n    defaultedOptions.onSettled = queryCore.notifyManager.batchCalls(defaultedOptions.onSettled);\\n  }\\n\\n  suspense.ensureStaleTime(defaultedOptions);\\n  errorBoundaryUtils.ensurePreventErrorBoundaryRetry(defaultedOptions, errorResetBoundary);\\n  errorBoundaryUtils.useClearResetErrorBoundary(errorResetBoundary);\\n  const [observer] = React__namespace.useState(() => new Observer(queryClient, defaultedOptions));\\n  const result = observer.getOptimisticResult(defaultedOptions);\\n  useSyncExternalStore.useSyncExternalStore(React__namespace.useCallback(onStoreChange => {\\n    const unsubscribe = isRestoring$1 ? () => undefined : observer.subscribe(queryCore.notifyManager.batchCalls(onStoreChange)); // Update result to make sure we did not miss any query updates\\n    // between creating the observer and subscribing to it.\\n\\n    observer.updateResult();\\n    return unsubscribe;\\n  }, [observer, isRestoring$1]), () => observer.getCurrentResult(), () => observer.getCurrentResult());\\n  React__namespace.useEffect(() => {\\n    // Do not notify on updates because of changes in the options because\\n    // these changes should already be reflected in the optimistic result.\\n    observer.setOptions(defaultedOptions, {\\n      listeners: false\\n    });\\n  }, [defaultedOptions, observer]); // Handle suspense\\n\\n  if (suspense.shouldSuspend(defaultedOptions, result, isRestoring$1)) {\\n    throw suspense.fetchOptimistic(defaultedOptions, observer, errorResetBoundary);\\n  } // Handle error boundary\\n\\n\\n  if (errorBoundaryUtils.getHasError({\\n    result,\\n    errorResetBoundary,\\n    useErrorBoundary: defaultedOptions.useErrorBoundary,\\n    query: observer.getCurrentQuery()\\n  })) {\\n    throw result.error;\\n  } // Handle result property usage tracking\\n\\n\\n  return !defaultedOptions.notifyOnChangeProps ? observer.trackResult(result) : result;\\n}\\n\\nexports.useBaseQuery = useBaseQuery;\\n//# sourceMappingURL=useBaseQuery.js.map\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"React\",\"queryCore\",\"useSyncExternalStore\",\"QueryErrorResetBoundary\",\"QueryClientProvider\",\"isRestoring\",\"errorBoundaryUtils\",\"suspense\",\"React__namespace\",\"_interopNamespace\",\"e\",\"__esModule\",\"n\",\"create\",\"keys\",\"forEach\",\"k\",\"d\",\"getOwnPropertyDescriptor\",\"get\",\"enumerable\",\"freeze\",\"useBaseQuery\",\"options\",\"Observer\",\"queryClient\",\"useQueryClient\",\"context\",\"isRestoring$1\",\"useIsRestoring\",\"errorResetBoundary\",\"useQueryErrorResetBoundary\",\"defaultedOptions\",\"defaultQueryOptions\",\"_optimisticResults\",\"onError\",\"notifyManager\",\"batchCalls\",\"onSuccess\",\"onSettled\",\"ensureStaleTime\",\"ensurePreventErrorBoundaryRetry\",\"useClearResetErrorBoundary\",\"observer\",\"useState\",\"result\",\"getOptimisticResult\",\"useCallback\",\"onStoreChange\",\"unsubscribe\",\"undefined\",\"subscribe\",\"updateResult\",\"getCurrentResult\",\"useEffect\",\"setOptions\",\"listeners\",\"shouldSuspend\",\"fetchOptimistic\",\"getHasError\",\"useErrorBoundary\",\"query\",\"getCurrentQuery\",\"error\",\"notifyOnChangeProps\",\"trackResult\"]\n}\n"]