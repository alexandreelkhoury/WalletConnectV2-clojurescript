shadow$provide.module$node_modules$$tanstack$query_core$build$lib$infiniteQueryBehavior=function(global,require,module,exports){function getNextPageParam(options,pages){return null==options.getNextPageParam?void 0:options.getNextPageParam(pages[pages.length-1],pages)}function getPreviousPageParam(options,pages){return null==options.getPreviousPageParam?void 0:options.getPreviousPageParam(pages[0],pages)}Object.defineProperty(exports,"__esModule",{value:!0});exports.getNextPageParam=getNextPageParam;
exports.getPreviousPageParam=getPreviousPageParam;exports.hasNextPage=function(options,pages){if(options.getNextPageParam&&Array.isArray(pages))return options=getNextPageParam(options,pages),"undefined"!==typeof options&&null!==options&&!1!==options};exports.hasPreviousPage=function(options,pages){if(options.getPreviousPageParam&&Array.isArray(pages))return options=getPreviousPageParam(options,pages),"undefined"!==typeof options&&null!==options&&!1!==options};exports.infiniteQueryBehavior=function(){return{onFetch:context=>
{context.fetchFn=()=>{var _context$fetchOptions,_context$fetchOptions2,_context$fetchOptions3,_context$fetchOptions4,_context$state$data,_context$state$data2;const refetchPage=null==(_context$fetchOptions=context.fetchOptions)?void 0:null==(_context$fetchOptions2=_context$fetchOptions.meta)?void 0:_context$fetchOptions2.refetchPage;_context$fetchOptions=null==(_context$fetchOptions3=context.fetchOptions)?void 0:null==(_context$fetchOptions4=_context$fetchOptions3.meta)?void 0:_context$fetchOptions4.fetchMore;
_context$fetchOptions3=null==_context$fetchOptions?void 0:_context$fetchOptions.pageParam;_context$fetchOptions4="forward"===(null==_context$fetchOptions?void 0:_context$fetchOptions.direction);_context$fetchOptions="backward"===(null==_context$fetchOptions?void 0:_context$fetchOptions.direction);const oldPages=(null==(_context$state$data=context.state.data)?void 0:_context$state$data.pages)||[],oldPageParams=(null==(_context$state$data2=context.state.data)?void 0:_context$state$data2.pageParams)||
[];let newPageParams=oldPageParams,cancelled=!1;const addSignalProperty=object=>{Object.defineProperty(object,"signal",{enumerable:!0,get:()=>{var _context$signal;if(null!=(_context$signal=context.signal)&&_context$signal.aborted)cancelled=!0;else{var _context$signal2;null==(_context$signal2=context.signal)?void 0:_context$signal2.addEventListener("abort",()=>{cancelled=!0})}return context.signal}})},queryFn=context.options.queryFn||(()=>Promise.reject("Missing queryFn for queryKey '"+context.options.queryHash+
"'")),buildNewPages=(pages,param,page,previous)=>{newPageParams=previous?[param,...newPageParams]:[...newPageParams,param];return previous?[page,...pages]:[...pages,page]},fetchPage=(pages,manual,param,previous)=>{if(cancelled)return Promise.reject("Cancelled");if("undefined"===typeof param&&!manual&&pages.length)return Promise.resolve(pages);manual={queryKey:context.queryKey,pageParam:param,meta:context.options.meta};addSignalProperty(manual);manual=queryFn(manual);return Promise.resolve(manual).then(page=>
buildNewPages(pages,param,page,previous))};if(oldPages.length)if(_context$fetchOptions4)_context$state$data2=(_context$state$data="undefined"!==typeof _context$fetchOptions3)?_context$fetchOptions3:getNextPageParam(context.options,oldPages),_context$state$data=fetchPage(oldPages,_context$state$data,_context$state$data2);else if(_context$fetchOptions)_context$state$data2=(_context$state$data="undefined"!==typeof _context$fetchOptions3)?_context$fetchOptions3:getPreviousPageParam(context.options,oldPages),
_context$state$data=fetchPage(oldPages,_context$state$data,_context$state$data2,!0);else{newPageParams=[];const manual="undefined"===typeof context.options.getNextPageParam;_context$state$data=(refetchPage&&oldPages[0]?refetchPage(oldPages[0],0,oldPages):1)?fetchPage([],manual,oldPageParams[0]):Promise.resolve(buildNewPages([],oldPageParams[0],oldPages[0]));for(let i=1;i<oldPages.length;i++)_context$state$data=_context$state$data.then(pages=>{if(refetchPage&&oldPages[i]?refetchPage(oldPages[i],i,
oldPages):1){const param=manual?oldPageParams[i]:getNextPageParam(context.options,pages);return fetchPage(pages,manual,param)}return Promise.resolve(buildNewPages(pages,oldPageParams[i],oldPages[i]))})}else _context$state$data=fetchPage([]);return _context$state$data.then(pages=>({pages,pageParams:newPageParams}))}}}}}
//# sourceMappingURL=module$node_modules$$tanstack$query_core$build$lib$infiniteQueryBehavior.js.map
