["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/randomfill/browser.js"],"~:js","shadow$provide[260]=function(S,A,V,q){function F(){throw Error(\"secure random number generation not supported by this browser\\nuse chrome, FireFox or Internet Explorer 11\");}function G(B,E){if(\"number\"!==typeof B||B!==B)throw new TypeError(\"offset must be a number\");if(B>t||0>B)throw new TypeError(\"offset must be a uint32\");if(B>h||B>E)throw new RangeError(\"offset out of range\");}function r(B,E,H){if(\"number\"!==typeof B||B!==B)throw new TypeError(\"size must be a number\");if(B>t||0>B)throw new TypeError(\"size must be a uint32\");\nif(B+E>H||B>h)throw new RangeError(\"buffer too small\");}function y(B,E,H,D){if(!(l.isBuffer(B)||B instanceof S.Uint8Array))throw new TypeError('\"buf\" argument must be a Buffer or Uint8Array');if(\"function\"===typeof E)D=E,E=0,H=B.length;else if(\"function\"===typeof H)D=H,H=B.length-E;else if(\"function\"!==typeof D)throw new TypeError('\"cb\" argument must be a function');G(E,B.length);r(H,E,B.length);return e(B,E,H,D)}function e(B,E,H,D){if(p.browser){H=new Uint8Array(B.buffer,E,H);k.getRandomValues(H);\nif(D){p.nextTick(function(){D(null,B)});return}return B}if(D)n(H,function(C,I){if(C)return D(C);I.copy(B,E);D(null,B)});else return n(H).copy(B,E),B}function u(B,E,H){\"undefined\"===typeof E&&(E=0);if(!(l.isBuffer(B)||B instanceof S.Uint8Array))throw new TypeError('\"buf\" argument must be a Buffer or Uint8Array');G(E,B.length);void 0===H&&(H=B.length-E);r(H,E,B.length);return e(B,E,H)}var p=A(1);\"use strict\";V=A(111);var n=A(112),l=V.Buffer,h=V.kMaxLength,k=S.crypto||S.msCrypto,t=Math.pow(2,32)-1;k&&\nk.getRandomValues||!p.browser?(q.randomFill=y,q.randomFillSync=u):(q.randomFill=F,q.randomFillSync=F)}","~:source","shadow$provide[260] = function(global,require,module,exports) {\nvar process = require('process');\n'use strict'\n\nfunction oldBrowser () {\n  throw new Error('secure random number generation not supported by this browser\\nuse chrome, FireFox or Internet Explorer 11')\n}\nvar safeBuffer = require('safe-buffer')\nvar randombytes = require('randombytes')\nvar Buffer = safeBuffer.Buffer\nvar kBufferMaxLength = safeBuffer.kMaxLength\nvar crypto = global.crypto || global.msCrypto\nvar kMaxUint32 = Math.pow(2, 32) - 1\nfunction assertOffset (offset, length) {\n  if (typeof offset !== 'number' || offset !== offset) { // eslint-disable-line no-self-compare\n    throw new TypeError('offset must be a number')\n  }\n\n  if (offset > kMaxUint32 || offset < 0) {\n    throw new TypeError('offset must be a uint32')\n  }\n\n  if (offset > kBufferMaxLength || offset > length) {\n    throw new RangeError('offset out of range')\n  }\n}\n\nfunction assertSize (size, offset, length) {\n  if (typeof size !== 'number' || size !== size) { // eslint-disable-line no-self-compare\n    throw new TypeError('size must be a number')\n  }\n\n  if (size > kMaxUint32 || size < 0) {\n    throw new TypeError('size must be a uint32')\n  }\n\n  if (size + offset > length || size > kBufferMaxLength) {\n    throw new RangeError('buffer too small')\n  }\n}\nif ((crypto && crypto.getRandomValues) || !process.browser) {\n  exports.randomFill = randomFill\n  exports.randomFillSync = randomFillSync\n} else {\n  exports.randomFill = oldBrowser\n  exports.randomFillSync = oldBrowser\n}\nfunction randomFill (buf, offset, size, cb) {\n  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {\n    throw new TypeError('\"buf\" argument must be a Buffer or Uint8Array')\n  }\n\n  if (typeof offset === 'function') {\n    cb = offset\n    offset = 0\n    size = buf.length\n  } else if (typeof size === 'function') {\n    cb = size\n    size = buf.length - offset\n  } else if (typeof cb !== 'function') {\n    throw new TypeError('\"cb\" argument must be a function')\n  }\n  assertOffset(offset, buf.length)\n  assertSize(size, offset, buf.length)\n  return actualFill(buf, offset, size, cb)\n}\n\nfunction actualFill (buf, offset, size, cb) {\n  if (process.browser) {\n    var ourBuf = buf.buffer\n    var uint = new Uint8Array(ourBuf, offset, size)\n    crypto.getRandomValues(uint)\n    if (cb) {\n      process.nextTick(function () {\n        cb(null, buf)\n      })\n      return\n    }\n    return buf\n  }\n  if (cb) {\n    randombytes(size, function (err, bytes) {\n      if (err) {\n        return cb(err)\n      }\n      bytes.copy(buf, offset)\n      cb(null, buf)\n    })\n    return\n  }\n  var bytes = randombytes(size)\n  bytes.copy(buf, offset)\n  return buf\n}\nfunction randomFillSync (buf, offset, size) {\n  if (typeof offset === 'undefined') {\n    offset = 0\n  }\n  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {\n    throw new TypeError('\"buf\" argument must be a Buffer or Uint8Array')\n  }\n\n  assertOffset(offset, buf.length)\n\n  if (size === undefined) size = buf.length - offset\n\n  assertSize(size, offset, buf.length)\n\n  return actualFill(buf, offset, size)\n}\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$process$browser","~$shadow.js","~$module$node_modules$safe_buffer$index","~$module$node_modules$randombytes$browser"]],"~:properties",["^5",["randomFillSync","randomFill"]],"~:compiled-at",1695041440876,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$randomfill$browser.js\",\n\"lineCount\":4,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/randomfill/browser.js\"],\n\"sourcesContent\":[\"shadow$provide[260] = function(global,require,module,exports) {\\nvar process = require('process');\\n'use strict'\\n\\nfunction oldBrowser () {\\n  throw new Error('secure random number generation not supported by this browser\\\\nuse chrome, FireFox or Internet Explorer 11')\\n}\\nvar safeBuffer = require('safe-buffer')\\nvar randombytes = require('randombytes')\\nvar Buffer = safeBuffer.Buffer\\nvar kBufferMaxLength = safeBuffer.kMaxLength\\nvar crypto = global.crypto || global.msCrypto\\nvar kMaxUint32 = Math.pow(2, 32) - 1\\nfunction assertOffset (offset, length) {\\n  if (typeof offset !== 'number' || offset !== offset) { // eslint-disable-line no-self-compare\\n    throw new TypeError('offset must be a number')\\n  }\\n\\n  if (offset > kMaxUint32 || offset < 0) {\\n    throw new TypeError('offset must be a uint32')\\n  }\\n\\n  if (offset > kBufferMaxLength || offset > length) {\\n    throw new RangeError('offset out of range')\\n  }\\n}\\n\\nfunction assertSize (size, offset, length) {\\n  if (typeof size !== 'number' || size !== size) { // eslint-disable-line no-self-compare\\n    throw new TypeError('size must be a number')\\n  }\\n\\n  if (size > kMaxUint32 || size < 0) {\\n    throw new TypeError('size must be a uint32')\\n  }\\n\\n  if (size + offset > length || size > kBufferMaxLength) {\\n    throw new RangeError('buffer too small')\\n  }\\n}\\nif ((crypto && crypto.getRandomValues) || !process.browser) {\\n  exports.randomFill = randomFill\\n  exports.randomFillSync = randomFillSync\\n} else {\\n  exports.randomFill = oldBrowser\\n  exports.randomFillSync = oldBrowser\\n}\\nfunction randomFill (buf, offset, size, cb) {\\n  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {\\n    throw new TypeError('\\\"buf\\\" argument must be a Buffer or Uint8Array')\\n  }\\n\\n  if (typeof offset === 'function') {\\n    cb = offset\\n    offset = 0\\n    size = buf.length\\n  } else if (typeof size === 'function') {\\n    cb = size\\n    size = buf.length - offset\\n  } else if (typeof cb !== 'function') {\\n    throw new TypeError('\\\"cb\\\" argument must be a function')\\n  }\\n  assertOffset(offset, buf.length)\\n  assertSize(size, offset, buf.length)\\n  return actualFill(buf, offset, size, cb)\\n}\\n\\nfunction actualFill (buf, offset, size, cb) {\\n  if (process.browser) {\\n    var ourBuf = buf.buffer\\n    var uint = new Uint8Array(ourBuf, offset, size)\\n    crypto.getRandomValues(uint)\\n    if (cb) {\\n      process.nextTick(function () {\\n        cb(null, buf)\\n      })\\n      return\\n    }\\n    return buf\\n  }\\n  if (cb) {\\n    randombytes(size, function (err, bytes) {\\n      if (err) {\\n        return cb(err)\\n      }\\n      bytes.copy(buf, offset)\\n      cb(null, buf)\\n    })\\n    return\\n  }\\n  var bytes = randombytes(size)\\n  bytes.copy(buf, offset)\\n  return buf\\n}\\nfunction randomFillSync (buf, offset, size) {\\n  if (typeof offset === 'undefined') {\\n    offset = 0\\n  }\\n  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {\\n    throw new TypeError('\\\"buf\\\" argument must be a Buffer or Uint8Array')\\n  }\\n\\n  assertOffset(offset, buf.length)\\n\\n  if (size === undefined) size = buf.length - offset\\n\\n  assertSize(size, offset, buf.length)\\n\\n  return actualFill(buf, offset, size)\\n}\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"oldBrowser\",\"Error\",\"assertOffset\",\"offset\",\"length\",\"TypeError\",\"kMaxUint32\",\"kBufferMaxLength\",\"RangeError\",\"assertSize\",\"size\",\"randomFill\",\"buf\",\"cb\",\"Buffer\",\"isBuffer\",\"Uint8Array\",\"actualFill\",\"process\",\"browser\",\"uint\",\"buffer\",\"crypto\",\"getRandomValues\",\"nextTick\",\"randombytes\",\"err\",\"bytes\",\"copy\",\"randomFillSync\",\"undefined\",\"safeBuffer\",\"kMaxLength\",\"msCrypto\",\"Math\",\"pow\"]\n}\n"]