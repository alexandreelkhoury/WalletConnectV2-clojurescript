["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/randombytes/browser.js"],"~:js","shadow$provide[112]=function(S,A,V,q){function F(){throw Error(\"Secure random number generation is not supported by this browser.\\nUse Chrome, Firefox or Internet Explorer 11\");}function G(u,p){if(4294967295<u)throw new RangeError(\"requested too many random bytes\");var n=y.allocUnsafe(u);if(0<u)if(65536<u)for(var l=0;l<u;l+=65536)e.getRandomValues(n.slice(l,l+65536));else e.getRandomValues(n);return\"function\"===typeof p?r.nextTick(function(){p(null,n)}):n}var r=A(1);\"use strict\";var y=A(111).Buffer,\ne=S.crypto||S.msCrypto;V.exports=e&&e.getRandomValues?G:F}","~:source","shadow$provide[112] = function(global,require,module,exports) {\nvar process = require('process');\n'use strict'\n\n// limit of Crypto.getRandomValues()\n// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues\nvar MAX_BYTES = 65536\n\n// Node supports requesting up to this number of bytes\n// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48\nvar MAX_UINT32 = 4294967295\n\nfunction oldBrowser () {\n  throw new Error('Secure random number generation is not supported by this browser.\\nUse Chrome, Firefox or Internet Explorer 11')\n}\n\nvar Buffer = require('safe-buffer').Buffer\nvar crypto = global.crypto || global.msCrypto\n\nif (crypto && crypto.getRandomValues) {\n  module.exports = randomBytes\n} else {\n  module.exports = oldBrowser\n}\n\nfunction randomBytes (size, cb) {\n  // phantomjs needs to throw\n  if (size > MAX_UINT32) throw new RangeError('requested too many random bytes')\n\n  var bytes = Buffer.allocUnsafe(size)\n\n  if (size > 0) {  // getRandomValues fails on IE if size == 0\n    if (size > MAX_BYTES) { // this is the max bytes crypto.getRandomValues\n      // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues\n      for (var generated = 0; generated < size; generated += MAX_BYTES) {\n        // buffer.slice automatically checks if the end is past the end of\n        // the buffer so we don't have to here\n        crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES))\n      }\n    } else {\n      crypto.getRandomValues(bytes)\n    }\n  }\n\n  if (typeof cb === 'function') {\n    return process.nextTick(function () {\n      cb(null, bytes)\n    })\n  }\n\n  return bytes\n}\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$process$browser","~$shadow.js","~$module$node_modules$safe_buffer$index"]],"~:properties",["^5",[]],"~:compiled-at",1695041440781,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$randombytes$browser.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAY9DC,QAASA,EAAW,EAAG,CACrB,KAAUC,MAAJ,CAAU,gHAAV,CAAN,CADqB,CAavBC,QAASA,EAAY,CAACC,CAAD,CAAOC,CAAP,CAAW,CAE9B,GAjBeC,UAiBf,CAAIF,CAAJ,CAAuB,KAAM,KAAIG,UAAJ,CAAe,iCAAf,CAAN,CAEvB,IAAIC,EAAQC,CAAOC,CAAAA,WAAP,CAAmBN,CAAnB,CAEZ,IAAW,CAAX,CAAIA,CAAJ,CACE,GA1BYO,KA0BZ,CAAIP,CAAJ,CAEE,IAAK,IAAIQ,EAAY,CAArB,CAAwBA,CAAxB,CAAoCR,CAApC,CAA0CQ,CAA1C,EA5BUD,KA4BV,CAGEE,CAAOC,CAAAA,eAAP,CAAuBN,CAAMO,CAAAA,KAAN,CAAYH,CAAZ,CAAuBA,CAAvB,CA/BfD,KA+Be,CAAvB,CALJ,KAQEE,EAAOC,CAAAA,eAAP,CAAuBN,CAAvB,CAIJ,OAAkB,UAAlB,GAAI,MAAOH,EAAX,CACSW,CAAQC,CAAAA,QAAR,CAAiB,QAAS,EAAG,CAClCZ,CAAA,CAAG,IAAH,CAASG,CAAT,CADkC,CAA7B,CADT,CAMOA,CAzBuB,CAxBhC,IAAIQ,EAAUlB,CAAA,CAAQ,CAAR,CACd,aAcA,KAAIW,EAASX,CAAA,CAAQ,GAAR,CAAuBW,CAAAA,MAApC;AACII,EAAShB,CAAOgB,CAAAA,MAAhBA,EAA0BhB,CAAOqB,CAAAA,QAGnCnB,EAAOC,CAAAA,OAAP,CADEa,CAAJ,EAAcA,CAAOC,CAAAA,eAArB,CACmBX,CADnB,CAGmBF,CAtB2C;\",\n\"sources\":[\"node_modules/randombytes/browser.js\"],\n\"sourcesContent\":[\"shadow$provide[112] = function(global,require,module,exports) {\\nvar process = require('process');\\n'use strict'\\n\\n// limit of Crypto.getRandomValues()\\n// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues\\nvar MAX_BYTES = 65536\\n\\n// Node supports requesting up to this number of bytes\\n// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48\\nvar MAX_UINT32 = 4294967295\\n\\nfunction oldBrowser () {\\n  throw new Error('Secure random number generation is not supported by this browser.\\\\nUse Chrome, Firefox or Internet Explorer 11')\\n}\\n\\nvar Buffer = require('safe-buffer').Buffer\\nvar crypto = global.crypto || global.msCrypto\\n\\nif (crypto && crypto.getRandomValues) {\\n  module.exports = randomBytes\\n} else {\\n  module.exports = oldBrowser\\n}\\n\\nfunction randomBytes (size, cb) {\\n  // phantomjs needs to throw\\n  if (size > MAX_UINT32) throw new RangeError('requested too many random bytes')\\n\\n  var bytes = Buffer.allocUnsafe(size)\\n\\n  if (size > 0) {  // getRandomValues fails on IE if size == 0\\n    if (size > MAX_BYTES) { // this is the max bytes crypto.getRandomValues\\n      // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues\\n      for (var generated = 0; generated < size; generated += MAX_BYTES) {\\n        // buffer.slice automatically checks if the end is past the end of\\n        // the buffer so we don't have to here\\n        crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES))\\n      }\\n    } else {\\n      crypto.getRandomValues(bytes)\\n    }\\n  }\\n\\n  if (typeof cb === 'function') {\\n    return process.nextTick(function () {\\n      cb(null, bytes)\\n    })\\n  }\\n\\n  return bytes\\n}\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"oldBrowser\",\"Error\",\"randomBytes\",\"size\",\"cb\",\"MAX_UINT32\",\"RangeError\",\"bytes\",\"Buffer\",\"allocUnsafe\",\"MAX_BYTES\",\"generated\",\"crypto\",\"getRandomValues\",\"slice\",\"process\",\"nextTick\",\"msCrypto\"]\n}\n"]