["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@tanstack/query-core/build/lib/mutationObserver.js"],"~:js","shadow$provide.module$node_modules$$tanstack$query_core$build$lib$mutationObserver=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});var mutation=require(\"module$node_modules$$tanstack$query_core$build$lib$mutation\"),notifyManager=require(\"module$node_modules$$tanstack$query_core$build$lib$notifyManager\");global=require(\"module$node_modules$$tanstack$query_core$build$lib$subscribable\");var utils=require(\"module$node_modules$$tanstack$query_core$build$lib$utils\");\nclass MutationObserver extends global.Subscribable{constructor(client,options){super();this.client=client;this.setOptions(options);this.bindMethods();this.updateResult()}bindMethods(){this.mutate=this.mutate.bind(this);this.reset=this.reset.bind(this)}setOptions(options){var _this$currentMutation;const prevOptions=this.options;this.options=this.client.defaultMutationOptions(options);utils.shallowEqualObjects(prevOptions,this.options)||this.client.getMutationCache().notify({type:\"observerOptionsUpdated\",\nmutation:this.currentMutation,observer:this});null==(_this$currentMutation=this.currentMutation)?void 0:_this$currentMutation.setOptions(this.options)}onUnsubscribe(){if(!this.hasListeners()){var _this$currentMutation2;null==(_this$currentMutation2=this.currentMutation)?void 0:_this$currentMutation2.removeObserver(this)}}onMutationUpdate(action){this.updateResult();const notifyOptions={listeners:!0};\"success\"===action.type?notifyOptions.onSuccess=!0:\"error\"===action.type&&(notifyOptions.onError=!0);\nthis.notify(notifyOptions)}getCurrentResult(){return this.currentResult}reset(){this.currentMutation=void 0;this.updateResult();this.notify({listeners:!0})}mutate(variables,options){this.mutateOptions=options;this.currentMutation&&this.currentMutation.removeObserver(this);this.currentMutation=this.client.getMutationCache().build(this.client,{...this.options,variables:\"undefined\"!==typeof variables?variables:this.options.variables});this.currentMutation.addObserver(this);return this.currentMutation.execute()}updateResult(){const state=\nthis.currentMutation?this.currentMutation.state:mutation.getDefaultState();this.currentResult={...state,isLoading:\"loading\"===state.status,isSuccess:\"success\"===state.status,isError:\"error\"===state.status,isIdle:\"idle\"===state.status,mutate:this.mutate,reset:this.reset}}notify(options){notifyManager.notifyManager.batch(()=>{if(this.mutateOptions&&this.hasListeners())if(options.onSuccess){var _this$mutateOptions$o,_this$mutateOptions,_this$mutateOptions$o2,_this$mutateOptions2;null==(_this$mutateOptions$o=\n(_this$mutateOptions=this.mutateOptions).onSuccess)?void 0:_this$mutateOptions$o.call(_this$mutateOptions,this.currentResult.data,this.currentResult.variables,this.currentResult.context);null==(_this$mutateOptions$o2=(_this$mutateOptions2=this.mutateOptions).onSettled)?void 0:_this$mutateOptions$o2.call(_this$mutateOptions2,this.currentResult.data,null,this.currentResult.variables,this.currentResult.context)}else if(options.onError){var _this$mutateOptions$o3,_this$mutateOptions3,_this$mutateOptions$o4,\n_this$mutateOptions4;null==(_this$mutateOptions$o3=(_this$mutateOptions3=this.mutateOptions).onError)?void 0:_this$mutateOptions$o3.call(_this$mutateOptions3,this.currentResult.error,this.currentResult.variables,this.currentResult.context);null==(_this$mutateOptions$o4=(_this$mutateOptions4=this.mutateOptions).onSettled)?void 0:_this$mutateOptions$o4.call(_this$mutateOptions4,void 0,this.currentResult.error,this.currentResult.variables,this.currentResult.context)}options.listeners&&this.listeners.forEach(({listener})=>\n{listener(this.currentResult)})})}}exports.MutationObserver=MutationObserver}","~:source","shadow$provide[\"module$node_modules$$tanstack$query_core$build$lib$mutationObserver\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar mutation = require('./mutation.js');\nvar notifyManager = require('./notifyManager.js');\nvar subscribable = require('./subscribable.js');\nvar utils = require('./utils.js');\n\n// CLASS\nclass MutationObserver extends subscribable.Subscribable {\n  constructor(client, options) {\n    super();\n    this.client = client;\n    this.setOptions(options);\n    this.bindMethods();\n    this.updateResult();\n  }\n\n  bindMethods() {\n    this.mutate = this.mutate.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n\n  setOptions(options) {\n    var _this$currentMutation;\n\n    const prevOptions = this.options;\n    this.options = this.client.defaultMutationOptions(options);\n\n    if (!utils.shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.currentMutation,\n        observer: this\n      });\n    }\n\n    (_this$currentMutation = this.currentMutation) == null ? void 0 : _this$currentMutation.setOptions(this.options);\n  }\n\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      var _this$currentMutation2;\n\n      (_this$currentMutation2 = this.currentMutation) == null ? void 0 : _this$currentMutation2.removeObserver(this);\n    }\n  }\n\n  onMutationUpdate(action) {\n    this.updateResult(); // Determine which callbacks to trigger\n\n    const notifyOptions = {\n      listeners: true\n    };\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true;\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true;\n    }\n\n    this.notify(notifyOptions);\n  }\n\n  getCurrentResult() {\n    return this.currentResult;\n  }\n\n  reset() {\n    this.currentMutation = undefined;\n    this.updateResult();\n    this.notify({\n      listeners: true\n    });\n  }\n\n  mutate(variables, options) {\n    this.mutateOptions = options;\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this);\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, { ...this.options,\n      variables: typeof variables !== 'undefined' ? variables : this.options.variables\n    });\n    this.currentMutation.addObserver(this);\n    return this.currentMutation.execute();\n  }\n\n  updateResult() {\n    const state = this.currentMutation ? this.currentMutation.state : mutation.getDefaultState();\n    const result = { ...state,\n      isLoading: state.status === 'loading',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset\n    };\n    this.currentResult = result;\n  }\n\n  notify(options) {\n    notifyManager.notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions && this.hasListeners()) {\n        if (options.onSuccess) {\n          var _this$mutateOptions$o, _this$mutateOptions, _this$mutateOptions$o2, _this$mutateOptions2;\n\n          (_this$mutateOptions$o = (_this$mutateOptions = this.mutateOptions).onSuccess) == null ? void 0 : _this$mutateOptions$o.call(_this$mutateOptions, this.currentResult.data, this.currentResult.variables, this.currentResult.context);\n          (_this$mutateOptions$o2 = (_this$mutateOptions2 = this.mutateOptions).onSettled) == null ? void 0 : _this$mutateOptions$o2.call(_this$mutateOptions2, this.currentResult.data, null, this.currentResult.variables, this.currentResult.context);\n        } else if (options.onError) {\n          var _this$mutateOptions$o3, _this$mutateOptions3, _this$mutateOptions$o4, _this$mutateOptions4;\n\n          (_this$mutateOptions$o3 = (_this$mutateOptions3 = this.mutateOptions).onError) == null ? void 0 : _this$mutateOptions$o3.call(_this$mutateOptions3, this.currentResult.error, this.currentResult.variables, this.currentResult.context);\n          (_this$mutateOptions$o4 = (_this$mutateOptions4 = this.mutateOptions).onSettled) == null ? void 0 : _this$mutateOptions$o4.call(_this$mutateOptions4, undefined, this.currentResult.error, this.currentResult.variables, this.currentResult.context);\n        }\n      } // Then trigger the listeners\n\n\n      if (options.listeners) {\n        this.listeners.forEach(({\n          listener\n        }) => {\n          listener(this.currentResult);\n        });\n      }\n    });\n  }\n\n}\n\nexports.MutationObserver = MutationObserver;\n//# sourceMappingURL=mutationObserver.js.map\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$$tanstack$query_core$build$lib$mutation","~$shadow.js","~$module$node_modules$$tanstack$query_core$build$lib$subscribable","~$module$node_modules$$tanstack$query_core$build$lib$utils","~$module$node_modules$$tanstack$query_core$build$lib$notifyManager"]],"~:properties",["^5",["observer","mutateOptions","__esModule","onError","currentMutation","reset","mutation","value","isLoading","mutate","variables","onSuccess","type","isIdle","isError","currentResult","client","MutationObserver","options","isSuccess","listeners"]],"~:compiled-at",1695111489947,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$tanstack$query_core$build$lib$mutationObserver.js\",\n\"lineCount\":8,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/@tanstack/query-core/build/lib/mutationObserver.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$tanstack$query_core$build$lib$mutationObserver\\\"] = function(global,require,module,exports) {\\n'use strict';\\n\\nObject.defineProperty(exports, '__esModule', { value: true });\\n\\nvar mutation = require('./mutation.js');\\nvar notifyManager = require('./notifyManager.js');\\nvar subscribable = require('./subscribable.js');\\nvar utils = require('./utils.js');\\n\\n// CLASS\\nclass MutationObserver extends subscribable.Subscribable {\\n  constructor(client, options) {\\n    super();\\n    this.client = client;\\n    this.setOptions(options);\\n    this.bindMethods();\\n    this.updateResult();\\n  }\\n\\n  bindMethods() {\\n    this.mutate = this.mutate.bind(this);\\n    this.reset = this.reset.bind(this);\\n  }\\n\\n  setOptions(options) {\\n    var _this$currentMutation;\\n\\n    const prevOptions = this.options;\\n    this.options = this.client.defaultMutationOptions(options);\\n\\n    if (!utils.shallowEqualObjects(prevOptions, this.options)) {\\n      this.client.getMutationCache().notify({\\n        type: 'observerOptionsUpdated',\\n        mutation: this.currentMutation,\\n        observer: this\\n      });\\n    }\\n\\n    (_this$currentMutation = this.currentMutation) == null ? void 0 : _this$currentMutation.setOptions(this.options);\\n  }\\n\\n  onUnsubscribe() {\\n    if (!this.hasListeners()) {\\n      var _this$currentMutation2;\\n\\n      (_this$currentMutation2 = this.currentMutation) == null ? void 0 : _this$currentMutation2.removeObserver(this);\\n    }\\n  }\\n\\n  onMutationUpdate(action) {\\n    this.updateResult(); // Determine which callbacks to trigger\\n\\n    const notifyOptions = {\\n      listeners: true\\n    };\\n\\n    if (action.type === 'success') {\\n      notifyOptions.onSuccess = true;\\n    } else if (action.type === 'error') {\\n      notifyOptions.onError = true;\\n    }\\n\\n    this.notify(notifyOptions);\\n  }\\n\\n  getCurrentResult() {\\n    return this.currentResult;\\n  }\\n\\n  reset() {\\n    this.currentMutation = undefined;\\n    this.updateResult();\\n    this.notify({\\n      listeners: true\\n    });\\n  }\\n\\n  mutate(variables, options) {\\n    this.mutateOptions = options;\\n\\n    if (this.currentMutation) {\\n      this.currentMutation.removeObserver(this);\\n    }\\n\\n    this.currentMutation = this.client.getMutationCache().build(this.client, { ...this.options,\\n      variables: typeof variables !== 'undefined' ? variables : this.options.variables\\n    });\\n    this.currentMutation.addObserver(this);\\n    return this.currentMutation.execute();\\n  }\\n\\n  updateResult() {\\n    const state = this.currentMutation ? this.currentMutation.state : mutation.getDefaultState();\\n    const result = { ...state,\\n      isLoading: state.status === 'loading',\\n      isSuccess: state.status === 'success',\\n      isError: state.status === 'error',\\n      isIdle: state.status === 'idle',\\n      mutate: this.mutate,\\n      reset: this.reset\\n    };\\n    this.currentResult = result;\\n  }\\n\\n  notify(options) {\\n    notifyManager.notifyManager.batch(() => {\\n      // First trigger the mutate callbacks\\n      if (this.mutateOptions && this.hasListeners()) {\\n        if (options.onSuccess) {\\n          var _this$mutateOptions$o, _this$mutateOptions, _this$mutateOptions$o2, _this$mutateOptions2;\\n\\n          (_this$mutateOptions$o = (_this$mutateOptions = this.mutateOptions).onSuccess) == null ? void 0 : _this$mutateOptions$o.call(_this$mutateOptions, this.currentResult.data, this.currentResult.variables, this.currentResult.context);\\n          (_this$mutateOptions$o2 = (_this$mutateOptions2 = this.mutateOptions).onSettled) == null ? void 0 : _this$mutateOptions$o2.call(_this$mutateOptions2, this.currentResult.data, null, this.currentResult.variables, this.currentResult.context);\\n        } else if (options.onError) {\\n          var _this$mutateOptions$o3, _this$mutateOptions3, _this$mutateOptions$o4, _this$mutateOptions4;\\n\\n          (_this$mutateOptions$o3 = (_this$mutateOptions3 = this.mutateOptions).onError) == null ? void 0 : _this$mutateOptions$o3.call(_this$mutateOptions3, this.currentResult.error, this.currentResult.variables, this.currentResult.context);\\n          (_this$mutateOptions$o4 = (_this$mutateOptions4 = this.mutateOptions).onSettled) == null ? void 0 : _this$mutateOptions$o4.call(_this$mutateOptions4, undefined, this.currentResult.error, this.currentResult.variables, this.currentResult.context);\\n        }\\n      } // Then trigger the listeners\\n\\n\\n      if (options.listeners) {\\n        this.listeners.forEach(({\\n          listener\\n        }) => {\\n          listener(this.currentResult);\\n        });\\n      }\\n    });\\n  }\\n\\n}\\n\\nexports.MutationObserver = MutationObserver;\\n//# sourceMappingURL=mutationObserver.js.map\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"mutation\",\"notifyManager\",\"subscribable\",\"utils\",\"MutationObserver\",\"Subscribable\",\"constructor\",\"client\",\"options\",\"setOptions\",\"bindMethods\",\"updateResult\",\"mutate\",\"bind\",\"reset\",\"_this$currentMutation\",\"prevOptions\",\"defaultMutationOptions\",\"shallowEqualObjects\",\"getMutationCache\",\"notify\",\"type\",\"currentMutation\",\"observer\",\"onUnsubscribe\",\"hasListeners\",\"_this$currentMutation2\",\"removeObserver\",\"onMutationUpdate\",\"action\",\"notifyOptions\",\"listeners\",\"onSuccess\",\"onError\",\"getCurrentResult\",\"currentResult\",\"undefined\",\"variables\",\"mutateOptions\",\"build\",\"addObserver\",\"execute\",\"state\",\"getDefaultState\",\"result\",\"isLoading\",\"status\",\"isSuccess\",\"isError\",\"isIdle\",\"batch\",\"_this$mutateOptions$o\",\"_this$mutateOptions\",\"_this$mutateOptions$o2\",\"_this$mutateOptions2\",\"call\",\"data\",\"context\",\"onSettled\",\"_this$mutateOptions$o3\",\"_this$mutateOptions3\",\"_this$mutateOptions$o4\",\"_this$mutateOptions4\",\"error\",\"forEach\",\"listener\"]\n}\n"]