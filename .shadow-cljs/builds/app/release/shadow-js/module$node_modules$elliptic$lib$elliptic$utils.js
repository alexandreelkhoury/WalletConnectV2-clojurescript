["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/elliptic/lib/elliptic/utils.js"],"~:js","shadow$provide[73]=function(S,A,V,q){var F=A(70);S=A(71);A=A(72);q.assert=S;q.toArray=A.toArray;q.zero2=A.zero2;q.toHex=A.toHex;q.encode=A.encode;q.getNAF=function(G,r,y){y=Array(Math.max(G.bitLength(),y)+1);y.fill(0);r=1<<r+1;G=G.clone();for(var e=0;e<y.length;e++){var u=G.andln(r-1);G.isOdd()?(u=u>(r>>1)-1?(r>>1)-u:u,G.isubn(u)):u=0;y[e]=u;G.iushrn(1)}return y};q.getJSF=function(G,r){var y=[[],[]];G=G.clone();r=r.clone();for(var e=0,u=0,p;0<G.cmpn(-e)||0<r.cmpn(-u);){var n=G.andln(3)+e&3,l=r.andln(3)+\nu&3;3===n&&(n=-1);3===l&&(l=-1);if(0===(n&1))var h=0;else p=G.andln(7)+e&7,h=3!==p&&5!==p||2!==l?n:-n;y[0].push(h);0===(l&1)?p=0:(p=r.andln(7)+u&7,p=3!==p&&5!==p||2!==n?l:-l);y[1].push(p);2*e===h+1&&(e=1-e);2*u===p+1&&(u=1-u);G.iushrn(1);r.iushrn(1)}return y};q.cachedProperty=function(G,r,y){var e=\"_\"+r;G.prototype[r]=function(){return void 0!==this[e]?this[e]:this[e]=y.call(this)}};q.parseBytes=function(G){return\"string\"===typeof G?q.toArray(G,\"hex\"):G};q.intFromLE=function(G){return new F(G,\"hex\",\n\"le\")}}","~:source","shadow$provide[73] = function(global,require,module,exports) {\n'use strict';\n\nvar utils = exports;\nvar BN = require('bn.js');\nvar minAssert = require('minimalistic-assert');\nvar minUtils = require('minimalistic-crypto-utils');\n\nutils.assert = minAssert;\nutils.toArray = minUtils.toArray;\nutils.zero2 = minUtils.zero2;\nutils.toHex = minUtils.toHex;\nutils.encode = minUtils.encode;\n\n// Represent num in a w-NAF form\nfunction getNAF(num, w, bits) {\n  var naf = new Array(Math.max(num.bitLength(), bits) + 1);\n  naf.fill(0);\n\n  var ws = 1 << (w + 1);\n  var k = num.clone();\n\n  for (var i = 0; i < naf.length; i++) {\n    var z;\n    var mod = k.andln(ws - 1);\n    if (k.isOdd()) {\n      if (mod > (ws >> 1) - 1)\n        z = (ws >> 1) - mod;\n      else\n        z = mod;\n      k.isubn(z);\n    } else {\n      z = 0;\n    }\n\n    naf[i] = z;\n    k.iushrn(1);\n  }\n\n  return naf;\n}\nutils.getNAF = getNAF;\n\n// Represent k1, k2 in a Joint Sparse Form\nfunction getJSF(k1, k2) {\n  var jsf = [\n    [],\n    [],\n  ];\n\n  k1 = k1.clone();\n  k2 = k2.clone();\n  var d1 = 0;\n  var d2 = 0;\n  var m8;\n  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {\n    // First phase\n    var m14 = (k1.andln(3) + d1) & 3;\n    var m24 = (k2.andln(3) + d2) & 3;\n    if (m14 === 3)\n      m14 = -1;\n    if (m24 === 3)\n      m24 = -1;\n    var u1;\n    if ((m14 & 1) === 0) {\n      u1 = 0;\n    } else {\n      m8 = (k1.andln(7) + d1) & 7;\n      if ((m8 === 3 || m8 === 5) && m24 === 2)\n        u1 = -m14;\n      else\n        u1 = m14;\n    }\n    jsf[0].push(u1);\n\n    var u2;\n    if ((m24 & 1) === 0) {\n      u2 = 0;\n    } else {\n      m8 = (k2.andln(7) + d2) & 7;\n      if ((m8 === 3 || m8 === 5) && m14 === 2)\n        u2 = -m24;\n      else\n        u2 = m24;\n    }\n    jsf[1].push(u2);\n\n    // Second phase\n    if (2 * d1 === u1 + 1)\n      d1 = 1 - d1;\n    if (2 * d2 === u2 + 1)\n      d2 = 1 - d2;\n    k1.iushrn(1);\n    k2.iushrn(1);\n  }\n\n  return jsf;\n}\nutils.getJSF = getJSF;\n\nfunction cachedProperty(obj, name, computer) {\n  var key = '_' + name;\n  obj.prototype[name] = function cachedProperty() {\n    return this[key] !== undefined ? this[key] :\n      this[key] = computer.call(this);\n  };\n}\nutils.cachedProperty = cachedProperty;\n\nfunction parseBytes(bytes) {\n  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :\n    bytes;\n}\nutils.parseBytes = parseBytes;\n\nfunction intFromLE(bytes) {\n  return new BN(bytes, 'hex', 'le');\n}\nutils.intFromLE = intFromLE;\n\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$elliptic$node_modules$bn_js$lib$bn","~$module$node_modules$minimalistic_assert$index","~$module$node_modules$minimalistic_crypto_utils$lib$utils"]],"~:properties",["^5",["getNAF","parseBytes","cachedProperty","toHex","zero2","getJSF","intFromLE","toArray","encode","assert"]],"~:compiled-at",1695041440735,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$elliptic$lib$elliptic$utils.js\",\n\"lineCount\":3,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/elliptic/lib/elliptic/utils.js\"],\n\"sourcesContent\":[\"shadow$provide[73] = function(global,require,module,exports) {\\n'use strict';\\n\\nvar utils = exports;\\nvar BN = require('bn.js');\\nvar minAssert = require('minimalistic-assert');\\nvar minUtils = require('minimalistic-crypto-utils');\\n\\nutils.assert = minAssert;\\nutils.toArray = minUtils.toArray;\\nutils.zero2 = minUtils.zero2;\\nutils.toHex = minUtils.toHex;\\nutils.encode = minUtils.encode;\\n\\n// Represent num in a w-NAF form\\nfunction getNAF(num, w, bits) {\\n  var naf = new Array(Math.max(num.bitLength(), bits) + 1);\\n  naf.fill(0);\\n\\n  var ws = 1 << (w + 1);\\n  var k = num.clone();\\n\\n  for (var i = 0; i < naf.length; i++) {\\n    var z;\\n    var mod = k.andln(ws - 1);\\n    if (k.isOdd()) {\\n      if (mod > (ws >> 1) - 1)\\n        z = (ws >> 1) - mod;\\n      else\\n        z = mod;\\n      k.isubn(z);\\n    } else {\\n      z = 0;\\n    }\\n\\n    naf[i] = z;\\n    k.iushrn(1);\\n  }\\n\\n  return naf;\\n}\\nutils.getNAF = getNAF;\\n\\n// Represent k1, k2 in a Joint Sparse Form\\nfunction getJSF(k1, k2) {\\n  var jsf = [\\n    [],\\n    [],\\n  ];\\n\\n  k1 = k1.clone();\\n  k2 = k2.clone();\\n  var d1 = 0;\\n  var d2 = 0;\\n  var m8;\\n  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {\\n    // First phase\\n    var m14 = (k1.andln(3) + d1) & 3;\\n    var m24 = (k2.andln(3) + d2) & 3;\\n    if (m14 === 3)\\n      m14 = -1;\\n    if (m24 === 3)\\n      m24 = -1;\\n    var u1;\\n    if ((m14 & 1) === 0) {\\n      u1 = 0;\\n    } else {\\n      m8 = (k1.andln(7) + d1) & 7;\\n      if ((m8 === 3 || m8 === 5) && m24 === 2)\\n        u1 = -m14;\\n      else\\n        u1 = m14;\\n    }\\n    jsf[0].push(u1);\\n\\n    var u2;\\n    if ((m24 & 1) === 0) {\\n      u2 = 0;\\n    } else {\\n      m8 = (k2.andln(7) + d2) & 7;\\n      if ((m8 === 3 || m8 === 5) && m14 === 2)\\n        u2 = -m24;\\n      else\\n        u2 = m24;\\n    }\\n    jsf[1].push(u2);\\n\\n    // Second phase\\n    if (2 * d1 === u1 + 1)\\n      d1 = 1 - d1;\\n    if (2 * d2 === u2 + 1)\\n      d2 = 1 - d2;\\n    k1.iushrn(1);\\n    k2.iushrn(1);\\n  }\\n\\n  return jsf;\\n}\\nutils.getJSF = getJSF;\\n\\nfunction cachedProperty(obj, name, computer) {\\n  var key = '_' + name;\\n  obj.prototype[name] = function cachedProperty() {\\n    return this[key] !== undefined ? this[key] :\\n      this[key] = computer.call(this);\\n  };\\n}\\nutils.cachedProperty = cachedProperty;\\n\\nfunction parseBytes(bytes) {\\n  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :\\n    bytes;\\n}\\nutils.parseBytes = parseBytes;\\n\\nfunction intFromLE(bytes) {\\n  return new BN(bytes, 'hex', 'le');\\n}\\nutils.intFromLE = intFromLE;\\n\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"BN\",\"minAssert\",\"minUtils\",\"assert\",\"toArray\",\"zero2\",\"toHex\",\"encode\",\"getNAF\",\"num\",\"w\",\"bits\",\"naf\",\"Array\",\"Math\",\"max\",\"bitLength\",\"fill\",\"ws\",\"k\",\"clone\",\"i\",\"length\",\"mod\",\"andln\",\"isOdd\",\"z\",\"isubn\",\"iushrn\",\"getJSF\",\"k1\",\"k2\",\"jsf\",\"d1\",\"d2\",\"m8\",\"cmpn\",\"m14\",\"m24\",\"u1\",\"push\",\"u2\",\"cachedProperty\",\"obj\",\"name\",\"computer\",\"key\",\"prototype\",\"undefined\",\"call\",\"parseBytes\",\"bytes\",\"intFromLE\"]\n}\n"]