shadow$provide.module$node_modules$viem$_cjs$actions$public$getLogs=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.getLogs=void 0;const abi_js_1=require("module$node_modules$viem$_cjs$errors$abi"),decodeEventLog_js_1=require("module$node_modules$viem$_cjs$utils$abi$decodeEventLog"),encodeEventTopics_js_1=require("module$node_modules$viem$_cjs$utils$abi$encodeEventTopics"),toHex_js_1=require("module$node_modules$viem$_cjs$utils$encoding$toHex"),
log_js_1=require("module$node_modules$viem$_cjs$utils$formatters$log");exports.getLogs=async function(client,{address,blockHash,fromBlock,toBlock,event:event$jscomp$0,events:events_,args:args$jscomp$0,strict:strict_}={}){const strict=strict_??!1,events=events_??(event$jscomp$0?[event$jscomp$0]:void 0);events_=[];events&&(events_=[events.flatMap(event=>(0,encodeEventTopics_js_1.encodeEventTopics)({abi:[event],eventName:event.name,args:args$jscomp$0}))],event$jscomp$0&&(events_=events_[0]));return(blockHash?
await client.request({method:"eth_getLogs",params:[{address,topics:events_,blockHash}]}):await client.request({method:"eth_getLogs",params:[{address,topics:events_,fromBlock:"bigint"===typeof fromBlock?(0,toHex_js_1.numberToHex)(fromBlock):fromBlock,toBlock:"bigint"===typeof toBlock?(0,toHex_js_1.numberToHex)(toBlock):toBlock}]})).map(log=>{try{const {eventName,args}=events?(0,decodeEventLog_js_1.decodeEventLog)({abi:events,data:log.data,topics:log.topics,strict}):{eventName:void 0,args:void 0};return(0,log_js_1.formatLog)(log,
{args,eventName})}catch(err){let eventName,isUnnamed;if(err instanceof abi_js_1.DecodeLogDataMismatch||err instanceof abi_js_1.DecodeLogTopicsMismatch){if(strict)return;eventName=err.abiItem.name;isUnnamed=err.abiItem.inputs?.some(x=>!("name"in x&&x.name))}return(0,log_js_1.formatLog)(log,{args:isUnnamed?[]:{},eventName})}}).filter(Boolean)}}
//# sourceMappingURL=module$node_modules$viem$_cjs$actions$public$getLogs.js.map
