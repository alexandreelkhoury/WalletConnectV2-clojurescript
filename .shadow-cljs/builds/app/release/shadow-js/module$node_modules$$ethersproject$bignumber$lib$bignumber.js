["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@ethersproject/bignumber/lib/bignumber.js"],"~:js","shadow$provide[13]=function(S,A,V,q){function F(t){if(\"string\"!==typeof t)return F(t.toString(16));if(\"-\"===t[0])return t=t.substring(1),\"-\"===t[0]&&n.throwArgumentError(\"invalid hex\",\"value\",t),t=F(t),\"0x00\"===t?t:\"-\"+t;\"0x\"!==t.substring(0,2)&&(t=\"0x\"+t);if(\"0x\"===t)return\"0x00\";for(t.length%2&&(t=\"0x0\"+t.substring(2));4<t.length&&\"0x00\"===t.substring(0,4);)t=\"0x\"+t.substring(4);return t}function G(t){return k.from(F(t))}function r(t){t=k.from(t).toHexString();return\"-\"===t[0]?new e(\"-\"+t.substring(3),\n16):new e(t.substring(2),16)}function y(t,B,E){B={fault:t,operation:B};null!=E&&(B.value=E);return n.throwError(t,p.Logger.errors.NUMERIC_FAULT,B)}S=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{\"default\":t}};Object.defineProperty(q,\"__esModule\",{value:!0});q._base16To36=q._base36To16=q.BigNumber=q.isBigNumberish=void 0;var e=S(A(7)).default.BN,u=A(11),p=A(9);A=A(12);var n=new p.Logger(A.version),l={};q.isBigNumberish=function(t){return null!=t&&(k.isBigNumber(t)||\"number\"===typeof t&&\n0===t%1||\"string\"===typeof t&&!!t.match(/^-?[0-9]+$/)||(0,u.isHexString)(t)||\"bigint\"===typeof t||(0,u.isBytes)(t))};var h=!1,k=function(){function t(B,E){B!==l&&n.throwError(\"cannot call constructor directly; use BigNumber.from\",p.Logger.errors.UNSUPPORTED_OPERATION,{operation:\"new (BigNumber)\"});this._hex=E;this._isBigNumber=!0;Object.freeze(this)}t.prototype.fromTwos=function(B){return G(r(this).fromTwos(B))};t.prototype.toTwos=function(B){return G(r(this).toTwos(B))};t.prototype.abs=function(){return\"-\"===\nthis._hex[0]?t.from(this._hex.substring(1)):this};t.prototype.add=function(B){return G(r(this).add(r(B)))};t.prototype.sub=function(B){return G(r(this).sub(r(B)))};t.prototype.div=function(B){t.from(B).isZero()&&y(\"division-by-zero\",\"div\");return G(r(this).div(r(B)))};t.prototype.mul=function(B){return G(r(this).mul(r(B)))};t.prototype.mod=function(B){B=r(B);B.isNeg()&&y(\"division-by-zero\",\"mod\");return G(r(this).umod(B))};t.prototype.pow=function(B){B=r(B);B.isNeg()&&y(\"negative-power\",\"pow\");return G(r(this).pow(B))};\nt.prototype.and=function(B){B=r(B);(this.isNegative()||B.isNeg())&&y(\"unbound-bitwise-result\",\"and\");return G(r(this).and(B))};t.prototype.or=function(B){B=r(B);(this.isNegative()||B.isNeg())&&y(\"unbound-bitwise-result\",\"or\");return G(r(this).or(B))};t.prototype.xor=function(B){B=r(B);(this.isNegative()||B.isNeg())&&y(\"unbound-bitwise-result\",\"xor\");return G(r(this).xor(B))};t.prototype.mask=function(B){(this.isNegative()||0>B)&&y(\"negative-width\",\"mask\");return G(r(this).maskn(B))};t.prototype.shl=\nfunction(B){(this.isNegative()||0>B)&&y(\"negative-width\",\"shl\");return G(r(this).shln(B))};t.prototype.shr=function(B){(this.isNegative()||0>B)&&y(\"negative-width\",\"shr\");return G(r(this).shrn(B))};t.prototype.eq=function(B){return r(this).eq(r(B))};t.prototype.lt=function(B){return r(this).lt(r(B))};t.prototype.lte=function(B){return r(this).lte(r(B))};t.prototype.gt=function(B){return r(this).gt(r(B))};t.prototype.gte=function(B){return r(this).gte(r(B))};t.prototype.isNegative=function(){return\"-\"===\nthis._hex[0]};t.prototype.isZero=function(){return r(this).isZero()};t.prototype.toNumber=function(){try{return r(this).toNumber()}catch(B){y(\"overflow\",\"toNumber\",this.toString())}return null};t.prototype.toBigInt=function(){try{return BigInt(this.toString())}catch(B){}return n.throwError(\"this platform does not support BigInt\",p.Logger.errors.UNSUPPORTED_OPERATION,{value:this.toString()})};t.prototype.toString=function(){0<arguments.length&&(10===arguments[0]?h||(h=!0,n.warn(\"BigNumber.toString does not accept any parameters; base-10 is assumed\")):\n16===arguments[0]?n.throwError(\"BigNumber.toString does not accept any parameters; use bigNumber.toHexString()\",p.Logger.errors.UNEXPECTED_ARGUMENT,{}):n.throwError(\"BigNumber.toString does not accept parameters\",p.Logger.errors.UNEXPECTED_ARGUMENT,{}));return r(this).toString(10)};t.prototype.toHexString=function(){return this._hex};t.prototype.toJSON=function(B){return{type:\"BigNumber\",hex:this.toHexString()}};t.from=function(B){if(B instanceof t)return B;if(\"string\"===typeof B)return B.match(/^-?0x[0-9a-f]+$/i)?\nnew t(l,F(B)):B.match(/^-?[0-9]+$/)?new t(l,F(new e(B))):n.throwArgumentError(\"invalid BigNumber string\",\"value\",B);if(\"number\"===typeof B)return B%1&&y(\"underflow\",\"BigNumber.from\",B),(9007199254740991<=B||-9007199254740991>=B)&&y(\"overflow\",\"BigNumber.from\",B),t.from(String(B));if(\"bigint\"===typeof B)return t.from(B.toString());if((0,u.isBytes)(B))return t.from((0,u.hexlify)(B));if(B)if(B.toHexString){var E=B.toHexString();if(\"string\"===typeof E)return t.from(E)}else if(E=B._hex,null==E&&\"BigNumber\"===\nB.type&&(E=B.hex),\"string\"===typeof E&&((0,u.isHexString)(E)||\"-\"===E[0]&&(0,u.isHexString)(E.substring(1))))return t.from(E);return n.throwArgumentError(\"invalid BigNumber value\",\"value\",B)};t.isBigNumber=function(B){return!(!B||!B._isBigNumber)};return t}();q.BigNumber=k;q._base36To16=function(t){return(new e(t,36)).toString(16)};q._base16To36=function(t){return(new e(t,16)).toString(36)}}","~:source","shadow$provide[13] = function(global,require,module,exports) {\n\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports._base16To36 = exports._base36To16 = exports.BigNumber = exports.isBigNumberish = void 0;\n/**\n *  BigNumber\n *\n *  A wrapper around the BN.js object. We use the BN.js library\n *  because it is used by elliptic, so it is required regardless.\n *\n */\nvar bn_js_1 = __importDefault(require(\"bn.js\"));\nvar BN = bn_js_1.default.BN;\nvar bytes_1 = require(\"@ethersproject/bytes\");\nvar logger_1 = require(\"@ethersproject/logger\");\nvar _version_1 = require(\"./_version\");\nvar logger = new logger_1.Logger(_version_1.version);\nvar _constructorGuard = {};\nvar MAX_SAFE = 0x1fffffffffffff;\nfunction isBigNumberish(value) {\n    return (value != null) && (BigNumber.isBigNumber(value) ||\n        (typeof (value) === \"number\" && (value % 1) === 0) ||\n        (typeof (value) === \"string\" && !!value.match(/^-?[0-9]+$/)) ||\n        (0, bytes_1.isHexString)(value) ||\n        (typeof (value) === \"bigint\") ||\n        (0, bytes_1.isBytes)(value));\n}\nexports.isBigNumberish = isBigNumberish;\n// Only warn about passing 10 into radix once\nvar _warnedToStringRadix = false;\nvar BigNumber = /** @class */ (function () {\n    function BigNumber(constructorGuard, hex) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"cannot call constructor directly; use BigNumber.from\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new (BigNumber)\"\n            });\n        }\n        this._hex = hex;\n        this._isBigNumber = true;\n        Object.freeze(this);\n    }\n    BigNumber.prototype.fromTwos = function (value) {\n        return toBigNumber(toBN(this).fromTwos(value));\n    };\n    BigNumber.prototype.toTwos = function (value) {\n        return toBigNumber(toBN(this).toTwos(value));\n    };\n    BigNumber.prototype.abs = function () {\n        if (this._hex[0] === \"-\") {\n            return BigNumber.from(this._hex.substring(1));\n        }\n        return this;\n    };\n    BigNumber.prototype.add = function (other) {\n        return toBigNumber(toBN(this).add(toBN(other)));\n    };\n    BigNumber.prototype.sub = function (other) {\n        return toBigNumber(toBN(this).sub(toBN(other)));\n    };\n    BigNumber.prototype.div = function (other) {\n        var o = BigNumber.from(other);\n        if (o.isZero()) {\n            throwFault(\"division-by-zero\", \"div\");\n        }\n        return toBigNumber(toBN(this).div(toBN(other)));\n    };\n    BigNumber.prototype.mul = function (other) {\n        return toBigNumber(toBN(this).mul(toBN(other)));\n    };\n    BigNumber.prototype.mod = function (other) {\n        var value = toBN(other);\n        if (value.isNeg()) {\n            throwFault(\"division-by-zero\", \"mod\");\n        }\n        return toBigNumber(toBN(this).umod(value));\n    };\n    BigNumber.prototype.pow = function (other) {\n        var value = toBN(other);\n        if (value.isNeg()) {\n            throwFault(\"negative-power\", \"pow\");\n        }\n        return toBigNumber(toBN(this).pow(value));\n    };\n    BigNumber.prototype.and = function (other) {\n        var value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"unbound-bitwise-result\", \"and\");\n        }\n        return toBigNumber(toBN(this).and(value));\n    };\n    BigNumber.prototype.or = function (other) {\n        var value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"unbound-bitwise-result\", \"or\");\n        }\n        return toBigNumber(toBN(this).or(value));\n    };\n    BigNumber.prototype.xor = function (other) {\n        var value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"unbound-bitwise-result\", \"xor\");\n        }\n        return toBigNumber(toBN(this).xor(value));\n    };\n    BigNumber.prototype.mask = function (value) {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"negative-width\", \"mask\");\n        }\n        return toBigNumber(toBN(this).maskn(value));\n    };\n    BigNumber.prototype.shl = function (value) {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"negative-width\", \"shl\");\n        }\n        return toBigNumber(toBN(this).shln(value));\n    };\n    BigNumber.prototype.shr = function (value) {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"negative-width\", \"shr\");\n        }\n        return toBigNumber(toBN(this).shrn(value));\n    };\n    BigNumber.prototype.eq = function (other) {\n        return toBN(this).eq(toBN(other));\n    };\n    BigNumber.prototype.lt = function (other) {\n        return toBN(this).lt(toBN(other));\n    };\n    BigNumber.prototype.lte = function (other) {\n        return toBN(this).lte(toBN(other));\n    };\n    BigNumber.prototype.gt = function (other) {\n        return toBN(this).gt(toBN(other));\n    };\n    BigNumber.prototype.gte = function (other) {\n        return toBN(this).gte(toBN(other));\n    };\n    BigNumber.prototype.isNegative = function () {\n        return (this._hex[0] === \"-\");\n    };\n    BigNumber.prototype.isZero = function () {\n        return toBN(this).isZero();\n    };\n    BigNumber.prototype.toNumber = function () {\n        try {\n            return toBN(this).toNumber();\n        }\n        catch (error) {\n            throwFault(\"overflow\", \"toNumber\", this.toString());\n        }\n        return null;\n    };\n    BigNumber.prototype.toBigInt = function () {\n        try {\n            return BigInt(this.toString());\n        }\n        catch (e) { }\n        return logger.throwError(\"this platform does not support BigInt\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {\n            value: this.toString()\n        });\n    };\n    BigNumber.prototype.toString = function () {\n        // Lots of people expect this, which we do not support, so check (See: #889)\n        if (arguments.length > 0) {\n            if (arguments[0] === 10) {\n                if (!_warnedToStringRadix) {\n                    _warnedToStringRadix = true;\n                    logger.warn(\"BigNumber.toString does not accept any parameters; base-10 is assumed\");\n                }\n            }\n            else if (arguments[0] === 16) {\n                logger.throwError(\"BigNumber.toString does not accept any parameters; use bigNumber.toHexString()\", logger_1.Logger.errors.UNEXPECTED_ARGUMENT, {});\n            }\n            else {\n                logger.throwError(\"BigNumber.toString does not accept parameters\", logger_1.Logger.errors.UNEXPECTED_ARGUMENT, {});\n            }\n        }\n        return toBN(this).toString(10);\n    };\n    BigNumber.prototype.toHexString = function () {\n        return this._hex;\n    };\n    BigNumber.prototype.toJSON = function (key) {\n        return { type: \"BigNumber\", hex: this.toHexString() };\n    };\n    BigNumber.from = function (value) {\n        if (value instanceof BigNumber) {\n            return value;\n        }\n        if (typeof (value) === \"string\") {\n            if (value.match(/^-?0x[0-9a-f]+$/i)) {\n                return new BigNumber(_constructorGuard, toHex(value));\n            }\n            if (value.match(/^-?[0-9]+$/)) {\n                return new BigNumber(_constructorGuard, toHex(new BN(value)));\n            }\n            return logger.throwArgumentError(\"invalid BigNumber string\", \"value\", value);\n        }\n        if (typeof (value) === \"number\") {\n            if (value % 1) {\n                throwFault(\"underflow\", \"BigNumber.from\", value);\n            }\n            if (value >= MAX_SAFE || value <= -MAX_SAFE) {\n                throwFault(\"overflow\", \"BigNumber.from\", value);\n            }\n            return BigNumber.from(String(value));\n        }\n        var anyValue = value;\n        if (typeof (anyValue) === \"bigint\") {\n            return BigNumber.from(anyValue.toString());\n        }\n        if ((0, bytes_1.isBytes)(anyValue)) {\n            return BigNumber.from((0, bytes_1.hexlify)(anyValue));\n        }\n        if (anyValue) {\n            // Hexable interface (takes priority)\n            if (anyValue.toHexString) {\n                var hex = anyValue.toHexString();\n                if (typeof (hex) === \"string\") {\n                    return BigNumber.from(hex);\n                }\n            }\n            else {\n                // For now, handle legacy JSON-ified values (goes away in v6)\n                var hex = anyValue._hex;\n                // New-form JSON\n                if (hex == null && anyValue.type === \"BigNumber\") {\n                    hex = anyValue.hex;\n                }\n                if (typeof (hex) === \"string\") {\n                    if ((0, bytes_1.isHexString)(hex) || (hex[0] === \"-\" && (0, bytes_1.isHexString)(hex.substring(1)))) {\n                        return BigNumber.from(hex);\n                    }\n                }\n            }\n        }\n        return logger.throwArgumentError(\"invalid BigNumber value\", \"value\", value);\n    };\n    BigNumber.isBigNumber = function (value) {\n        return !!(value && value._isBigNumber);\n    };\n    return BigNumber;\n}());\nexports.BigNumber = BigNumber;\n// Normalize the hex string\nfunction toHex(value) {\n    // For BN, call on the hex string\n    if (typeof (value) !== \"string\") {\n        return toHex(value.toString(16));\n    }\n    // If negative, prepend the negative sign to the normalized positive value\n    if (value[0] === \"-\") {\n        // Strip off the negative sign\n        value = value.substring(1);\n        // Cannot have multiple negative signs (e.g. \"--0x04\")\n        if (value[0] === \"-\") {\n            logger.throwArgumentError(\"invalid hex\", \"value\", value);\n        }\n        // Call toHex on the positive component\n        value = toHex(value);\n        // Do not allow \"-0x00\"\n        if (value === \"0x00\") {\n            return value;\n        }\n        // Negate the value\n        return \"-\" + value;\n    }\n    // Add a \"0x\" prefix if missing\n    if (value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    // Normalize zero\n    if (value === \"0x\") {\n        return \"0x00\";\n    }\n    // Make the string even length\n    if (value.length % 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n    // Trim to smallest even-length string\n    while (value.length > 4 && value.substring(0, 4) === \"0x00\") {\n        value = \"0x\" + value.substring(4);\n    }\n    return value;\n}\nfunction toBigNumber(value) {\n    return BigNumber.from(toHex(value));\n}\nfunction toBN(value) {\n    var hex = BigNumber.from(value).toHexString();\n    if (hex[0] === \"-\") {\n        return (new BN(\"-\" + hex.substring(3), 16));\n    }\n    return new BN(hex.substring(2), 16);\n}\nfunction throwFault(fault, operation, value) {\n    var params = { fault: fault, operation: operation };\n    if (value != null) {\n        params.value = value;\n    }\n    return logger.throwError(fault, logger_1.Logger.errors.NUMERIC_FAULT, params);\n}\n// value should have no prefix\nfunction _base36To16(value) {\n    return (new BN(value, 36)).toString(16);\n}\nexports._base36To16 = _base36To16;\n// value should have no prefix\nfunction _base16To36(value) {\n    return (new BN(value, 16)).toString(36);\n}\nexports._base16To36 = _base16To36;\n//# sourceMappingURL=bignumber.js.map\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$$ethersproject$bytes$lib$index","~$module$node_modules$$ethersproject$logger$lib$index","~$module$node_modules$$ethersproject$bignumber$lib$_version","~$module$node_modules$bn_DOT_js$lib$bn"]],"~:properties",["^5",["toHexString","lt","isNegative","toTwos","isZero","sub","eq","hex","__esModule","toBigInt","pow","toString","gt","gte","isBigNumberish","shl","shr","_base36To16","value","fromTwos","or","operation","_hex","BigNumber","_isBigNumber","and","mod","mul","div","type","abs","from","lte","add","toNumber","fault","xor","_base16To36","mask","toJSON","isBigNumber"]],"~:compiled-at",1695041440674,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$ethersproject$bignumber$lib$bignumber.js\",\n\"lineCount\":10,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/@ethersproject/bignumber/lib/bignumber.js\"],\n\"sourcesContent\":[\"shadow$provide[13] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\nvar __importDefault = (this && this.__importDefault) || function (mod) {\\n    return (mod && mod.__esModule) ? mod : { \\\"default\\\": mod };\\n};\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nexports._base16To36 = exports._base36To16 = exports.BigNumber = exports.isBigNumberish = void 0;\\n/**\\n *  BigNumber\\n *\\n *  A wrapper around the BN.js object. We use the BN.js library\\n *  because it is used by elliptic, so it is required regardless.\\n *\\n */\\nvar bn_js_1 = __importDefault(require(\\\"bn.js\\\"));\\nvar BN = bn_js_1.default.BN;\\nvar bytes_1 = require(\\\"@ethersproject/bytes\\\");\\nvar logger_1 = require(\\\"@ethersproject/logger\\\");\\nvar _version_1 = require(\\\"./_version\\\");\\nvar logger = new logger_1.Logger(_version_1.version);\\nvar _constructorGuard = {};\\nvar MAX_SAFE = 0x1fffffffffffff;\\nfunction isBigNumberish(value) {\\n    return (value != null) && (BigNumber.isBigNumber(value) ||\\n        (typeof (value) === \\\"number\\\" && (value % 1) === 0) ||\\n        (typeof (value) === \\\"string\\\" && !!value.match(/^-?[0-9]+$/)) ||\\n        (0, bytes_1.isHexString)(value) ||\\n        (typeof (value) === \\\"bigint\\\") ||\\n        (0, bytes_1.isBytes)(value));\\n}\\nexports.isBigNumberish = isBigNumberish;\\n// Only warn about passing 10 into radix once\\nvar _warnedToStringRadix = false;\\nvar BigNumber = /** @class */ (function () {\\n    function BigNumber(constructorGuard, hex) {\\n        if (constructorGuard !== _constructorGuard) {\\n            logger.throwError(\\\"cannot call constructor directly; use BigNumber.from\\\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {\\n                operation: \\\"new (BigNumber)\\\"\\n            });\\n        }\\n        this._hex = hex;\\n        this._isBigNumber = true;\\n        Object.freeze(this);\\n    }\\n    BigNumber.prototype.fromTwos = function (value) {\\n        return toBigNumber(toBN(this).fromTwos(value));\\n    };\\n    BigNumber.prototype.toTwos = function (value) {\\n        return toBigNumber(toBN(this).toTwos(value));\\n    };\\n    BigNumber.prototype.abs = function () {\\n        if (this._hex[0] === \\\"-\\\") {\\n            return BigNumber.from(this._hex.substring(1));\\n        }\\n        return this;\\n    };\\n    BigNumber.prototype.add = function (other) {\\n        return toBigNumber(toBN(this).add(toBN(other)));\\n    };\\n    BigNumber.prototype.sub = function (other) {\\n        return toBigNumber(toBN(this).sub(toBN(other)));\\n    };\\n    BigNumber.prototype.div = function (other) {\\n        var o = BigNumber.from(other);\\n        if (o.isZero()) {\\n            throwFault(\\\"division-by-zero\\\", \\\"div\\\");\\n        }\\n        return toBigNumber(toBN(this).div(toBN(other)));\\n    };\\n    BigNumber.prototype.mul = function (other) {\\n        return toBigNumber(toBN(this).mul(toBN(other)));\\n    };\\n    BigNumber.prototype.mod = function (other) {\\n        var value = toBN(other);\\n        if (value.isNeg()) {\\n            throwFault(\\\"division-by-zero\\\", \\\"mod\\\");\\n        }\\n        return toBigNumber(toBN(this).umod(value));\\n    };\\n    BigNumber.prototype.pow = function (other) {\\n        var value = toBN(other);\\n        if (value.isNeg()) {\\n            throwFault(\\\"negative-power\\\", \\\"pow\\\");\\n        }\\n        return toBigNumber(toBN(this).pow(value));\\n    };\\n    BigNumber.prototype.and = function (other) {\\n        var value = toBN(other);\\n        if (this.isNegative() || value.isNeg()) {\\n            throwFault(\\\"unbound-bitwise-result\\\", \\\"and\\\");\\n        }\\n        return toBigNumber(toBN(this).and(value));\\n    };\\n    BigNumber.prototype.or = function (other) {\\n        var value = toBN(other);\\n        if (this.isNegative() || value.isNeg()) {\\n            throwFault(\\\"unbound-bitwise-result\\\", \\\"or\\\");\\n        }\\n        return toBigNumber(toBN(this).or(value));\\n    };\\n    BigNumber.prototype.xor = function (other) {\\n        var value = toBN(other);\\n        if (this.isNegative() || value.isNeg()) {\\n            throwFault(\\\"unbound-bitwise-result\\\", \\\"xor\\\");\\n        }\\n        return toBigNumber(toBN(this).xor(value));\\n    };\\n    BigNumber.prototype.mask = function (value) {\\n        if (this.isNegative() || value < 0) {\\n            throwFault(\\\"negative-width\\\", \\\"mask\\\");\\n        }\\n        return toBigNumber(toBN(this).maskn(value));\\n    };\\n    BigNumber.prototype.shl = function (value) {\\n        if (this.isNegative() || value < 0) {\\n            throwFault(\\\"negative-width\\\", \\\"shl\\\");\\n        }\\n        return toBigNumber(toBN(this).shln(value));\\n    };\\n    BigNumber.prototype.shr = function (value) {\\n        if (this.isNegative() || value < 0) {\\n            throwFault(\\\"negative-width\\\", \\\"shr\\\");\\n        }\\n        return toBigNumber(toBN(this).shrn(value));\\n    };\\n    BigNumber.prototype.eq = function (other) {\\n        return toBN(this).eq(toBN(other));\\n    };\\n    BigNumber.prototype.lt = function (other) {\\n        return toBN(this).lt(toBN(other));\\n    };\\n    BigNumber.prototype.lte = function (other) {\\n        return toBN(this).lte(toBN(other));\\n    };\\n    BigNumber.prototype.gt = function (other) {\\n        return toBN(this).gt(toBN(other));\\n    };\\n    BigNumber.prototype.gte = function (other) {\\n        return toBN(this).gte(toBN(other));\\n    };\\n    BigNumber.prototype.isNegative = function () {\\n        return (this._hex[0] === \\\"-\\\");\\n    };\\n    BigNumber.prototype.isZero = function () {\\n        return toBN(this).isZero();\\n    };\\n    BigNumber.prototype.toNumber = function () {\\n        try {\\n            return toBN(this).toNumber();\\n        }\\n        catch (error) {\\n            throwFault(\\\"overflow\\\", \\\"toNumber\\\", this.toString());\\n        }\\n        return null;\\n    };\\n    BigNumber.prototype.toBigInt = function () {\\n        try {\\n            return BigInt(this.toString());\\n        }\\n        catch (e) { }\\n        return logger.throwError(\\\"this platform does not support BigInt\\\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {\\n            value: this.toString()\\n        });\\n    };\\n    BigNumber.prototype.toString = function () {\\n        // Lots of people expect this, which we do not support, so check (See: #889)\\n        if (arguments.length > 0) {\\n            if (arguments[0] === 10) {\\n                if (!_warnedToStringRadix) {\\n                    _warnedToStringRadix = true;\\n                    logger.warn(\\\"BigNumber.toString does not accept any parameters; base-10 is assumed\\\");\\n                }\\n            }\\n            else if (arguments[0] === 16) {\\n                logger.throwError(\\\"BigNumber.toString does not accept any parameters; use bigNumber.toHexString()\\\", logger_1.Logger.errors.UNEXPECTED_ARGUMENT, {});\\n            }\\n            else {\\n                logger.throwError(\\\"BigNumber.toString does not accept parameters\\\", logger_1.Logger.errors.UNEXPECTED_ARGUMENT, {});\\n            }\\n        }\\n        return toBN(this).toString(10);\\n    };\\n    BigNumber.prototype.toHexString = function () {\\n        return this._hex;\\n    };\\n    BigNumber.prototype.toJSON = function (key) {\\n        return { type: \\\"BigNumber\\\", hex: this.toHexString() };\\n    };\\n    BigNumber.from = function (value) {\\n        if (value instanceof BigNumber) {\\n            return value;\\n        }\\n        if (typeof (value) === \\\"string\\\") {\\n            if (value.match(/^-?0x[0-9a-f]+$/i)) {\\n                return new BigNumber(_constructorGuard, toHex(value));\\n            }\\n            if (value.match(/^-?[0-9]+$/)) {\\n                return new BigNumber(_constructorGuard, toHex(new BN(value)));\\n            }\\n            return logger.throwArgumentError(\\\"invalid BigNumber string\\\", \\\"value\\\", value);\\n        }\\n        if (typeof (value) === \\\"number\\\") {\\n            if (value % 1) {\\n                throwFault(\\\"underflow\\\", \\\"BigNumber.from\\\", value);\\n            }\\n            if (value >= MAX_SAFE || value <= -MAX_SAFE) {\\n                throwFault(\\\"overflow\\\", \\\"BigNumber.from\\\", value);\\n            }\\n            return BigNumber.from(String(value));\\n        }\\n        var anyValue = value;\\n        if (typeof (anyValue) === \\\"bigint\\\") {\\n            return BigNumber.from(anyValue.toString());\\n        }\\n        if ((0, bytes_1.isBytes)(anyValue)) {\\n            return BigNumber.from((0, bytes_1.hexlify)(anyValue));\\n        }\\n        if (anyValue) {\\n            // Hexable interface (takes priority)\\n            if (anyValue.toHexString) {\\n                var hex = anyValue.toHexString();\\n                if (typeof (hex) === \\\"string\\\") {\\n                    return BigNumber.from(hex);\\n                }\\n            }\\n            else {\\n                // For now, handle legacy JSON-ified values (goes away in v6)\\n                var hex = anyValue._hex;\\n                // New-form JSON\\n                if (hex == null && anyValue.type === \\\"BigNumber\\\") {\\n                    hex = anyValue.hex;\\n                }\\n                if (typeof (hex) === \\\"string\\\") {\\n                    if ((0, bytes_1.isHexString)(hex) || (hex[0] === \\\"-\\\" && (0, bytes_1.isHexString)(hex.substring(1)))) {\\n                        return BigNumber.from(hex);\\n                    }\\n                }\\n            }\\n        }\\n        return logger.throwArgumentError(\\\"invalid BigNumber value\\\", \\\"value\\\", value);\\n    };\\n    BigNumber.isBigNumber = function (value) {\\n        return !!(value && value._isBigNumber);\\n    };\\n    return BigNumber;\\n}());\\nexports.BigNumber = BigNumber;\\n// Normalize the hex string\\nfunction toHex(value) {\\n    // For BN, call on the hex string\\n    if (typeof (value) !== \\\"string\\\") {\\n        return toHex(value.toString(16));\\n    }\\n    // If negative, prepend the negative sign to the normalized positive value\\n    if (value[0] === \\\"-\\\") {\\n        // Strip off the negative sign\\n        value = value.substring(1);\\n        // Cannot have multiple negative signs (e.g. \\\"--0x04\\\")\\n        if (value[0] === \\\"-\\\") {\\n            logger.throwArgumentError(\\\"invalid hex\\\", \\\"value\\\", value);\\n        }\\n        // Call toHex on the positive component\\n        value = toHex(value);\\n        // Do not allow \\\"-0x00\\\"\\n        if (value === \\\"0x00\\\") {\\n            return value;\\n        }\\n        // Negate the value\\n        return \\\"-\\\" + value;\\n    }\\n    // Add a \\\"0x\\\" prefix if missing\\n    if (value.substring(0, 2) !== \\\"0x\\\") {\\n        value = \\\"0x\\\" + value;\\n    }\\n    // Normalize zero\\n    if (value === \\\"0x\\\") {\\n        return \\\"0x00\\\";\\n    }\\n    // Make the string even length\\n    if (value.length % 2) {\\n        value = \\\"0x0\\\" + value.substring(2);\\n    }\\n    // Trim to smallest even-length string\\n    while (value.length > 4 && value.substring(0, 4) === \\\"0x00\\\") {\\n        value = \\\"0x\\\" + value.substring(4);\\n    }\\n    return value;\\n}\\nfunction toBigNumber(value) {\\n    return BigNumber.from(toHex(value));\\n}\\nfunction toBN(value) {\\n    var hex = BigNumber.from(value).toHexString();\\n    if (hex[0] === \\\"-\\\") {\\n        return (new BN(\\\"-\\\" + hex.substring(3), 16));\\n    }\\n    return new BN(hex.substring(2), 16);\\n}\\nfunction throwFault(fault, operation, value) {\\n    var params = { fault: fault, operation: operation };\\n    if (value != null) {\\n        params.value = value;\\n    }\\n    return logger.throwError(fault, logger_1.Logger.errors.NUMERIC_FAULT, params);\\n}\\n// value should have no prefix\\nfunction _base36To16(value) {\\n    return (new BN(value, 36)).toString(16);\\n}\\nexports._base36To16 = _base36To16;\\n// value should have no prefix\\nfunction _base16To36(value) {\\n    return (new BN(value, 16)).toString(36);\\n}\\nexports._base16To36 = _base16To36;\\n//# sourceMappingURL=bignumber.js.map\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"toHex\",\"value\",\"toString\",\"substring\",\"logger\",\"throwArgumentError\",\"length\",\"toBigNumber\",\"BigNumber\",\"from\",\"toBN\",\"hex\",\"toHexString\",\"BN\",\"throwFault\",\"fault\",\"operation\",\"params\",\"throwError\",\"logger_1\",\"Logger\",\"errors\",\"NUMERIC_FAULT\",\"__importDefault\",\"mod\",\"__esModule\",\"Object\",\"defineProperty\",\"_base16To36\",\"_base36To16\",\"isBigNumberish\",\"bn_js_1\",\"default\",\"bytes_1\",\"_version_1\",\"version\",\"_constructorGuard\",\"isBigNumber\",\"match\",\"isHexString\",\"isBytes\",\"_warnedToStringRadix\",\"constructorGuard\",\"UNSUPPORTED_OPERATION\",\"_hex\",\"_isBigNumber\",\"freeze\",\"prototype\",\"fromTwos\",\"BigNumber.prototype.fromTwos\",\"toTwos\",\"BigNumber.prototype.toTwos\",\"abs\",\"BigNumber.prototype.abs\",\"add\",\"BigNumber.prototype.add\",\"other\",\"sub\",\"BigNumber.prototype.sub\",\"div\",\"BigNumber.prototype.div\",\"o\",\"isZero\",\"mul\",\"BigNumber.prototype.mul\",\"BigNumber.prototype.mod\",\"isNeg\",\"umod\",\"pow\",\"BigNumber.prototype.pow\",\"and\",\"BigNumber.prototype.and\",\"isNegative\",\"or\",\"BigNumber.prototype.or\",\"xor\",\"BigNumber.prototype.xor\",\"mask\",\"BigNumber.prototype.mask\",\"maskn\",\"shl\",\"BigNumber.prototype.shl\",\"shln\",\"shr\",\"BigNumber.prototype.shr\",\"shrn\",\"eq\",\"BigNumber.prototype.eq\",\"lt\",\"BigNumber.prototype.lt\",\"lte\",\"BigNumber.prototype.lte\",\"gt\",\"BigNumber.prototype.gt\",\"gte\",\"BigNumber.prototype.gte\",\"BigNumber.prototype.isNegative\",\"BigNumber.prototype.isZero\",\"toNumber\",\"BigNumber.prototype.toNumber\",\"error\",\"toBigInt\",\"BigNumber.prototype.toBigInt\",\"BigInt\",\"e\",\"BigNumber.prototype.toString\",\"arguments\",\"warn\",\"UNEXPECTED_ARGUMENT\",\"BigNumber.prototype.toHexString\",\"toJSON\",\"BigNumber.prototype.toJSON\",\"key\",\"type\",\"BigNumber.from\",\"MAX_SAFE\",\"String\",\"hexlify\",\"BigNumber.isBigNumber\"]\n}\n"]