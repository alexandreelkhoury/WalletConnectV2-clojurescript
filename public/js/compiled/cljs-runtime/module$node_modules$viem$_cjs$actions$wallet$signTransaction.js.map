{
"version":3,
"file":"module$node_modules$viem$_cjs$actions$wallet$signTransaction.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,CAAA,4DAAA,CAAiF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAEzHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CACAH,QAAQI,CAAAA,eAAR,CAA0B,IAAK,EAC/B,OAAMC,kBAAoBP,OAAA,CAAQ,2DAAR,CAA1B,CACMQ,aAAeR,OAAA,CAAQ,8CAAR,CADrB,CAEMS,WAAaT,OAAA,CAAQ,2CAAR,CAFnB,CAGMU,wBAA0BV,OAAA,CAAQ,mEAAR,CAHhC;AAIMW,WAAaX,OAAA,CAAQ,2CAAR,CAJnB,CAKMY,mBAAqBZ,OAAA,CAAQ,+DAAR,CAL3B,CAMMa,gBAAkBb,OAAA,CAAQ,yDAAR,CAoCxBE,QAAQI,CAAAA,eAAR,CAnCAA,cAA8B,CAACQ,MAAD,CAASC,IAAT,CAAe,CACzC,MAAM,CAAE,QAASC,QAAA,CAAWF,MAAOG,CAAAA,OAA7B,CAAsCC,KAAA,CAAQJ,MAAOI,CAAAA,KAArD,CAA4D,GAAGC,WAA/D,CAAA,CAA+EJ,IACrF,IAAI,CAACC,QAAL,CACI,KAAM,KAAIR,YAAaY,CAAAA,oBAAjB,CAAsC,CACxCC,SAAU,sCAD8B,CAAtC,CAAN,CAGJ,MAAMJ,QAAU,GAAIV,iBAAkBe,CAAAA,YAAtB,EAAoCN,QAApC,CAChB;GAAIJ,kBAAmBW,CAAAA,aAAvB,EAAsC,CAClCN,OADkC,CAElC,GAAGF,IAF+B,CAAtC,CAIMS,KAAAA,CAAU,MAAM,GAAIX,eAAgBY,CAAAA,UAApB,EAAgCX,MAAhC,CACR,KAAd,GAAII,KAAJ,EACI,GAAIT,UAAWiB,CAAAA,kBAAf,EAAmC,CAC/BC,eAAgBH,IADe,CAE/BN,KAF+B,CAAnC,CAKJ,OAAMU,OAAqBC,CADRX,KAAOY,EAAAA,UACCD,EADaf,MAAOI,CAAAA,KAAOY,EAAAA,UAC3BD,GAAAA,kBAAoBD,EAAAA,MAAzCA,EAAmDlB,uBAAwBqB,CAAAA,wBACjF,OAAqB,OAArB,GAAId,OAAQe,CAAAA,IAAZ,CACWf,OAAQX,CAAAA,eAAR,CAAwB,CAC3BkB,QAAAA,IAD2B,CAE3B,GAAGL,WAFwB,CAAxB,CAGJ,CAAEc,WAAYnB,MAAOI,CAAAA,KAAOgB,EAAAA,WAAaf,EAAAA,WAAzC,CAHI,CADX,CAKO,MAAML,MAAOqB,CAAAA,OAAP,CAAe,CACxBC,OAAQ,qBADgB;AAExBC,OAAQ,CACJ,CACI,GAAGT,MAAA,CAAOT,WAAP,CADP,CAEIK,QAAS,GAAIb,UAAW2B,CAAAA,WAAf,EAA4Bd,IAA5B,CAFb,CAGIe,KAAMtB,OAAQuB,CAAAA,OAHlB,CADI,CAFgB,CAAf,CAxB4B,CAX4E;",
"sources":["node_modules/viem/_cjs/actions/wallet/signTransaction.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$viem$_cjs$actions$wallet$signTransaction\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.signTransaction = void 0;\nconst parseAccount_js_1 = require(\"../../accounts/utils/parseAccount.js\");\nconst account_js_1 = require(\"../../errors/account.js\");\nconst chain_js_1 = require(\"../../utils/chain.js\");\nconst transactionRequest_js_1 = require(\"../../utils/formatters/transactionRequest.js\");\nconst index_js_1 = require(\"../../utils/index.js\");\nconst assertRequest_js_1 = require(\"../../utils/transaction/assertRequest.js\");\nconst getChainId_js_1 = require(\"../public/getChainId.js\");\nasync function signTransaction(client, args) {\n    const { account: account_ = client.account, chain = client.chain, ...transaction } = args;\n    if (!account_)\n        throw new account_js_1.AccountNotFoundError({\n            docsPath: '/docs/actions/wallet/signTransaction',\n        });\n    const account = (0, parseAccount_js_1.parseAccount)(account_);\n    (0, assertRequest_js_1.assertRequest)({\n        account,\n        ...args,\n    });\n    const chainId = await (0, getChainId_js_1.getChainId)(client);\n    if (chain !== null)\n        (0, chain_js_1.assertCurrentChain)({\n            currentChainId: chainId,\n            chain,\n        });\n    const formatters = chain?.formatters || client.chain?.formatters;\n    const format = formatters?.transactionRequest?.format || transactionRequest_js_1.formatTransactionRequest;\n    if (account.type === 'local')\n        return account.signTransaction({\n            chainId,\n            ...transaction,\n        }, { serializer: client.chain?.serializers?.transaction });\n    return await client.request({\n        method: 'eth_signTransaction',\n        params: [\n            {\n                ...format(transaction),\n                chainId: (0, index_js_1.numberToHex)(chainId),\n                from: account.address,\n            },\n        ],\n    });\n}\nexports.signTransaction = signTransaction;\n//# sourceMappingURL=signTransaction.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","signTransaction","parseAccount_js_1","account_js_1","chain_js_1","transactionRequest_js_1","index_js_1","assertRequest_js_1","getChainId_js_1","client","args","account_","account","chain","transaction","AccountNotFoundError","docsPath","parseAccount","assertRequest","chainId","getChainId","assertCurrentChain","currentChainId","format","transactionRequest","formatters","formatTransactionRequest","type","serializer","serializers","request","method","params","numberToHex","from","address"]
}
