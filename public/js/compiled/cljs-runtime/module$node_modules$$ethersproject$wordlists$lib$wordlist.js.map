{
"version":3,
"file":"module$node_modules$$ethersproject$wordlists$lib$wordlist.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,yDAAA,CAA8E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAEtHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CACAH,QAAQI,CAAAA,QAAR,CAAmBJ,OAAQK,CAAAA,MAA3B,CAAoC,IAAK,EAGzC,KAAIC,OAASR,OAAA,CAAQ,mDAAR,CAAb,CACIS,aAAeT,OAAA,CAAQ,yDAAR,CACfU,OAAAA,CAAWV,OAAA,CAAQ,qDAAR,CACXW,QAAAA,CAAaX,OAAA,CAAQ,2DAAR,CACjBE;OAAQK,CAAAA,MAAR,CAAiB,IAAIG,MAASE,CAAAA,MAAb,CAAoBD,OAAWE,CAAAA,OAA/B,CACbP,QAAAA,CAA0B,QAAS,EAAG,CACtCA,QAASA,SAAQ,CAACQ,MAAD,CAAS,CAEtBZ,OAAQK,CAAAA,MAAOQ,CAAAA,aAAf,CADiB,IAAKC,CAAAA,WACtB,CAAyCV,QAAzC,CACA,IAAIG,YAAaQ,CAAAA,cAAjB,EAAiC,IAAjC,CAAuC,QAAvC,CAAiDH,MAAjD,CAHsB,CAM1BR,QAASY,CAAAA,SAAUC,CAAAA,KAAnB,CAA2BC,QAAS,CAACC,QAAD,CAAW,CAC3C,MAAOA,SAASC,CAAAA,WAAT,EAAuBH,CAAAA,KAAvB,CAA6B,KAA7B,CADoC,CAI/Cb,SAASY,CAAAA,SAAUK,CAAAA,IAAnB,CAA0BC,QAAS,CAACC,KAAD,CAAQ,CACvC,MAAOA,MAAMF,CAAAA,IAAN,CAAW,GAAX,CADgC,CAG3CjB,SAASoB,CAAAA,KAAT,CAAiBC,QAAS,CAACC,QAAD,CAAW,CAEjC,IADA,IAAIH,MAAQ,EAAZ,CACSI,EAAI,CAAb,CAAoB,IAApB,CAAgBA,CAAhB,CAA0BA,CAAA,EAA1B,CAA+B,CAC3B,IAAIC,KAAOF,QAASG,CAAAA,OAAT,CAAiBF,CAAjB,CAEX,IAAIA,CAAJ,GAAUD,QAASI,CAAAA,YAAT,CAAsBF,IAAtB,CAAV,CACI,MAAO,IAEXL,MAAMQ,CAAAA,IAAN,CAAWH,IAAX,CAN2B,CAQ/B,MAAO,GAAItB,MAAO0B,CAAAA,EAAX,EAAeT,KAAMF,CAAAA,IAAN,CAAW,IAAX,CAAf;AAAkC,IAAlC,CAV0B,CAYrCjB,SAAS6B,CAAAA,QAAT,CAAoBC,QAAS,CAACC,IAAD,CAAOC,IAAP,CAAa,EAiB1C,OAAOhC,SA3C+B,CAAZ,EA6C9BJ,QAAQI,CAAAA,QAAR,CAAmBA,OAxDmG;",
"sources":["node_modules/@ethersproject/wordlists/lib/wordlist.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$ethersproject$wordlists$lib$wordlist\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Wordlist = exports.logger = void 0;\n// This gets overridden by rollup\nvar exportWordlist = false;\nvar hash_1 = require(\"@ethersproject/hash\");\nvar properties_1 = require(\"@ethersproject/properties\");\nvar logger_1 = require(\"@ethersproject/logger\");\nvar _version_1 = require(\"./_version\");\nexports.logger = new logger_1.Logger(_version_1.version);\nvar Wordlist = /** @class */ (function () {\n    function Wordlist(locale) {\n        var _newTarget = this.constructor;\n        exports.logger.checkAbstract(_newTarget, Wordlist);\n        (0, properties_1.defineReadOnly)(this, \"locale\", locale);\n    }\n    // Subclasses may override this\n    Wordlist.prototype.split = function (mnemonic) {\n        return mnemonic.toLowerCase().split(/ +/g);\n    };\n    // Subclasses may override this\n    Wordlist.prototype.join = function (words) {\n        return words.join(\" \");\n    };\n    Wordlist.check = function (wordlist) {\n        var words = [];\n        for (var i = 0; i < 2048; i++) {\n            var word = wordlist.getWord(i);\n            /* istanbul ignore if */\n            if (i !== wordlist.getWordIndex(word)) {\n                return \"0x\";\n            }\n            words.push(word);\n        }\n        return (0, hash_1.id)(words.join(\"\\n\") + \"\\n\");\n    };\n    Wordlist.register = function (lang, name) {\n        if (!name) {\n            name = lang.locale;\n        }\n        /* istanbul ignore if */\n        if (exportWordlist) {\n            try {\n                var anyGlobal = window;\n                if (anyGlobal._ethers && anyGlobal._ethers.wordlists) {\n                    if (!anyGlobal._ethers.wordlists[name]) {\n                        (0, properties_1.defineReadOnly)(anyGlobal._ethers.wordlists, name, lang);\n                    }\n                }\n            }\n            catch (error) { }\n        }\n    };\n    return Wordlist;\n}());\nexports.Wordlist = Wordlist;\n//# sourceMappingURL=wordlist.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","Wordlist","logger","hash_1","properties_1","logger_1","_version_1","Logger","version","locale","checkAbstract","constructor","defineReadOnly","prototype","split","Wordlist.prototype.split","mnemonic","toLowerCase","join","Wordlist.prototype.join","words","check","Wordlist.check","wordlist","i","word","getWord","getWordIndex","push","id","register","Wordlist.register","lang","name"]
}
