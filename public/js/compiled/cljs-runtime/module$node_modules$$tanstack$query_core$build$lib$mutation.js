shadow$provide.module$node_modules$$tanstack$query_core$build$lib$mutation=function(global,require,module,exports){function getDefaultState(){return{context:void 0,data:void 0,error:null,failureCount:0,failureReason:null,isPaused:!1,status:"idle",variables:void 0}}Object.defineProperty(exports,"__esModule",{value:!0});var logger=require("module$node_modules$$tanstack$query_core$build$lib$logger"),notifyManager=require("module$node_modules$$tanstack$query_core$build$lib$notifyManager");global=require("module$node_modules$$tanstack$query_core$build$lib$removable");
var retryer=require("module$node_modules$$tanstack$query_core$build$lib$retryer");class Mutation extends global.Removable{constructor(config){super();this.defaultOptions=config.defaultOptions;this.mutationId=config.mutationId;this.mutationCache=config.mutationCache;this.logger=config.logger||logger.defaultLogger;this.observers=[];this.state=config.state||getDefaultState();this.setOptions(config.options);this.scheduleGc()}setOptions(options){this.options={...this.defaultOptions,...options};this.updateCacheTime(this.options.cacheTime)}get meta(){return this.options.meta}setState(state){this.dispatch({type:"setState",
state})}addObserver(observer){this.observers.includes(observer)||(this.observers.push(observer),this.clearGcTimeout(),this.mutationCache.notify({type:"observerAdded",mutation:this,observer}))}removeObserver(observer){this.observers=this.observers.filter(x=>x!==observer);this.scheduleGc();this.mutationCache.notify({type:"observerRemoved",mutation:this,observer})}optionalRemove(){this.observers.length||("loading"===this.state.status?this.scheduleGc():this.mutationCache.remove(this))}continue(){var _this$retryer$continu,
_this$retryer;return null!=(_this$retryer$continu=null==(_this$retryer=this.retryer)?void 0:_this$retryer.continue())?_this$retryer$continu:this.execute()}async execute(){const executeMutation=()=>{var _this$options$retry;this.retryer=retryer.createRetryer({fn:()=>this.options.mutationFn?this.options.mutationFn(this.state.variables):Promise.reject("No mutationFn found"),onFail:(failureCount,error)=>{this.dispatch({type:"failed",failureCount,error})},onPause:()=>{this.dispatch({type:"pause"})},onContinue:()=>
{this.dispatch({type:"continue"})},retry:null!=(_this$options$retry=this.options.retry)?_this$options$retry:0,retryDelay:this.options.retryDelay,networkMode:this.options.networkMode});return this.retryer.promise},restored="loading"===this.state.status;try{var _this$mutationCache$c3,_this$mutationCache$c4,_this$options$onSucce,_this$options2,_this$mutationCache$c5,_this$mutationCache$c6,_this$options$onSettl,_this$options3;if(!restored){var _this$mutationCache$c,_this$mutationCache$c2,_this$options$onMutat,
_this$options;this.dispatch({type:"loading",variables:this.options.variables});await (null==(_this$mutationCache$c=(_this$mutationCache$c2=this.mutationCache.config).onMutate)?void 0:_this$mutationCache$c.call(_this$mutationCache$c2,this.state.variables,this));const context=await (null==(_this$options$onMutat=(_this$options=this.options).onMutate)?void 0:_this$options$onMutat.call(_this$options,this.state.variables));context!==this.state.context&&this.dispatch({type:"loading",context,variables:this.state.variables})}const data=
await executeMutation();await (null==(_this$mutationCache$c3=(_this$mutationCache$c4=this.mutationCache.config).onSuccess)?void 0:_this$mutationCache$c3.call(_this$mutationCache$c4,data,this.state.variables,this.state.context,this));await (null==(_this$options$onSucce=(_this$options2=this.options).onSuccess)?void 0:_this$options$onSucce.call(_this$options2,data,this.state.variables,this.state.context));await (null==(_this$mutationCache$c5=(_this$mutationCache$c6=this.mutationCache.config).onSettled)?
void 0:_this$mutationCache$c5.call(_this$mutationCache$c6,data,null,this.state.variables,this.state.context,this));await (null==(_this$options$onSettl=(_this$options3=this.options).onSettled)?void 0:_this$options$onSettl.call(_this$options3,data,null,this.state.variables,this.state.context));this.dispatch({type:"success",data});return data}catch(error){try{var _this$mutationCache$c7,_this$mutationCache$c8,_this$options$onError,_this$options4,_this$mutationCache$c9,_this$mutationCache$c10,_this$options$onSettl2,
_this$options5;await (null==(_this$mutationCache$c7=(_this$mutationCache$c8=this.mutationCache.config).onError)?void 0:_this$mutationCache$c7.call(_this$mutationCache$c8,error,this.state.variables,this.state.context,this));this.logger.error(error);await (null==(_this$options$onError=(_this$options4=this.options).onError)?void 0:_this$options$onError.call(_this$options4,error,this.state.variables,this.state.context));await (null==(_this$mutationCache$c9=(_this$mutationCache$c10=this.mutationCache.config).onSettled)?
void 0:_this$mutationCache$c9.call(_this$mutationCache$c10,void 0,error,this.state.variables,this.state.context,this));await (null==(_this$options$onSettl2=(_this$options5=this.options).onSettled)?void 0:_this$options$onSettl2.call(_this$options5,void 0,error,this.state.variables,this.state.context));throw error;}finally{this.dispatch({type:"error",error})}}}dispatch(action){this.state=(state=>{switch(action.type){case "failed":return{...state,failureCount:action.failureCount,failureReason:action.error};
case "pause":return{...state,isPaused:!0};case "continue":return{...state,isPaused:!1};case "loading":return{...state,context:action.context,data:void 0,failureCount:0,failureReason:null,error:null,isPaused:!retryer.canFetch(this.options.networkMode),status:"loading",variables:action.variables};case "success":return{...state,data:action.data,failureCount:0,failureReason:null,error:null,status:"success",isPaused:!1};case "error":return{...state,data:void 0,error:action.error,failureCount:state.failureCount+
1,failureReason:action.error,isPaused:!1,status:"error"};case "setState":return{...state,...action.state}}})(this.state);notifyManager.notifyManager.batch(()=>{this.observers.forEach(observer=>{observer.onMutationUpdate(action)});this.mutationCache.notify({mutation:this,type:"updated",action})})}}exports.Mutation=Mutation;exports.getDefaultState=getDefaultState}
//# sourceMappingURL=module$node_modules$$tanstack$query_core$build$lib$mutation.js.map
