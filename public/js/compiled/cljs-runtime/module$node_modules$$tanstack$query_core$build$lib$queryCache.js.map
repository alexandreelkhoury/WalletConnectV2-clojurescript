{
"version":3,
"file":"module$node_modules$$tanstack$query_core$build$lib$queryCache.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/@tanstack/query-core/build/lib/queryCache.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$tanstack$query_core$build$lib$queryCache\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar utils = require('./utils.js');\nvar query = require('./query.js');\nvar notifyManager = require('./notifyManager.js');\nvar subscribable = require('./subscribable.js');\n\n// CLASS\nclass QueryCache extends subscribable.Subscribable {\n  constructor(config) {\n    super();\n    this.config = config || {};\n    this.queries = [];\n    this.queriesMap = {};\n  }\n\n  build(client, options, state) {\n    var _options$queryHash;\n\n    const queryKey = options.queryKey;\n    const queryHash = (_options$queryHash = options.queryHash) != null ? _options$queryHash : utils.hashQueryKeyByOptions(queryKey, options);\n    let query$1 = this.get(queryHash);\n\n    if (!query$1) {\n      query$1 = new query.Query({\n        cache: this,\n        logger: client.getLogger(),\n        queryKey,\n        queryHash,\n        options: client.defaultQueryOptions(options),\n        state,\n        defaultOptions: client.getQueryDefaults(queryKey)\n      });\n      this.add(query$1);\n    }\n\n    return query$1;\n  }\n\n  add(query) {\n    if (!this.queriesMap[query.queryHash]) {\n      this.queriesMap[query.queryHash] = query;\n      this.queries.push(query);\n      this.notify({\n        type: 'added',\n        query\n      });\n    }\n  }\n\n  remove(query) {\n    const queryInMap = this.queriesMap[query.queryHash];\n\n    if (queryInMap) {\n      query.destroy();\n      this.queries = this.queries.filter(x => x !== query);\n\n      if (queryInMap === query) {\n        delete this.queriesMap[query.queryHash];\n      }\n\n      this.notify({\n        type: 'removed',\n        query\n      });\n    }\n  }\n\n  clear() {\n    notifyManager.notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        this.remove(query);\n      });\n    });\n  }\n\n  get(queryHash) {\n    return this.queriesMap[queryHash];\n  }\n\n  getAll() {\n    return this.queries;\n  }\n\n  find(arg1, arg2) {\n    const [filters] = utils.parseFilterArgs(arg1, arg2);\n\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true;\n    }\n\n    return this.queries.find(query => utils.matchQuery(filters, query));\n  }\n\n  findAll(arg1, arg2) {\n    const [filters] = utils.parseFilterArgs(arg1, arg2);\n    return Object.keys(filters).length > 0 ? this.queries.filter(query => utils.matchQuery(filters, query)) : this.queries;\n  }\n\n  notify(event) {\n    notifyManager.notifyManager.batch(() => {\n      this.listeners.forEach(({\n        listener\n      }) => {\n        listener(event);\n      });\n    });\n  }\n\n  onFocus() {\n    notifyManager.notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onFocus();\n      });\n    });\n  }\n\n  onOnline() {\n    notifyManager.notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onOnline();\n      });\n    });\n  }\n\n}\n\nexports.QueryCache = QueryCache;\n//# sourceMappingURL=queryCache.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","utils","query","notifyManager","subscribable","QueryCache","Subscribable","constructor","config","queries","queriesMap","build","client","options","state","_options$queryHash","queryKey","queryHash","hashQueryKeyByOptions","query$1","get","Query","cache","logger","getLogger","defaultQueryOptions","defaultOptions","getQueryDefaults","add","push","notify","type","remove","queryInMap","destroy","filter","x","clear","batch","forEach","getAll","find","arg1","arg2","filters","parseFilterArgs","exact","matchQuery","findAll","keys","length","event","listeners","listener","onFocus","onOnline"]
}
