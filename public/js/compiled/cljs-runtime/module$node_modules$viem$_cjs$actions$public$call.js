shadow$provide.module$node_modules$viem$_cjs$actions$public$call=function(global,require,module,exports){function shouldPerformMulticall({request}){const {data,to,...request_}=request;return!data||data.startsWith(contract_js_1.aggregate3Signature)||!to||0<Object.values(request_).filter(x=>"undefined"!==typeof x).length?!1:!0}async function scheduleMulticall(client,args$jscomp$0){const {batchSize=1024,wait=0}="object"===typeof client.batch?.multicall?client.batch.multicall:{},{blockNumber,blockTag=
"latest",data:data$jscomp$0,multicallAddress:multicallAddress_,to}=args$jscomp$0;let multicallAddress=multicallAddress_;if(!multicallAddress){if(!client.chain)throw new chain_js_1.ClientChainNotConfiguredError;multicallAddress=(0,chain_js_2.getChainContractAddress)({blockNumber,chain:client.chain,contract:"multicall3"})}const block=(blockNumber?(0,toHex_js_1.numberToHex)(blockNumber):void 0)||blockTag;({schedule:args$jscomp$0}=(0,createBatchScheduler_js_1.createBatchScheduler)({id:`${client.uid}.${block}`,
wait,shouldSplitBatch(args){return args.reduce((size,{data})=>size+(data.length-2),0)>2*batchSize},fn:async requests=>{requests=requests.map(request=>({allowFailure:!0,callData:request.data,target:request.to}));var calldata=(0,encodeFunctionData_js_1.encodeFunctionData)({abi:abis_js_1.multicall3Abi,args:[requests],functionName:"aggregate3"});calldata=await client.request({method:"eth_call",params:[{data:calldata,to:multicallAddress},block]});return(0,decodeFunctionResult_js_1.decodeFunctionResult)({abi:abis_js_1.multicall3Abi,
args:[requests],functionName:"aggregate3",data:calldata||"0x"})}}));const [{returnData,success}]=await args$jscomp$0({data:data$jscomp$0,to});if(!success)throw new contract_js_2.RawContractError({data:returnData});return"0x"===returnData?{data:void 0}:{data:returnData}}function getRevertErrorData(err){if(err instanceof base_js_1.BaseError)return err=err.walk(),"object"===typeof err.data?err.data.data:err.data}Object.defineProperty(exports,"__esModule",{value:!0});exports.getRevertErrorData=exports.call=
void 0;const parseAccount_js_1=require("module$node_modules$viem$_cjs$accounts$utils$parseAccount"),abis_js_1=require("module$node_modules$viem$_cjs$constants$abis"),contract_js_1=require("module$node_modules$viem$_cjs$constants$contract"),base_js_1=require("module$node_modules$viem$_cjs$errors$base"),chain_js_1=require("module$node_modules$viem$_cjs$errors$chain"),contract_js_2=require("module$node_modules$viem$_cjs$errors$contract"),decodeFunctionResult_js_1=require("module$node_modules$viem$_cjs$utils$abi$decodeFunctionResult"),
encodeFunctionData_js_1=require("module$node_modules$viem$_cjs$utils$abi$encodeFunctionData"),chain_js_2=require("module$node_modules$viem$_cjs$utils$chain"),toHex_js_1=require("module$node_modules$viem$_cjs$utils$encoding$toHex"),getCallError_js_1=require("module$node_modules$viem$_cjs$utils$errors$getCallError"),extract_js_1=require("module$node_modules$viem$_cjs$utils$formatters$extract"),transactionRequest_js_1=require("module$node_modules$viem$_cjs$utils$formatters$transactionRequest"),createBatchScheduler_js_1=
require("module$node_modules$viem$_cjs$utils$promise$createBatchScheduler"),assertRequest_js_1=require("module$node_modules$viem$_cjs$utils$transaction$assertRequest");exports.call=async function(client,args){const {account:account_=client.account,batch=!!client.batch?.multicall,blockNumber,blockTag="latest",accessList,data,gas,gasPrice,maxFeePerGas,maxPriorityFeePerGas,nonce,to,value,...rest}=args,account=account_?(0,parseAccount_js_1.parseAccount)(account_):void 0;try{(0,assertRequest_js_1.assertRequest)(args);
var block=(blockNumber?(0,toHex_js_1.numberToHex)(blockNumber):void 0)||blockTag;const format=client.chain?.formatters?.transactionRequest?.format||transactionRequest_js_1.formatTransactionRequest,request=format({...(0,extract_js_1.extract)(rest,{format}),from:account?.address,accessList,data,gas,gasPrice,maxFeePerGas,maxPriorityFeePerGas,nonce,to,value});if(batch&&shouldPerformMulticall({request}))try{return await scheduleMulticall(client,{...request,blockNumber,blockTag})}catch(err){if(!(err instanceof
chain_js_1.ClientChainNotConfiguredError||err instanceof chain_js_1.ChainDoesNotSupportContract))throw err;}const response=await client.request({method:"eth_call",params:block?[request,block]:[request]});return"0x"===response?{data:void 0}:{data:response}}catch(err){block=getRevertErrorData(err);const {offchainLookup,offchainLookupSignature}=await Promise.resolve().then(()=>require("module$node_modules$viem$_cjs$utils$ccip"));if(block?.slice(0,10)===offchainLookupSignature&&to)return{data:await offchainLookup(client,
{data:block,to})};throw(0,getCallError_js_1.getCallError)(err,{...args,account,chain:client.chain});}};exports.getRevertErrorData=getRevertErrorData}
//# sourceMappingURL=module$node_modules$viem$_cjs$actions$public$call.js.map
