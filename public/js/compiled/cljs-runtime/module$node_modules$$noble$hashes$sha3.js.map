{
"version":3,
"file":"module$node_modules$$noble$hashes$sha3.js",
"lineCount":10,
"mappings":"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",
"sources":["node_modules/@noble/hashes/sha3.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$noble$hashes$sha3\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.shake256 = exports.shake128 = exports.keccak_512 = exports.keccak_384 = exports.keccak_256 = exports.keccak_224 = exports.sha3_512 = exports.sha3_384 = exports.sha3_256 = exports.sha3_224 = exports.Keccak = exports.keccakP = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst _u64_js_1 = require(\"./_u64.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.\n// It's called a sponge function.\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nconst _7n = /* @__PURE__ */ BigInt(7);\nconst _256n = /* @__PURE__ */ BigInt(256);\nconst _0x71n = /* @__PURE__ */ BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n    // Pi\n    [x, y] = [y, (2 * x + 3 * y) % 5];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n    // Iota\n    let t = _0n;\n    for (let j = 0; j < 7; j++) {\n        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n        if (R & _2n)\n            t ^= _1n << ((_1n << /* @__PURE__ */ BigInt(j)) - _1n);\n    }\n    _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ (0, _u64_js_1.split)(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s) => (s > 32 ? (0, _u64_js_1.rotlBH)(h, l, s) : (0, _u64_js_1.rotlSH)(h, l, s));\nconst rotlL = (h, l, s) => (s > 32 ? (0, _u64_js_1.rotlBL)(h, l, s) : (0, _u64_js_1.rotlSL)(h, l, s));\n// Same as keccakf1600, but allows to skip some rounds\nfunction keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for (let round = 24 - rounds; round < 24; round++) {\n        // Theta \u03b8\n        for (let x = 0; x < 10; x++)\n            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for (let x = 0; x < 10; x += 2) {\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for (let y = 0; y < 50; y += 10) {\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (\u03c1) and Pi (\u03c0)\n        let curH = s[2];\n        let curL = s[3];\n        for (let t = 0; t < 24; t++) {\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (\u03c7)\n        for (let y = 0; y < 50; y += 10) {\n            for (let x = 0; x < 10; x++)\n                B[x] = s[y + x];\n            for (let x = 0; x < 10; x++)\n                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (\u03b9)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n}\nexports.keccakP = keccakP;\nclass Keccak extends utils_js_1.Hash {\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n        super();\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        // Can be passed from user as dkLen\n        (0, _assert_js_1.number)(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        if (0 >= this.blockLen || this.blockLen >= 200)\n            throw new Error('Sha3 supports only keccak-f1600 function');\n        this.state = new Uint8Array(200);\n        this.state32 = (0, utils_js_1.u32)(this.state);\n    }\n    keccak() {\n        keccakP(this.state32, this.rounds);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        (0, _assert_js_1.exists)(this);\n        const { blockLen, state } = this;\n        data = (0, utils_js_1.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for (let i = 0; i < take; i++)\n                state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen)\n                this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished)\n            return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)\n            this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        (0, _assert_js_1.exists)(this, false);\n        (0, _assert_js_1.bytes)(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for (let pos = 0, len = out.length; pos < len;) {\n            if (this.posOut >= blockLen)\n                this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF)\n            throw new Error('XOF is not possible for this instance');\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        (0, _assert_js_1.number)(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        (0, _assert_js_1.output)(out, this);\n        if (this.finished)\n            throw new Error('digest() was already called');\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        this.state.fill(0);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n}\nexports.Keccak = Keccak;\nconst gen = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructor)(() => new Keccak(blockLen, suffix, outputLen));\nexports.sha3_224 = gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexports.sha3_256 = gen(0x06, 136, 256 / 8);\nexports.sha3_384 = gen(0x06, 104, 384 / 8);\nexports.sha3_512 = gen(0x06, 72, 512 / 8);\nexports.keccak_224 = gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexports.keccak_256 = gen(0x01, 136, 256 / 8);\nexports.keccak_384 = gen(0x01, 104, 384 / 8);\nexports.keccak_512 = gen(0x01, 72, 512 / 8);\nconst genShake = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapXOFConstructorWithOpts)((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\nexports.shake128 = genShake(0x1f, 168, 128 / 8);\nexports.shake256 = genShake(0x1f, 136, 256 / 8);\n//# sourceMappingURL=sha3.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","keccakP","s","rounds","B","Uint32Array","round","x","idx1","idx0","B0","B1","Th","rotlH","Tl","rotlL","y","curH","curL","t","shift","SHA3_ROTL","PI","SHA3_PI","SHA3_IOTA_H","SHA3_IOTA_L","fill","Object","defineProperty","value","shake256","shake128","keccak_512","keccak_384","keccak_256","keccak_224","sha3_512","sha3_384","sha3_256","sha3_224","Keccak","_assert_js_1","_u64_js_1","utils_js_1","_SHA3_IOTA","_0n","BigInt","_1n","_2n","_7n","_256n","_0x71n","R","push","j","split","h","l","rotlBH","rotlSH","rotlBL","rotlSL","Hash","constructor","blockLen","suffix","outputLen","enableXOF","posOut","pos","destroyed","finished","number","Error","state","Uint8Array","state32","u32","keccak","update","data","exists","toBytes","len","length","take","Math","min","i","finish","writeInto","out","bytes","bufferOut","set","subarray","xofInto","xof","digestInto","output","destroy","digest","_cloneInto","to","gen","wrapConstructor","genShake","wrapXOFConstructorWithOpts","opts","undefined","dkLen"]
}
