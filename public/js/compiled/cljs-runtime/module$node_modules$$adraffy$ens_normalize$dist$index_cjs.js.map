{
"version":3,
"file":"module$node_modules$$adraffy$ens_normalize$dist$index_cjs.js",
"lineCount":33,
"mappings":"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",
"sources":["node_modules/@adraffy/ens-normalize/dist/index.cjs"],
"sourcesContent":["shadow$provide[\"module$node_modules$$adraffy$ens_normalize$dist$index_cjs\"] = function(global,require,module,exports) {\n'use strict';\n\nfunction decode_arithmetic(bytes) {\r\n\tlet pos = 0;\r\n\tfunction u16() { return (bytes[pos++] << 8) | bytes[pos++]; }\r\n\t\r\n\t// decode the frequency table\r\n\tlet symbol_count = u16();\r\n\tlet total = 1;\r\n\tlet acc = [0, 1]; // first symbol has frequency 1\r\n\tfor (let i = 1; i < symbol_count; i++) {\r\n\t\tacc.push(total += u16());\r\n\t}\r\n\r\n\t// skip the sized-payload that the last 3 symbols index into\r\n\tlet skip = u16();\r\n\tlet pos_payload = pos;\r\n\tpos += skip;\r\n\r\n\tlet read_width = 0;\r\n\tlet read_buffer = 0; \r\n\tfunction read_bit() {\r\n\t\tif (read_width == 0) {\r\n\t\t\t// this will read beyond end of buffer\r\n\t\t\t// but (undefined|0) => zero pad\r\n\t\t\tread_buffer = (read_buffer << 8) | bytes[pos++];\r\n\t\t\tread_width = 8;\r\n\t\t}\r\n\t\treturn (read_buffer >> --read_width) & 1;\r\n\t}\r\n\r\n\tconst N = 31;\r\n\tconst FULL = 2**N;\r\n\tconst HALF = FULL >>> 1;\r\n\tconst QRTR = HALF >> 1;\r\n\tconst MASK = FULL - 1;\r\n\r\n\t// fill register\r\n\tlet register = 0;\r\n\tfor (let i = 0; i < N; i++) register = (register << 1) | read_bit();\r\n\r\n\tlet symbols = [];\r\n\tlet low = 0;\r\n\tlet range = FULL; // treat like a float\r\n\twhile (true) {\r\n\t\tlet value = Math.floor((((register - low + 1) * total) - 1) / range);\r\n\t\tlet start = 0;\r\n\t\tlet end = symbol_count;\r\n\t\twhile (end - start > 1) { // binary search\r\n\t\t\tlet mid = (start + end) >>> 1;\r\n\t\t\tif (value < acc[mid]) {\r\n\t\t\t\tend = mid;\r\n\t\t\t} else {\r\n\t\t\t\tstart = mid;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (start == 0) break; // first symbol is end mark\r\n\t\tsymbols.push(start);\r\n\t\tlet a = low + Math.floor(range * acc[start]   / total);\r\n\t\tlet b = low + Math.floor(range * acc[start+1] / total) - 1;\r\n\t\twhile (((a ^ b) & HALF) == 0) {\r\n\t\t\tregister = (register << 1) & MASK | read_bit();\r\n\t\t\ta = (a << 1) & MASK;\r\n\t\t\tb = (b << 1) & MASK | 1;\r\n\t\t}\r\n\t\twhile (a & ~b & QRTR) {\r\n\t\t\tregister = (register & HALF) | ((register << 1) & (MASK >>> 1)) | read_bit();\r\n\t\t\ta = (a << 1) ^ HALF;\r\n\t\t\tb = ((b ^ HALF) << 1) | HALF | 1;\r\n\t\t}\r\n\t\tlow = a;\r\n\t\trange = 1 + b - a;\r\n\t}\r\n\tlet offset = symbol_count - 4;\r\n\treturn symbols.map(x => { // index into payload\r\n\t\tswitch (x - offset) {\r\n\t\t\tcase 3: return offset + 0x10100 + ((bytes[pos_payload++] << 16) | (bytes[pos_payload++] << 8) | bytes[pos_payload++]);\r\n\t\t\tcase 2: return offset + 0x100 + ((bytes[pos_payload++] << 8) | bytes[pos_payload++]);\r\n\t\t\tcase 1: return offset + bytes[pos_payload++];\r\n\t\t\tdefault: return x - 1;\r\n\t\t}\r\n\t});\r\n}\t\r\n\r\n// returns an iterator which returns the next symbol\r\nfunction read_payload(v) {\r\n\tlet pos = 0;\r\n\treturn () => v[pos++];\r\n}\r\nfunction read_compressed_payload(s) {\r\n\treturn read_payload(decode_arithmetic(unsafe_atob(s)));\r\n}\r\n\r\n// unsafe in the sense:\r\n// expected well-formed Base64 w/o padding \r\n// 20220922: added for https://github.com/adraffy/ens-normalize.js/issues/4\r\nfunction unsafe_atob(s) {\r\n\tlet lookup = [];\r\n\t[...'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'].forEach((c, i) => lookup[c.charCodeAt(0)] = i);\r\n\tlet n = s.length;\r\n\tlet ret = new Uint8Array((6 * n) >> 3);\r\n\tfor (let i = 0, pos = 0, width = 0, carry = 0; i < n; i++) {\r\n\t\tcarry = (carry << 6) | lookup[s.charCodeAt(i)];\r\n\t\twidth += 6;\r\n\t\tif (width >= 8) {\r\n\t\t\tret[pos++] = (carry >> (width -= 8));\r\n\t\t}\r\n\t}\r\n\treturn ret;\r\n}\r\n\r\n// eg. [0,1,2,3...] => [0,-1,1,-2,...]\r\nfunction signed(i) { \r\n\treturn (i & 1) ? (~i >> 1) : (i >> 1);\r\n}\r\n\r\nfunction read_deltas(n, next) {\r\n\tlet v = Array(n);\r\n\tfor (let i = 0, x = 0; i < n; i++) v[i] = x += signed(next());\r\n\treturn v;\r\n}\r\n\r\n// [123][5] => [0 3] [1 1] [0 0]\r\nfunction read_sorted(next, prev = 0) {\r\n\tlet ret = [];\r\n\twhile (true) {\r\n\t\tlet x = next();\r\n\t\tlet n = next();\r\n\t\tif (!n) break;\r\n\t\tprev += x;\r\n\t\tfor (let i = 0; i < n; i++) {\r\n\t\t\tret.push(prev + i);\r\n\t\t}\r\n\t\tprev += n + 1;\r\n\t}\r\n\treturn ret;\r\n}\r\n\r\nfunction read_sorted_arrays(next) {\r\n\treturn read_array_while(() => { \r\n\t\tlet v = read_sorted(next);\r\n\t\tif (v.length) return v;\r\n\t});\r\n}\r\n\r\n// returns map of x => ys\r\nfunction read_mapped(next) {\r\n\tlet ret = [];\r\n\twhile (true) {\r\n\t\tlet w = next();\r\n\t\tif (w == 0) break;\r\n\t\tret.push(read_linear_table(w, next));\r\n\t}\r\n\twhile (true) {\r\n\t\tlet w = next() - 1;\r\n\t\tif (w < 0) break;\r\n\t\tret.push(read_replacement_table(w, next));\r\n\t}\r\n\treturn ret.flat();\r\n}\r\n\r\n// read until next is falsy\r\n// return array of read values\r\nfunction read_array_while(next) {\r\n\tlet v = [];\r\n\twhile (true) {\r\n\t\tlet x = next(v.length);\r\n\t\tif (!x) break;\r\n\t\tv.push(x);\r\n\t}\r\n\treturn v;\r\n}\r\n\r\n// read w columns of length n\r\n// return as n rows of length w\r\nfunction read_transposed(n, w, next) {\r\n\tlet m = Array(n).fill().map(() => []);\r\n\tfor (let i = 0; i < w; i++) {\r\n\t\tread_deltas(n, next).forEach((x, j) => m[j].push(x));\r\n\t}\r\n\treturn m;\r\n}\r\n \r\n// returns [[x, ys], [x+dx, ys+dy], [x+2*dx, ys+2*dy], ...]\r\n// where dx/dy = steps, n = run size, w = length of y\r\nfunction read_linear_table(w, next) {\r\n\tlet dx = 1 + next();\r\n\tlet dy = next();\r\n\tlet vN = read_array_while(next);\r\n\tlet m = read_transposed(vN.length, 1+w, next);\r\n\treturn m.flatMap((v, i) => {\r\n\t\tlet [x, ...ys] = v;\r\n\t\treturn Array(vN[i]).fill().map((_, j) => {\r\n\t\t\tlet j_dy = j * dy;\r\n\t\t\treturn [x + j * dx, ys.map(y => y + j_dy)];\r\n\t\t});\r\n\t});\r\n}\r\n\r\n// return [[x, ys...], ...]\r\n// where w = length of y\r\nfunction read_replacement_table(w, next) { \r\n\tlet n = 1 + next();\r\n\tlet m = read_transposed(n, 1+w, next);\r\n\treturn m.map(v => [v[0], v.slice(1)]);\r\n}\r\n\r\n\r\nfunction read_trie(next) {\r\n\tlet ret = [];\r\n\tlet sorted = read_sorted(next); \r\n\texpand(decode([]), []);\r\n\treturn ret; // not sorted\r\n\tfunction decode(Q) { // characters that lead into this node\r\n\t\tlet S = next(); // state: valid, save, check\r\n\t\tlet B = read_array_while(() => { // buckets leading to new nodes\r\n\t\t\tlet cps = read_sorted(next).map(i => sorted[i]);\r\n\t\t\tif (cps.length) return decode(cps);\r\n\t\t});\r\n\t\treturn {S, B, Q};\r\n\t}\r\n\tfunction expand({S, B}, cps, saved) {\r\n\t\tif (S & 4 && saved === cps[cps.length-1]) return;\r\n\t\tif (S & 2) saved = cps[cps.length-1];\r\n\t\tif (S & 1) ret.push(cps); \r\n\t\tfor (let br of B) {\r\n\t\t\tfor (let cp of br.Q) {\r\n\t\t\t\texpand(br, [...cps, cp], saved);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\n\n// created 2023-07-20T07:23:23.727Z\n// compressed base64-encoded blob for include-ens data\n// source: https://github.com/adraffy/ens-normalize.js/blob/main/src/make.js\n// see: https://github.com/adraffy/ens-normalize.js#security\n// SHA-256: 4aab629147f0d7e715ffac2cd3e2fcd0e6922ee059b78d717c265540d3bf5768\nvar r$1 = read_compressed_payload('');\nconst FENCED = new Map([[8217,\"apostrophe\"],[8260,\"fraction slash\"],[12539,\"middle dot\"]]);\nconst NSM_MAX = 4;\n\nfunction hex_cp(cp) {\r\n\treturn cp.toString(16).toUpperCase().padStart(2, '0');\r\n}\r\n\r\nfunction quote_cp(cp) {\r\n\treturn `{${hex_cp(cp)}}`; // raffy convention: like \"\\u{X}\" w/o the \"\\u\"\r\n}\r\n\r\n/*\r\nexport function explode_cp(s) {\r\n\treturn [...s].map(c => c.codePointAt(0));\r\n}\r\n*/\r\nfunction explode_cp(s) { // this is about 2x faster\r\n\tlet cps = [];\r\n\tfor (let pos = 0, len = s.length; pos < len; ) {\r\n\t\tlet cp = s.codePointAt(pos);\r\n\t\tpos += cp < 0x10000 ? 1 : 2;\r\n\t\tcps.push(cp);\r\n\t}\r\n\treturn cps;\r\n}\r\n\r\nfunction str_from_cps(cps) {\r\n\tconst chunk = 4096;\r\n\tlet len = cps.length;\r\n\tif (len < chunk) return String.fromCodePoint(...cps);\r\n\tlet buf = [];\r\n\tfor (let i = 0; i < len; ) {\r\n\t\tbuf.push(String.fromCodePoint(...cps.slice(i, i += chunk)));\r\n\t}\r\n\treturn buf.join('');\r\n}\r\n\r\nfunction compare_arrays(a, b) {\r\n\tlet n = a.length;\r\n\tlet c = n - b.length;\r\n\tfor (let i = 0; c == 0 && i < n; i++) c = a[i] - b[i];\r\n\treturn c;\r\n}\n\n// created 2023-07-20T07:23:23.727Z\n// compressed base64-encoded blob for include-nf data\n// source: https://github.com/adraffy/ens-normalize.js/blob/main/src/make.js\n// see: https://github.com/adraffy/ens-normalize.js#security\n// SHA-256: a974b6f8541fc29d919bc85118af0a44015851fab5343f8679cb31be2bdb209e\nvar r = read_compressed_payload('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');\n\n// https://unicode.org/reports/tr15/\r\n// for reference implementation\r\n// see: /derive/nf.js\r\n\r\n\r\nfunction unpack_cc(packed) {\r\n\treturn (packed >> 24) & 0xFF;\r\n}\r\nfunction unpack_cp(packed) {\r\n\treturn packed & 0xFFFFFF;\r\n}\r\n\r\nconst SHIFTED_RANK = new Map(read_sorted_arrays(r).flatMap((v, i) => v.map(x => [x, (i+1) << 24]))); // pre-shifted\r\nconst EXCLUSIONS = new Set(read_sorted(r));\r\nconst DECOMP = new Map();\r\nconst RECOMP = new Map();\r\nfor (let [cp, cps] of read_mapped(r)) {\r\n\tif (!EXCLUSIONS.has(cp) && cps.length == 2) {\r\n\t\tlet [a, b] = cps;\r\n\t\tlet bucket = RECOMP.get(a);\r\n\t\tif (!bucket) {\r\n\t\t\tbucket = new Map();\r\n\t\t\tRECOMP.set(a, bucket);\r\n\t\t}\r\n\t\tbucket.set(b, cp);\r\n\t}\r\n\tDECOMP.set(cp, cps.reverse()); // stored reversed\r\n}\r\n\r\n// algorithmic hangul\r\n// https://www.unicode.org/versions/Unicode15.0.0/ch03.pdf (page 144)\r\nconst S0 = 0xAC00;\r\nconst L0 = 0x1100;\r\nconst V0 = 0x1161;\r\nconst T0 = 0x11A7;\r\nconst L_COUNT = 19;\r\nconst V_COUNT = 21;\r\nconst T_COUNT = 28;\r\nconst N_COUNT = V_COUNT * T_COUNT;\r\nconst S_COUNT = L_COUNT * N_COUNT;\r\nconst S1 = S0 + S_COUNT;\r\nconst L1 = L0 + L_COUNT;\r\nconst V1 = V0 + V_COUNT;\r\nconst T1 = T0 + T_COUNT;\r\n\r\nfunction is_hangul(cp) {\r\n\treturn cp >= S0 && cp < S1;\r\n}\r\n\r\nfunction compose_pair(a, b) {\r\n\tif (a >= L0 && a < L1 && b >= V0 && b < V1) {\r\n\t\treturn S0 + (a - L0) * N_COUNT + (b - V0) * T_COUNT;\r\n\t} else if (is_hangul(a) && b > T0 && b < T1 && (a - S0) % T_COUNT == 0) {\r\n\t\treturn a + (b - T0);\r\n\t} else {\r\n\t\tlet recomp = RECOMP.get(a);\r\n\t\tif (recomp) {\r\n\t\t\trecomp = recomp.get(b);\r\n\t\t\tif (recomp) {\r\n\t\t\t\treturn recomp;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn -1;\r\n\t}\r\n}\r\n\r\nfunction decomposed(cps) {\r\n\tlet ret = [];\r\n\tlet buf = [];\r\n\tlet check_order = false;\r\n\tfunction add(cp) {\r\n\t\tlet cc = SHIFTED_RANK.get(cp);\r\n\t\tif (cc) {\r\n\t\t\tcheck_order = true;\r\n\t\t\tcp |= cc;\r\n\t\t}\r\n\t\tret.push(cp);\r\n\t}\r\n\tfor (let cp of cps) {\r\n\t\twhile (true) {\r\n\t\t\tif (cp < 0x80) {\r\n\t\t\t\tret.push(cp);\r\n\t\t\t} else if (is_hangul(cp)) {\r\n\t\t\t\tlet s_index = cp - S0;\r\n\t\t\t\tlet l_index = s_index / N_COUNT | 0;\r\n\t\t\t\tlet v_index = (s_index % N_COUNT) / T_COUNT | 0;\r\n\t\t\t\tlet t_index = s_index % T_COUNT;\r\n\t\t\t\tadd(L0 + l_index);\r\n\t\t\t\tadd(V0 + v_index);\r\n\t\t\t\tif (t_index > 0) add(T0 + t_index);\r\n\t\t\t} else {\r\n\t\t\t\tlet mapped = DECOMP.get(cp);\r\n\t\t\t\tif (mapped) {\r\n\t\t\t\t\tbuf.push(...mapped);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tadd(cp);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!buf.length) break;\r\n\t\t\tcp = buf.pop();\r\n\t\t}\r\n\t}\r\n\tif (check_order && ret.length > 1) {\r\n\t\tlet prev_cc = unpack_cc(ret[0]);\r\n\t\tfor (let i = 1; i < ret.length; i++) {\r\n\t\t\tlet cc = unpack_cc(ret[i]);\r\n\t\t\tif (cc == 0 || prev_cc <= cc) {\r\n\t\t\t\tprev_cc = cc;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tlet j = i-1;\r\n\t\t\twhile (true) {\r\n\t\t\t\tlet tmp = ret[j+1];\r\n\t\t\t\tret[j+1] = ret[j];\r\n\t\t\t\tret[j] = tmp;\r\n\t\t\t\tif (!j) break;\r\n\t\t\t\tprev_cc = unpack_cc(ret[--j]);\r\n\t\t\t\tif (prev_cc <= cc) break;\r\n\t\t\t}\r\n\t\t\tprev_cc = unpack_cc(ret[i]);\r\n\t\t}\r\n\t}\r\n\treturn ret;\r\n}\r\n\r\nfunction composed_from_decomposed(v) {\r\n\tlet ret = [];\r\n\tlet stack = [];\r\n\tlet prev_cp = -1;\r\n\tlet prev_cc = 0;\r\n\tfor (let packed of v) {\r\n\t\tlet cc = unpack_cc(packed);\r\n\t\tlet cp = unpack_cp(packed);\r\n\t\tif (prev_cp == -1) {\r\n\t\t\tif (cc == 0) {\r\n\t\t\t\tprev_cp = cp;\r\n\t\t\t} else {\r\n\t\t\t\tret.push(cp);\r\n\t\t\t}\r\n\t\t} else if (prev_cc > 0 && prev_cc >= cc) {\r\n\t\t\tif (cc == 0) {\r\n\t\t\t\tret.push(prev_cp, ...stack);\r\n\t\t\t\tstack.length = 0;\r\n\t\t\t\tprev_cp = cp;\r\n\t\t\t} else {\r\n\t\t\t\tstack.push(cp);\r\n\t\t\t}\r\n\t\t\tprev_cc = cc;\r\n\t\t} else {\r\n\t\t\tlet composed = compose_pair(prev_cp, cp);\r\n\t\t\tif (composed >= 0) {\r\n\t\t\t\tprev_cp = composed;\r\n\t\t\t} else if (prev_cc == 0 && cc == 0) {\r\n\t\t\t\tret.push(prev_cp);\r\n\t\t\t\tprev_cp = cp;\r\n\t\t\t} else {\r\n\t\t\t\tstack.push(cp);\r\n\t\t\t\tprev_cc = cc;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (prev_cp >= 0) {\r\n\t\tret.push(prev_cp, ...stack);\t\r\n\t}\r\n\treturn ret;\r\n}\r\n\r\n// note: cps can be iterable\r\nfunction nfd(cps) {\r\n\treturn decomposed(cps).map(unpack_cp);\r\n}\r\nfunction nfc(cps) {\r\n\treturn composed_from_decomposed(decomposed(cps));\r\n}\n\n//console.time('init');\r\n\r\nconst STOP = 0x2E;\r\nconst FE0F = 0xFE0F;\r\nconst STOP_CH = '.';\r\nconst UNIQUE_PH = 1;\r\nconst HYPHEN = 0x2D;\r\n\r\nfunction read_set() {\r\n\treturn new Set(read_sorted(r$1));\r\n}\r\nconst MAPPED = new Map(read_mapped(r$1)); \r\nconst IGNORED = read_set(); // ignored characters are not valid, so just read raw codepoints\r\n/*\r\n// direct include from payload is smaller that the decompression code\r\nconst FENCED = new Map(read_array_while(() => {\r\n\tlet cp = r();\r\n\tif (cp) return [cp, read_str(r())];\r\n}));\r\n*/\r\n// 20230217: we still need all CM for proper error formatting\r\n// but norm only needs NSM subset that are potentially-valid\r\nconst CM = read_set();\r\nconst NSM = new Set(read_sorted(r$1).map(function(i) { return this[i]; }, [...CM]));\r\n/*\r\nconst CM_SORTED = read_sorted(r);\r\nconst NSM = new Set(read_sorted(r).map(i => CM_SORTED[i]));\r\nconst CM = new Set(CM_SORTED);\r\n*/\r\nconst ESCAPE = read_set(); // characters that should not be printed\r\nconst NFC_CHECK = read_set();\r\nconst CHUNKS = read_sorted_arrays(r$1);\r\nfunction read_chunked() {\r\n\t// deduplicated sets + uniques\r\n\treturn new Set([read_sorted(r$1).map(i => CHUNKS[i]), read_sorted(r$1)].flat(2));\r\n}\r\nconst UNRESTRICTED = r$1();\r\nconst GROUPS = read_array_while(i => {\r\n\t// minifier property mangling seems unsafe\r\n\t// so these are manually renamed to single chars\r\n\tlet N = read_array_while(r$1).map(x => x+0x60);\r\n\tif (N.length) {\r\n\t\tlet R = i >= UNRESTRICTED; // first arent restricted\r\n\t\tN[0] -= 32; // capitalize\r\n\t\tN = str_from_cps(N);\r\n\t\tif (R) N=`Restricted[${N}]`;\r\n\t\tlet P = read_chunked(); // primary\r\n\t\tlet Q = read_chunked(); // secondary\r\n\t\tlet V = [...P, ...Q].sort((a, b) => a-b); // derive: sorted valid\r\n\t\t//let M = r()-1; // combining mark\r\n\t\tlet M = !r$1(); // not-whitelisted, check for NSM\r\n\t\t// code currently isn't needed\r\n\t\t/*if (M < 0) { // whitelisted\r\n\t\t\tM = new Map(read_array_while(() => {\r\n\t\t\t\tlet i = r();\r\n\t\t\t\tif (i) return [V[i-1], read_array_while(() => {\r\n\t\t\t\t\tlet v = read_array_while(r);\r\n\t\t\t\t\tif (v.length) return v.map(x => x-1);\r\n\t\t\t\t})];\r\n\t\t\t}));\r\n\t\t}*/\r\n\t\treturn {N, P, M, R, V: new Set(V)};\r\n\t}\r\n});\r\nconst WHOLE_VALID = read_set();\r\nconst WHOLE_MAP = new Map();\r\n// decode compressed wholes\r\n[...WHOLE_VALID, ...read_set()].sort((a, b) => a-b).map((cp, i, v) => {\r\n\tlet d = r$1(); \r\n\tlet w = v[i] = d ? v[i-d] : {V: [], M: new Map()};\r\n\tw.V.push(cp); // add to member set\r\n\tif (!WHOLE_VALID.has(cp)) {\r\n\t\tWHOLE_MAP.set(cp, w);  // register with whole map\r\n\t}\r\n});\r\n// compute confusable-extent complements\r\nfor (let {V, M} of new Set(WHOLE_MAP.values())) {\r\n\t// connect all groups that have each whole character\r\n\tlet recs = [];\r\n\tfor (let cp of V) {\r\n\t\tlet gs = GROUPS.filter(g => g.V.has(cp));\r\n\t\tlet rec = recs.find(({G}) => gs.some(g => G.has(g)));\r\n\t\tif (!rec) {\r\n\t\t\trec = {G: new Set(), V: []};\r\n\t\t\trecs.push(rec);\r\n\t\t}\r\n\t\trec.V.push(cp);\r\n\t\tgs.forEach(g => rec.G.add(g));\r\n\t}\r\n\t// per character cache groups which are not a member of the extent\r\n\tlet union = recs.flatMap(({G}) => [...G]);\r\n\tfor (let {G, V} of recs) {\r\n\t\tlet complement = new Set(union.filter(g => !G.has(g)));\r\n\t\tfor (let cp of V) {\r\n\t\t\tM.set(cp, complement);\r\n\t\t}\r\n\t}\r\n}\r\nlet union = new Set(); // exists in 1+ groups\r\nlet multi = new Set(); // exists in 2+ groups\r\nfor (let g of GROUPS) {\r\n\tfor (let cp of g.V) {\r\n\t\t(union.has(cp) ? multi : union).add(cp);\r\n\t}\r\n}\r\n// dual purpose WHOLE_MAP: return placeholder if unique non-confusable\r\nfor (let cp of union) {\r\n\tif (!WHOLE_MAP.has(cp) && !multi.has(cp)) {\r\n\t\tWHOLE_MAP.set(cp, UNIQUE_PH);\r\n\t}\r\n}\r\nconst VALID = new Set([...union, ...nfd(union)]); // possibly valid\r\n\r\n// decode emoji\r\nclass Emoji extends Array {\r\n\tget is_emoji() { return true; } // free tagging system\r\n}\r\n// 20230719: emoji are now fully-expanded to avoid quirk logic \r\nconst EMOJI_LIST = read_trie(r$1).map(v => Emoji.from(v)).sort(compare_arrays);\r\nconst EMOJI_ROOT = new Map(); // this has approx 7K nodes (2+ per emoji)\r\nfor (let cps of EMOJI_LIST) {\r\n\t// 20230719: change to *slightly* stricter algorithm which disallows \r\n\t// insertion of misplaced FE0F in emoji sequences (matching ENSIP-15)\r\n\t// example: beautified [A B] (eg. flag emoji) \r\n\t//  before: allow: [A FE0F B], error: [A FE0F FE0F B] \r\n\t//   after: error: both\r\n\t// note: this code now matches ENSNormalize.{cs,java} logic\r\n\tlet prev = [EMOJI_ROOT];\r\n\tfor (let cp of cps) {\r\n\t\tlet next = prev.map(node => {\r\n\t\t\tlet child = node.get(cp);\r\n\t\t\tif (!child) {\r\n\t\t\t\t// should this be object? \r\n\t\t\t\t// (most have 1-2 items, few have many)\r\n\t\t\t\t// 20230719: no, v8 default map is 4?\r\n\t\t\t\tchild = new Map();\r\n\t\t\t\tnode.set(cp, child);\r\n\t\t\t}\r\n\t\t\treturn child;\r\n\t\t});\r\n\t\tif (cp === FE0F) {\r\n\t\t\tprev.push(...next);\r\n\t\t} else {\r\n\t\t\tprev = next;\r\n\t\t}\r\n\t}\r\n\tfor (let x of prev) {\r\n\t\tx.V = cps;\r\n\t}\r\n}\r\n//console.timeEnd('init');\r\n\r\n// create a safe to print string \r\n// invisibles are escaped\r\n// leading cm uses placeholder\r\n// quoter(cp) => string, eg. 3000 => \"{3000}\"\r\n// note: in html, you'd call this function then replace [<>&] with entities\r\nfunction safe_str_from_cps(cps, quoter = quote_cp) {\r\n\t//if (Number.isInteger(cps)) cps = [cps];\r\n\t//if (!Array.isArray(cps)) throw new TypeError(`expected codepoints`);\r\n\tlet buf = [];\r\n\tif (is_combining_mark(cps[0])) buf.push('\u25cc');\r\n\tlet prev = 0;\r\n\tlet n = cps.length;\r\n\tfor (let i = 0; i < n; i++) {\r\n\t\tlet cp = cps[i];\r\n\t\tif (should_escape(cp)) {\r\n\t\t\tbuf.push(str_from_cps(cps.slice(prev, i)));\r\n\t\t\tbuf.push(quoter(cp));\r\n\t\t\tprev = i + 1;\r\n\t\t}\r\n\t}\r\n\tbuf.push(str_from_cps(cps.slice(prev, n)));\r\n\treturn buf.join('');\r\n}\r\n\r\n// if escaped: {HEX}\r\n//       else: \"x\" {HEX}\r\nfunction quoted_cp(cp) {\r\n\treturn (should_escape(cp) ? '' : `${bidi_qq(safe_str_from_cps([cp]))} `) + quote_cp(cp);\r\n}\r\n\r\n// 20230211: some messages can be mixed-directional and result in spillover\r\n// use 200E after a quoted string to force the remainder of a string from \r\n// acquring the direction of the quote\r\n// https://www.w3.org/International/questions/qa-bidi-unicode-controls#exceptions\r\nfunction bidi_qq(s) {\r\n\treturn `\"${s}\"\\u200E`; // strong LTR\r\n}\r\n\r\nfunction check_label_extension(cps) {\r\n\tif (cps.length >= 4 && cps[2] == HYPHEN && cps[3] == HYPHEN) {\r\n\t\tthrow new Error(`invalid label extension: \"${str_from_cps(cps.slice(0, 4))}\"`);\r\n\t}\r\n}\r\nfunction check_leading_underscore(cps) {\r\n\tconst UNDERSCORE = 0x5F;\r\n\tfor (let i = cps.lastIndexOf(UNDERSCORE); i > 0; ) {\r\n\t\tif (cps[--i] !== UNDERSCORE) {\r\n\t\t\tthrow new Error('underscore allowed only at start');\r\n\t\t}\r\n\t}\r\n}\r\n// check that a fenced cp is not leading, trailing, or touching another fenced cp\r\nfunction check_fenced(cps) {\r\n\tlet cp = cps[0];\r\n\tlet prev = FENCED.get(cp);\r\n\tif (prev) throw error_placement(`leading ${prev}`);\r\n\tlet n = cps.length;\r\n\tlet last = -1; // prevents trailing from throwing\r\n\tfor (let i = 1; i < n; i++) {\r\n\t\tcp = cps[i];\r\n\t\tlet match = FENCED.get(cp);\r\n\t\tif (match) {\r\n\t\t\t// since cps[0] isn't fenced, cps[1] cannot throw\r\n\t\t\tif (last == i) throw error_placement(`${prev} + ${match}`);\r\n\t\t\tlast = i + 1;\r\n\t\t\tprev = match;\r\n\t\t}\r\n\t}\r\n\tif (last == n) throw error_placement(`trailing ${prev}`);\r\n}\r\n\r\n// note: set(s) cannot be exposed because they can be modified\r\nfunction is_combining_mark(cp) {\r\n\treturn CM.has(cp);\r\n}\r\nfunction should_escape(cp) {\r\n\treturn ESCAPE.has(cp);\r\n}\r\n\r\n// return all supported emoji as fully-qualified emoji \r\n// ordered by length then lexicographic \r\nfunction ens_emoji() {\r\n\treturn EMOJI_LIST.map(x => x.slice()); // emoji are exposed so copy\r\n}\r\n\r\nfunction ens_normalize_fragment(frag, decompose) {\r\n\tlet nf = decompose ? nfd : nfc;\r\n\treturn frag.split(STOP_CH).map(label => str_from_cps(process(explode_cp(label), nf, filter_fe0f).flat())).join(STOP_CH);\r\n}\r\n\r\nfunction ens_normalize(name) {\r\n\treturn flatten(split(name, nfc, filter_fe0f));\r\n}\r\n\r\nfunction ens_beautify(name) {\r\n\tlet labels = split(name, nfc, x => x); // emoji not exposed\r\n\tfor (let {type, output, error} of labels) {\r\n\t\tif (error) break; // flatten will throw\r\n\r\n\t\t// replace leading/trailing hyphen\r\n\t\t// 20230121: consider beautifing all or leading/trailing hyphen to unicode variant\r\n\t\t// not exactly the same in every font, but very similar: \"-\" vs \"\u2010\"\r\n\t\t/*\r\n\t\tconst UNICODE_HYPHEN = 0x2010;\r\n\t\t// maybe this should replace all for visual consistancy?\r\n\t\t// `node tools/reg-count.js regex ^-\\{2,\\}` => 592\r\n\t\t//for (let i = 0; i < output.length; i++) if (output[i] == 0x2D) output[i] = 0x2010;\r\n\t\tif (output[0] == HYPHEN) output[0] = UNICODE_HYPHEN;\r\n\t\tlet end = output.length-1;\r\n\t\tif (output[end] == HYPHEN) output[end] = UNICODE_HYPHEN;\r\n\t\t*/\r\n\t\t// 20230123: WHATWG URL uses \"CheckHyphens\" false\r\n\t\t// https://url.spec.whatwg.org/#idna\r\n\r\n\t\t// update ethereum symbol\r\n\t\t// \u03be => \u039e if not greek\r\n\t\tif (type !== 'Greek') { \r\n\t\t\tlet prev = 0;\r\n\t\t\twhile (true) {\r\n\t\t\t\tlet next = output.indexOf(0x3BE, prev);\r\n\t\t\t\tif (next < 0) break;\r\n\t\t\t\toutput[next] = 0x39E; \r\n\t\t\t\tprev = next + 1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 20221213: fixes bidi subdomain issue, but breaks invariant (200E is disallowed)\r\n\t\t// could be fixed with special case for: 2D (.) + 200E (LTR)\r\n\t\t//output.splice(0, 0, 0x200E);\r\n\t}\r\n\treturn flatten(labels);\r\n}\r\n\r\nfunction ens_split(name, preserve_emoji) {\r\n\treturn split(name, nfc, preserve_emoji ? x => x.slice() : filter_fe0f); // emoji are exposed so copy\r\n}\r\n\r\nfunction split(name, nf, ef) {\r\n\tif (!name) return []; // 20230719: empty name allowance\r\n\tlet offset = 0;\r\n\t// https://unicode.org/reports/tr46/#Validity_Criteria\r\n\t// 4.) \"The label must not contain a U+002E ( . ) FULL STOP.\"\r\n\treturn name.split(STOP_CH).map(label => {\r\n\t\tlet input = explode_cp(label);\r\n\t\tlet info = {\r\n\t\t\tinput,\r\n\t\t\toffset, // codepoint, not substring!\r\n\t\t};\r\n\t\toffset += input.length + 1; // + stop\r\n\t\tlet norm;\r\n\t\ttry {\r\n\t\t\t// 1.) \"The label must be in Unicode Normalization Form NFC\"\r\n\t\t\tlet tokens = info.tokens = process(input, nf, ef); // if we parse, we get [norm and mapped]\r\n\t\t\tlet token_count = tokens.length;\r\n\t\t\tlet type;\r\n\t\t\tif (!token_count) { // the label was effectively empty (could of had ignored characters)\r\n\t\t\t\t// 20230120: change to strict\r\n\t\t\t\t// https://discuss.ens.domains/t/ens-name-normalization-2nd/14564/59\r\n\t\t\t\t//norm = [];\r\n\t\t\t\t//type = 'None'; // use this instead of next match, \"ASCII\"\r\n\t\t\t\tthrow new Error(`empty label`);\r\n\t\t\t} else {\r\n\t\t\t\tnorm = tokens.flat();\r\n\t\t\t\tcheck_leading_underscore(norm);\r\n\t\t\t\tlet emoji = info.emoji = token_count > 1 || tokens[0].is_emoji;\r\n\t\t\t\tif (!emoji && norm.every(cp => cp < 0x80)) { // special case for ascii\r\n\t\t\t\t\t// only needed for ascii\r\n\t\t\t\t\t// 20230123: matches matches WHATWG, see note 3.3\r\n\t\t\t\t\tcheck_label_extension(norm);\r\n\t\t\t\t\t// cant have fenced\r\n\t\t\t\t\t// cant have cm\r\n\t\t\t\t\t// cant have wholes\r\n\t\t\t\t\t// see derive: \"Fastpath ASCII\"\r\n\t\t\t\t\ttype = 'ASCII';\r\n\t\t\t\t} else {\r\n\t\t\t\t\tlet chars = tokens.flatMap(x => x.is_emoji ? [] : x); // all of the nfc tokens concat together\r\n\t\t\t\t\tif (!chars.length) { // theres no text, just emoji\r\n\t\t\t\t\t\ttype = 'Emoji';\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// 5. \"The label must not begin with a combining mark, that is: General_Category=Mark.\"\r\n\t\t\t\t\t\tif (CM.has(norm[0])) throw error_placement('leading combining mark');\r\n\t\t\t\t\t\tfor (let i = 1; i < token_count; i++) { // we've already checked the first token\r\n\t\t\t\t\t\t\tlet cps = tokens[i];\r\n\t\t\t\t\t\t\tif (!cps.is_emoji && CM.has(cps[0])) { // every text token has emoji neighbors, eg. EtEEEtEt...\r\n\t\t\t\t\t\t\t\t// bidi_qq() not needed since emoji is LTR and cps is a CM\r\n\t\t\t\t\t\t\t\tthrow error_placement(`emoji + combining mark: \"${str_from_cps(tokens[i-1])} + ${safe_str_from_cps([cps[0]])}\"`); \r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcheck_fenced(norm);\r\n\t\t\t\t\t\tlet unique = [...new Set(chars)];\r\n\t\t\t\t\t\tlet [g] = determine_group(unique); // take the first match\r\n\t\t\t\t\t\t// see derive: \"Matching Groups have Same CM Style\"\r\n\t\t\t\t\t\t// alternative: could form a hybrid type: Latin/Japanese/...\t\r\n\t\t\t\t\t\tcheck_group(g, chars); // need text in order\r\n\t\t\t\t\t\tcheck_whole(g, unique); // only need unique text (order would be required for multiple-char confusables)\r\n\t\t\t\t\t\ttype = g.N;\r\n\t\t\t\t\t\t// 20230121: consider exposing restricted flag\r\n\t\t\t\t\t\t// it's simpler to just check for 'Restricted'\r\n\t\t\t\t\t\t// or even better: type.endsWith(']')\r\n\t\t\t\t\t\t//if (g.R) info.restricted = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tinfo.type = type;\r\n\t\t} catch (err) {\r\n\t\t\tinfo.error = err; // use full error object\r\n\t\t}\r\n\t\tinfo.output = norm;\r\n\t\treturn info;\r\n\t});\r\n}\r\n\r\nfunction check_whole(group, unique) {\r\n\tlet maker;\r\n\tlet shared = [];\r\n\tfor (let cp of unique) {\r\n\t\tlet whole = WHOLE_MAP.get(cp);\r\n\t\tif (whole === UNIQUE_PH) return; // unique, non-confusable\r\n\t\tif (whole) {\r\n\t\t\tlet set = whole.M.get(cp); // groups which have a character that look-like this character\r\n\t\t\tmaker = maker ? maker.filter(g => set.has(g)) : [...set];\r\n\t\t\tif (!maker.length) return; // confusable intersection is empty\r\n\t\t} else {\r\n\t\t\tshared.push(cp); \r\n\t\t}\r\n\t}\r\n\tif (maker) {\r\n\t\t// we have 1+ confusable\r\n\t\t// check if any of the remaning groups\r\n\t\t// contain the shared characters too\r\n\t\tfor (let g of maker) {\r\n\t\t\tif (shared.every(cp => g.V.has(cp))) {\r\n\t\t\t\tthrow new Error(`whole-script confusable: ${group.N}/${g.N}`);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// assumption: unique.size > 0\r\n// returns list of matching groups\r\nfunction determine_group(unique) {\r\n\tlet groups = GROUPS;\r\n\tfor (let cp of unique) {\r\n\t\t// note: we need to dodge CM that are whitelisted\r\n\t\t// but that code isn't currently necessary\r\n\t\tlet gs = groups.filter(g => g.V.has(cp));\r\n\t\tif (!gs.length) {\r\n\t\t\tif (!GROUPS.some(g => g.V.has(cp))) { \r\n\t\t\t\t// 20230716: change to more exact statement, see: ENSNormalize.{cs,java}\r\n\t\t\t\t// the character was composed of valid parts\r\n\t\t\t\t// but it's NFC form is invalid\r\n\t\t\t\t// note: this doesn't have to be a composition\r\n\t\t\t\t// 20230720: change to full check\r\n\t\t\t\tthrow error_disallowed(cp); // this should be rare\r\n\t\t\t} else {\r\n\t\t\t\t// there is no group that contains all these characters\r\n\t\t\t\t// throw using the highest priority group that matched\r\n\t\t\t\t// https://www.unicode.org/reports/tr39/#mixed_script_confusables\r\n\t\t\t\tthrow error_group_member(groups[0], cp);\r\n\t\t\t}\r\n\t\t}\r\n\t\tgroups = gs;\r\n\t\tif (gs.length == 1) break; // there is only one group left\r\n\t}\r\n\t// there are at least 1 group(s) with all of these characters\r\n\treturn groups;\r\n}\r\n\r\n// throw on first error\r\nfunction flatten(split) {\r\n\treturn split.map(({input, error, output}) => {\r\n\t\tif (error) {\r\n\t\t\t// don't print label again if just a single label\r\n\t\t\tlet msg = error.message;\r\n\t\t\t// bidi_qq() only necessary if msg is digits\r\n\t\t\tthrow new Error(split.length == 1 ? msg : `Invalid label ${bidi_qq(safe_str_from_cps(input))}: ${msg}`); \r\n\t\t}\r\n\t\treturn str_from_cps(output);\r\n\t}).join(STOP_CH);\r\n}\r\n\r\nfunction error_disallowed(cp) {\r\n\t// TODO: add cp to error?\r\n\treturn new Error(`disallowed character: ${quoted_cp(cp)}`); \r\n}\r\nfunction error_group_member(g, cp) {\r\n\tlet quoted = quoted_cp(cp);\r\n\tlet gg = GROUPS.find(g => g.P.has(cp));\r\n\tif (gg) {\r\n\t\tquoted = `${gg.N} ${quoted}`;\r\n\t}\r\n\treturn new Error(`illegal mixture: ${g.N} + ${quoted}`);\r\n}\r\nfunction error_placement(where) {\r\n\treturn new Error(`illegal placement: ${where}`);\r\n}\r\n\r\n// assumption: cps.length > 0\r\n// assumption: cps[0] isn't a CM\r\n// assumption: the previous character isn't an emoji\r\nfunction check_group(g, cps) {\r\n\tlet {V, M} = g;\r\n\tfor (let cp of cps) {\r\n\t\tif (!V.has(cp)) {\r\n\t\t\t// for whitelisted scripts, this will throw illegal mixture on invalid cm, eg. \"e{300}{300}\"\r\n\t\t\t// at the moment, it's unnecessary to introduce an extra error type\r\n\t\t\t// until there exists a whitelisted multi-character\r\n\t\t\t//   eg. if (M < 0 && is_combining_mark(cp)) { ... }\r\n\t\t\t// there are 3 cases:\r\n\t\t\t//   1. illegal cm for wrong group => mixture error\r\n\t\t\t//   2. illegal cm for same group => cm error\r\n\t\t\t//       requires set of whitelist cm per group: \r\n\t\t\t//        eg. new Set([...g.V].flatMap(nfc).filter(cp => CM.has(cp)))\r\n\t\t\t//   3. wrong group => mixture error\r\n\t\t\tthrow error_group_member(g, cp);\r\n\t\t}\r\n\t}\r\n\t//if (M >= 0) { // we have a known fixed cm count\r\n\tif (M) { // we need to check for NSM\r\n\t\tlet decomposed = nfd(cps);\r\n\t\tfor (let i = 1, e = decomposed.length; i < e; i++) { // see: assumption\r\n\t\t\t// 20230210: bugfix: using cps instead of decomposed h/t Carbon225\r\n\t\t\t/*\r\n\t\t\tif (CM.has(decomposed[i])) {\r\n\t\t\t\tlet j = i + 1;\r\n\t\t\t\twhile (j < e && CM.has(decomposed[j])) j++;\r\n\t\t\t\tif (j - i > M) {\r\n\t\t\t\t\tthrow new Error(`too many combining marks: ${g.N} ${bidi_qq(str_from_cps(decomposed.slice(i-1, j)))} (${j-i}/${M})`);\r\n\t\t\t\t}\r\n\t\t\t\ti = j;\r\n\t\t\t}\r\n\t\t\t*/\r\n\t\t\t// 20230217: switch to NSM counting\r\n\t\t\t// https://www.unicode.org/reports/tr39/#Optional_Detection\r\n\t\t\tif (NSM.has(decomposed[i])) {\r\n\t\t\t\tlet j = i + 1;\r\n\t\t\t\tfor (let cp; j < e && NSM.has(cp = decomposed[j]); j++) {\r\n\t\t\t\t\t// a. Forbid sequences of the same nonspacing mark.\r\n\t\t\t\t\tfor (let k = i; k < j; k++) { // O(n^2) but n < 100\r\n\t\t\t\t\t\tif (decomposed[k] == cp) {\r\n\t\t\t\t\t\t\tthrow new Error(`duplicate non-spacing marks: ${quoted_cp(cp)}`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// parse to end so we have full nsm count\r\n\t\t\t\t// b. Forbid sequences of more than 4 nonspacing marks (gc=Mn or gc=Me).\r\n\t\t\t\tif (j - i > NSM_MAX) {\r\n\t\t\t\t\t// note: this slice starts with a base char or spacing-mark cm\r\n\t\t\t\t\tthrow new Error(`excessive non-spacing marks: ${bidi_qq(safe_str_from_cps(decomposed.slice(i-1, j)))} (${j-i}/${NSM_MAX})`);\r\n\t\t\t\t}\r\n\t\t\t\ti = j;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t// *** this code currently isn't needed ***\r\n\t/*\r\n\tlet cm_whitelist = M instanceof Map;\r\n\tfor (let i = 0, e = cps.length; i < e; ) {\r\n\t\tlet cp = cps[i++];\r\n\t\tlet seqs = cm_whitelist && M.get(cp);\r\n\t\tif (seqs) { \r\n\t\t\t// list of codepoints that can follow\r\n\t\t\t// if this exists, this will always be 1+\r\n\t\t\tlet j = i;\r\n\t\t\twhile (j < e && CM.has(cps[j])) j++;\r\n\t\t\tlet cms = cps.slice(i, j);\r\n\t\t\tlet match = seqs.find(seq => !compare_arrays(seq, cms));\r\n\t\t\tif (!match) throw new Error(`disallowed combining mark sequence: \"${safe_str_from_cps([cp, ...cms])}\"`);\r\n\t\t\ti = j;\r\n\t\t} else if (!V.has(cp)) {\r\n\t\t\t// https://www.unicode.org/reports/tr39/#mixed_script_confusables\r\n\t\t\tlet quoted = quoted_cp(cp);\r\n\t\t\tfor (let cp of cps) {\r\n\t\t\t\tlet u = UNIQUE.get(cp);\r\n\t\t\t\tif (u && u !== g) {\r\n\t\t\t\t\t// if both scripts are restricted this error is confusing\r\n\t\t\t\t\t// because we don't differentiate RestrictedA from RestrictedB \r\n\t\t\t\t\tif (!u.R) quoted = `${quoted} is ${u.N}`;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthrow new Error(`disallowed ${g.N} character: ${quoted}`);\r\n\t\t\t//throw new Error(`disallowed character: ${quoted} (expected ${g.N})`);\r\n\t\t\t//throw new Error(`${g.N} does not allow: ${quoted}`);\r\n\t\t}\r\n\t}\r\n\tif (!cm_whitelist) {\r\n\t\tlet decomposed = nfd(cps);\r\n\t\tfor (let i = 1, e = decomposed.length; i < e; i++) { // we know it can't be cm leading\r\n\t\t\tif (CM.has(decomposed[i])) {\r\n\t\t\t\tlet j = i + 1;\r\n\t\t\t\twhile (j < e && CM.has(decomposed[j])) j++;\r\n\t\t\t\tif (j - i > M) {\r\n\t\t\t\t\tthrow new Error(`too many combining marks: \"${str_from_cps(decomposed.slice(i-1, j))}\" (${j-i}/${M})`);\r\n\t\t\t\t}\r\n\t\t\t\ti = j;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t*/\r\n}\r\n\r\n// given a list of codepoints\r\n// returns a list of lists, where emoji are a fully-qualified (as Array subclass)\r\n// eg. explode_cp(\"abc\ud83d\udca9d\") => [[61, 62, 63], Emoji[1F4A9, FE0F], [64]]\r\nfunction process(input, nf, ef) {\r\n\tlet ret = [];\r\n\tlet chars = [];\r\n\tinput = input.slice().reverse(); // flip so we can pop\r\n\twhile (input.length) {\r\n\t\tlet emoji = consume_emoji_reversed(input);\r\n\t\tif (emoji) {\r\n\t\t\tif (chars.length) {\r\n\t\t\t\tret.push(nf(chars));\r\n\t\t\t\tchars = [];\r\n\t\t\t}\r\n\t\t\tret.push(ef(emoji));\r\n\t\t} else {\r\n\t\t\tlet cp = input.pop();\r\n\t\t\tif (VALID.has(cp)) {\r\n\t\t\t\tchars.push(cp);\r\n\t\t\t} else {\r\n\t\t\t\tlet cps = MAPPED.get(cp);\r\n\t\t\t\tif (cps) {\r\n\t\t\t\t\tchars.push(...cps);\r\n\t\t\t\t} else if (!IGNORED.has(cp)) {\r\n\t\t\t\t\tthrow error_disallowed(cp);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (chars.length) {\r\n\t\tret.push(nf(chars));\r\n\t}\r\n\treturn ret;\r\n}\r\n\r\nfunction filter_fe0f(cps) {\r\n\treturn cps.filter(cp => cp != FE0F);\r\n}\r\n\r\n// given array of codepoints\r\n// returns the longest valid emoji sequence (or undefined if no match)\r\n// *MUTATES* the supplied array\r\n// disallows interleaved ignored characters\r\n// fills (optional) eaten array with matched codepoints\r\nfunction consume_emoji_reversed(cps, eaten) {\r\n\tlet node = EMOJI_ROOT;\r\n\tlet emoji;\r\n\tlet pos = cps.length;\r\n\twhile (pos) {\r\n\t\tnode = node.get(cps[--pos]);\r\n\t\tif (!node) break;\r\n\t\tlet {V} = node;\r\n\t\tif (V) { // this is a valid emoji (so far)\r\n\t\t\temoji = V;\r\n\t\t\tif (eaten) eaten.push(...cps.slice(pos).reverse()); // copy input (if needed)\r\n\t\t\tcps.length = pos; // truncate\r\n\t\t}\r\n\t}\r\n\treturn emoji;\r\n}\r\n\r\n// ************************************************************\r\n// tokenizer \r\n\r\nconst TY_VALID = 'valid';\r\nconst TY_MAPPED = 'mapped';\r\nconst TY_IGNORED = 'ignored';\r\nconst TY_DISALLOWED = 'disallowed';\r\nconst TY_EMOJI = 'emoji';\r\nconst TY_NFC = 'nfc';\r\nconst TY_STOP = 'stop';\r\n\r\nfunction ens_tokenize(name, {\r\n\tnf = true, // collapse unnormalized runs into a single token\r\n} = {}) {\r\n\tlet input = explode_cp(name).reverse();\r\n\tlet eaten = [];\r\n\tlet tokens = [];\r\n\twhile (input.length) {\t\t\r\n\t\tlet emoji = consume_emoji_reversed(input, eaten);\r\n\t\tif (emoji) {\r\n\t\t\ttokens.push({\r\n\t\t\t\ttype: TY_EMOJI, \r\n\t\t\t\temoji: emoji.slice(), // copy emoji\r\n\t\t\t\tinput: eaten, \r\n\t\t\t\tcps: filter_fe0f(emoji)\r\n\t\t\t});\r\n\t\t\teaten = []; // reset buffer\r\n\t\t} else {\r\n\t\t\tlet cp = input.pop();\r\n\t\t\tif (cp == STOP) {\r\n\t\t\t\ttokens.push({type: TY_STOP, cp});\r\n\t\t\t} else if (VALID.has(cp)) {\r\n\t\t\t\ttokens.push({type: TY_VALID, cps: [cp]});\r\n\t\t\t} else if (IGNORED.has(cp)) {\r\n\t\t\t\ttokens.push({type: TY_IGNORED, cp});\r\n\t\t\t} else {\r\n\t\t\t\tlet cps = MAPPED.get(cp);\r\n\t\t\t\tif (cps) {\r\n\t\t\t\t\ttokens.push({type: TY_MAPPED, cp, cps: cps.slice()});\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttokens.push({type: TY_DISALLOWED, cp});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (nf) {\r\n\t\tfor (let i = 0, start = -1; i < tokens.length; i++) {\r\n\t\t\tlet token = tokens[i];\r\n\t\t\tif (is_valid_or_mapped(token.type)) {\r\n\t\t\t\tif (requires_check(token.cps)) { // normalization might be needed\r\n\t\t\t\t\tlet end = i + 1;\r\n\t\t\t\t\tfor (let pos = end; pos < tokens.length; pos++) { // find adjacent text\r\n\t\t\t\t\t\tlet {type, cps} = tokens[pos];\r\n\t\t\t\t\t\tif (is_valid_or_mapped(type)) {\r\n\t\t\t\t\t\t\tif (!requires_check(cps)) break;\r\n\t\t\t\t\t\t\tend = pos + 1;\r\n\t\t\t\t\t\t} else if (type !== TY_IGNORED) { // || type !== TY_DISALLOWED) { \r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (start < 0) start = i;\r\n\t\t\t\t\tlet slice = tokens.slice(start, end);\r\n\t\t\t\t\tlet cps0 = slice.flatMap(x => is_valid_or_mapped(x.type) ? x.cps : []); // strip junk tokens\r\n\t\t\t\t\tlet cps = nfc(cps0);\r\n\t\t\t\t\tif (compare_arrays(cps, cps0)) { // bundle into an nfc token\r\n\t\t\t\t\t\ttokens.splice(start, end - start, {\r\n\t\t\t\t\t\t\ttype: TY_NFC, \r\n\t\t\t\t\t\t\tinput: cps0, // there are 3 states: tokens0 ==(process)=> input ==(nfc)=> tokens/cps\r\n\t\t\t\t\t\t\tcps, \r\n\t\t\t\t\t\t\ttokens0: collapse_valid_tokens(slice),\r\n\t\t\t\t\t\t\ttokens: ens_tokenize(str_from_cps(cps), {nf: false})\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\ti = start;\r\n\t\t\t\t\t} else { \r\n\t\t\t\t\t\ti = end - 1; // skip to end of slice\r\n\t\t\t\t\t}\r\n\t\t\t\t\tstart = -1; // reset\r\n\t\t\t\t} else {\r\n\t\t\t\t\tstart = i; // remember last\r\n\t\t\t\t}\r\n\t\t\t} else if (token.type !== TY_IGNORED) { // 20221024: is this correct?\r\n\t\t\t\tstart = -1; // reset\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn collapse_valid_tokens(tokens);\r\n}\r\n\r\nfunction is_valid_or_mapped(type) {\r\n\treturn type == TY_VALID || type == TY_MAPPED;\r\n}\r\n\r\nfunction requires_check(cps) {\r\n\treturn cps.some(cp => NFC_CHECK.has(cp));\r\n}\r\n\r\nfunction collapse_valid_tokens(tokens) {\r\n\tfor (let i = 0; i < tokens.length; i++) {\r\n\t\tif (tokens[i].type == TY_VALID) {\r\n\t\t\tlet j = i + 1;\r\n\t\t\twhile (j < tokens.length && tokens[j].type == TY_VALID) j++;\r\n\t\t\ttokens.splice(i, j - i, {type: TY_VALID, cps: tokens.slice(i, j).flatMap(x => x.cps)});\r\n\t\t}\r\n\t}\r\n\treturn tokens;\r\n}\n\nexports.ens_beautify = ens_beautify;\nexports.ens_emoji = ens_emoji;\nexports.ens_normalize = ens_normalize;\nexports.ens_normalize_fragment = ens_normalize_fragment;\nexports.ens_split = ens_split;\nexports.ens_tokenize = ens_tokenize;\nexports.is_combining_mark = is_combining_mark;\nexports.nfc = nfc;\nexports.nfd = nfd;\nexports.safe_str_from_cps = safe_str_from_cps;\nexports.should_escape = should_escape;\n\n};"],
"names":["shadow$provide","global","require","module","exports","decode_arithmetic","bytes","u16","pos","read_bit","read_width","read_buffer","symbol_count","total","acc","i","push","skip","pos_payload","FULL","N","HALF","QRTR","MASK","register","symbols","low","value","Math","floor","range","start","end","mid","a","b","offset","map","x","read_payload","v","unsafe_atob","s","lookup","forEach","c","charCodeAt","n","length","ret","Uint8Array","width","carry","read_deltas","next","Array","read_sorted","prev","read_sorted_arrays","read_array_while","read_mapped","w","read_linear_table","read_replacement_table","flat","read_transposed","m","fill","j","dx","dy","vN","flatMap","ys","_","j_dy","y","slice","quote_cp","cp","toString","toUpperCase","padStart","explode_cp","cps","len","codePointAt","str_from_cps","chunk","String","fromCodePoint","buf","join","compare_arrays","unpack_cp","packed","compose_pair","L0","L1","V0","V1","S0","N_COUNT","T_COUNT","S1","T0","T1","recomp","RECOMP","get","decomposed","add","cc","SHIFTED_RANK","check_order","s_index","v_index","t_index","mapped","DECOMP","pop","prev_cc","tmp","nfd","nfc","stack","prev_cp","composed","read_set","Set","r$1","read_chunked","CHUNKS","safe_str_from_cps","quoter","is_combining_mark","should_escape","quoted_cp","check_leading_underscore","lastIndexOf","UNDERSCORE","Error","check_fenced","FENCED","error_placement","last","match","CM","has","ESCAPE","split","name","nf","ef","STOP_CH","label","input","info","norm","tokens","process","token_count","type","emoji","is_emoji","every","HYPHEN","chars","unique","g","determine_group","check_group","check_whole","err","error","output","group","maker","shared","whole","WHOLE_MAP","UNIQUE_PH","set","M","filter","V","groups","GROUPS","gs","some","error_group_member","error_disallowed","flatten","msg","message","quoted","gg","find","P","where","e","NSM","k","NSM_MAX","reverse","consume_emoji_reversed","VALID","MAPPED","IGNORED","filter_fe0f","FE0F","eaten","node","EMOJI_ROOT","ens_tokenize","TY_EMOJI","STOP","TY_STOP","TY_VALID","TY_IGNORED","TY_MAPPED","TY_DISALLOWED","token","is_valid_or_mapped","requires_check","cps0","splice","TY_NFC","tokens0","collapse_valid_tokens","NFC_CHECK","Map","r","EXCLUSIONS","bucket","UNRESTRICTED","R","Q","sort","WHOLE_VALID","d","values","recs","rec","G","union","complement","multi","Emoji","EMOJI_LIST","read_trie","decode","S","B","sorted","expand","saved","br","from","child","ens_beautify","labels","indexOf","ens_emoji","ens_normalize","ens_normalize_fragment","frag","decompose","ens_split","preserve_emoji"]
}
