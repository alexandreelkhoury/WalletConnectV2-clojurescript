["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@noble/hashes/_u64.js"],"~:js","shadow$provide.module$node_modules$$noble$hashes$_u64=function(global,require,module,exports){function fromBig(n,le=!1){return le?{h:Number(n&U32_MASK64),l:Number(n>>_32n&U32_MASK64)}:{h:Number(n>>_32n&U32_MASK64)|0,l:Number(n&U32_MASK64)|0}}function split(lst,le=!1){let Ah=new Uint32Array(lst.length),Al=new Uint32Array(lst.length);for(let i=0;i<lst.length;i++){const {h,l}=fromBig(lst[i],le);[Ah[i],Al[i]]=[h,l]}return[Ah,Al]}function add(Ah,Al,Bh,Bl){Al=(Al>>>0)+(Bl>>>0);return{h:Ah+Bh+(Al/2**32|\n0)|0,l:Al|0}}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.add5L=exports.add5H=exports.add4H=exports.add4L=exports.add3H=exports.add3L=exports.add=exports.rotlBL=exports.rotlBH=exports.rotlSL=exports.rotlSH=exports.rotr32L=exports.rotr32H=exports.rotrBL=exports.rotrBH=exports.rotrSL=exports.rotrSH=exports.shrSL=exports.shrSH=exports.toBig=exports.split=exports.fromBig=void 0;const U32_MASK64=BigInt(2**32-1),_32n=BigInt(32);exports.fromBig=fromBig;exports.split=split;global=(h,l)=>\nBigInt(h>>>0)<<_32n|BigInt(l>>>0);exports.toBig=global;require=(h,_l,s)=>h>>>s;exports.shrSH=require;module=(h,l,s)=>h<<32-s|l>>>s;exports.shrSL=module;const rotrSH=(h,l,s)=>h>>>s|l<<32-s;exports.rotrSH=rotrSH;const rotrSL=(h,l,s)=>h<<32-s|l>>>s;exports.rotrSL=rotrSL;const rotrBH=(h,l,s)=>h<<64-s|l>>>s-32;exports.rotrBH=rotrBH;const rotrBL=(h,l,s)=>h>>>s-32|l<<64-s;exports.rotrBL=rotrBL;const rotr32H=(_h,l)=>l;exports.rotr32H=rotr32H;const rotr32L=(h,_l)=>h;exports.rotr32L=rotr32L;const rotlSH=(h,\nl,s)=>h<<s|l>>>32-s;exports.rotlSH=rotlSH;const rotlSL=(h,l,s)=>l<<s|h>>>32-s;exports.rotlSL=rotlSL;const rotlBH=(h,l,s)=>l<<s-32|h>>>64-s;exports.rotlBH=rotlBH;const rotlBL=(h,l,s)=>h<<s-32|l>>>64-s;exports.rotlBL=rotlBL;exports.add=add;const add3L=(Al,Bl,Cl)=>(Al>>>0)+(Bl>>>0)+(Cl>>>0);exports.add3L=add3L;const add3H=(low,Ah,Bh,Ch)=>Ah+Bh+Ch+(low/2**32|0)|0;exports.add3H=add3H;const add4L=(Al,Bl,Cl,Dl)=>(Al>>>0)+(Bl>>>0)+(Cl>>>0)+(Dl>>>0);exports.add4L=add4L;const add4H=(low,Ah,Bh,Ch,Dh)=>Ah+Bh+\nCh+Dh+(low/2**32|0)|0;exports.add4H=add4H;const add5L=(Al,Bl,Cl,Dl,El)=>(Al>>>0)+(Bl>>>0)+(Cl>>>0)+(Dl>>>0)+(El>>>0);exports.add5L=add5L;const add5H=(low,Ah,Bh,Ch,Dh,Eh)=>Ah+Bh+Ch+Dh+Eh+(low/2**32|0)|0;exports.add5H=add5H;exports.default={fromBig,split,toBig:global,shrSH:require,shrSL:module,rotrSH,rotrSL,rotrBH,rotrBL,rotr32H,rotr32L,rotlSH,rotlSL,rotlBH,rotlBL,add,add3L,add3H,add4L,add4H,add5H,add5L}}","~:source","shadow$provide[\"module$node_modules$$noble$hashes$_u64\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.add5L = exports.add5H = exports.add4H = exports.add4L = exports.add3H = exports.add3L = exports.add = exports.rotlBL = exports.rotlBH = exports.rotlSL = exports.rotlSH = exports.rotr32L = exports.rotr32H = exports.rotrBL = exports.rotrBH = exports.rotrSL = exports.rotrSH = exports.shrSL = exports.shrSH = exports.toBig = exports.split = exports.fromBig = void 0;\nconst U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nexports.fromBig = fromBig;\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nexports.split = split;\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\nexports.toBig = toBig;\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nexports.shrSH = shrSH;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\nexports.shrSL = shrSL;\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nexports.rotrSH = rotrSH;\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\nexports.rotrSL = rotrSL;\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nexports.rotrBH = rotrBH;\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\nexports.rotrBL = rotrBL;\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nexports.rotr32H = rotr32H;\nconst rotr32L = (h, _l) => h;\nexports.rotr32L = rotr32L;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nexports.rotlSH = rotlSH;\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\nexports.rotlSL = rotlSL;\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nexports.rotlBH = rotlBH;\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\nexports.rotlBL = rotlBL;\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\nexports.add = add;\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nexports.add3L = add3L;\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nexports.add3H = add3H;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nexports.add4L = add4L;\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nexports.add4H = add4H;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nexports.add5L = add5L;\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\nexports.add5H = add5H;\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexports.default = u64;\n//# sourceMappingURL=_u64.js.map\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["add4L","rotlSH","fromBig","rotrSH","__esModule","rotlSL","rotrSL","add5H","shrSH","value","split","add3L","add4H","rotrBL","rotrBH","l","rotr32L","add","h","rotlBH","add3H","toBig","shrSL","default","rotr32H","rotlBL","add5L"]],"~:compiled-at",1695111490225,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$noble$hashes$_u64.js\",\n\"lineCount\":5,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/@noble/hashes/_u64.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$noble$hashes$_u64\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nexports.add5L = exports.add5H = exports.add4H = exports.add4L = exports.add3H = exports.add3L = exports.add = exports.rotlBL = exports.rotlBH = exports.rotlSL = exports.rotlSH = exports.rotr32L = exports.rotr32H = exports.rotrBL = exports.rotrBH = exports.rotrSL = exports.rotrSH = exports.shrSL = exports.shrSH = exports.toBig = exports.split = exports.fromBig = void 0;\\nconst U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\\nconst _32n = /* @__PURE__ */ BigInt(32);\\n// We are not using BigUint64Array, because they are extremely slow as per 2022\\nfunction fromBig(n, le = false) {\\n    if (le)\\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\\n}\\nexports.fromBig = fromBig;\\nfunction split(lst, le = false) {\\n    let Ah = new Uint32Array(lst.length);\\n    let Al = new Uint32Array(lst.length);\\n    for (let i = 0; i < lst.length; i++) {\\n        const { h, l } = fromBig(lst[i], le);\\n        [Ah[i], Al[i]] = [h, l];\\n    }\\n    return [Ah, Al];\\n}\\nexports.split = split;\\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\\nexports.toBig = toBig;\\n// for Shift in [0, 32)\\nconst shrSH = (h, _l, s) => h >>> s;\\nexports.shrSH = shrSH;\\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\\nexports.shrSL = shrSL;\\n// Right rotate for Shift in [1, 32)\\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\\nexports.rotrSH = rotrSH;\\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\\nexports.rotrSL = rotrSL;\\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\\nexports.rotrBH = rotrBH;\\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\\nexports.rotrBL = rotrBL;\\n// Right rotate for shift===32 (just swaps l&h)\\nconst rotr32H = (_h, l) => l;\\nexports.rotr32H = rotr32H;\\nconst rotr32L = (h, _l) => h;\\nexports.rotr32L = rotr32L;\\n// Left rotate for Shift in [1, 32)\\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\\nexports.rotlSH = rotlSH;\\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\\nexports.rotlSL = rotlSL;\\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\\nexports.rotlBH = rotlBH;\\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\\nexports.rotlBL = rotlBL;\\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\\n// simple take carry out of low bit sum by shift, we need to use division.\\nfunction add(Ah, Al, Bh, Bl) {\\n    const l = (Al >>> 0) + (Bl >>> 0);\\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\\n}\\nexports.add = add;\\n// Addition with more than 2 elements\\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\\nexports.add3L = add3L;\\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\\nexports.add3H = add3H;\\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\\nexports.add4L = add4L;\\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\\nexports.add4H = add4H;\\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\\nexports.add5L = add5L;\\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\\nexports.add5H = add5H;\\n// prettier-ignore\\nconst u64 = {\\n    fromBig, split, toBig,\\n    shrSH, shrSL,\\n    rotrSH, rotrSL, rotrBH, rotrBL,\\n    rotr32H, rotr32L,\\n    rotlSH, rotlSL, rotlBH, rotlBL,\\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\\n};\\nexports.default = u64;\\n//# sourceMappingURL=_u64.js.map\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"fromBig\",\"n\",\"le\",\"h\",\"Number\",\"U32_MASK64\",\"l\",\"_32n\",\"split\",\"lst\",\"Ah\",\"Uint32Array\",\"length\",\"Al\",\"i\",\"add\",\"Bh\",\"Bl\",\"Object\",\"defineProperty\",\"value\",\"add5L\",\"add5H\",\"add4H\",\"add4L\",\"add3H\",\"add3L\",\"rotlBL\",\"rotlBH\",\"rotlSL\",\"rotlSH\",\"rotr32L\",\"rotr32H\",\"rotrBL\",\"rotrBH\",\"rotrSL\",\"rotrSH\",\"shrSL\",\"shrSH\",\"toBig\",\"BigInt\",\"_l\",\"s\",\"_h\",\"Cl\",\"low\",\"Ch\",\"Dl\",\"Dh\",\"El\",\"Eh\",\"default\",\"u64\"]\n}\n"]