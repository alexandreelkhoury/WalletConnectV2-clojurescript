shadow$provide.module$node_modules$$tanstack$query_core$build$lib$mutationObserver=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});var mutation=require("module$node_modules$$tanstack$query_core$build$lib$mutation"),notifyManager=require("module$node_modules$$tanstack$query_core$build$lib$notifyManager");global=require("module$node_modules$$tanstack$query_core$build$lib$subscribable");var utils=require("module$node_modules$$tanstack$query_core$build$lib$utils");
class MutationObserver extends global.Subscribable{constructor(client,options){super();this.client=client;this.setOptions(options);this.bindMethods();this.updateResult()}bindMethods(){this.mutate=this.mutate.bind(this);this.reset=this.reset.bind(this)}setOptions(options){var _this$currentMutation;const prevOptions=this.options;this.options=this.client.defaultMutationOptions(options);utils.shallowEqualObjects(prevOptions,this.options)||this.client.getMutationCache().notify({type:"observerOptionsUpdated",
mutation:this.currentMutation,observer:this});null==(_this$currentMutation=this.currentMutation)?void 0:_this$currentMutation.setOptions(this.options)}onUnsubscribe(){if(!this.hasListeners()){var _this$currentMutation2;null==(_this$currentMutation2=this.currentMutation)?void 0:_this$currentMutation2.removeObserver(this)}}onMutationUpdate(action){this.updateResult();const notifyOptions={listeners:!0};"success"===action.type?notifyOptions.onSuccess=!0:"error"===action.type&&(notifyOptions.onError=!0);
this.notify(notifyOptions)}getCurrentResult(){return this.currentResult}reset(){this.currentMutation=void 0;this.updateResult();this.notify({listeners:!0})}mutate(variables,options){this.mutateOptions=options;this.currentMutation&&this.currentMutation.removeObserver(this);this.currentMutation=this.client.getMutationCache().build(this.client,{...this.options,variables:"undefined"!==typeof variables?variables:this.options.variables});this.currentMutation.addObserver(this);return this.currentMutation.execute()}updateResult(){const state=
this.currentMutation?this.currentMutation.state:mutation.getDefaultState();this.currentResult={...state,isLoading:"loading"===state.status,isSuccess:"success"===state.status,isError:"error"===state.status,isIdle:"idle"===state.status,mutate:this.mutate,reset:this.reset}}notify(options){notifyManager.notifyManager.batch(()=>{if(this.mutateOptions&&this.hasListeners())if(options.onSuccess){var _this$mutateOptions$o,_this$mutateOptions,_this$mutateOptions$o2,_this$mutateOptions2;null==(_this$mutateOptions$o=
(_this$mutateOptions=this.mutateOptions).onSuccess)?void 0:_this$mutateOptions$o.call(_this$mutateOptions,this.currentResult.data,this.currentResult.variables,this.currentResult.context);null==(_this$mutateOptions$o2=(_this$mutateOptions2=this.mutateOptions).onSettled)?void 0:_this$mutateOptions$o2.call(_this$mutateOptions2,this.currentResult.data,null,this.currentResult.variables,this.currentResult.context)}else if(options.onError){var _this$mutateOptions$o3,_this$mutateOptions3,_this$mutateOptions$o4,
_this$mutateOptions4;null==(_this$mutateOptions$o3=(_this$mutateOptions3=this.mutateOptions).onError)?void 0:_this$mutateOptions$o3.call(_this$mutateOptions3,this.currentResult.error,this.currentResult.variables,this.currentResult.context);null==(_this$mutateOptions$o4=(_this$mutateOptions4=this.mutateOptions).onSettled)?void 0:_this$mutateOptions$o4.call(_this$mutateOptions4,void 0,this.currentResult.error,this.currentResult.variables,this.currentResult.context)}options.listeners&&this.listeners.forEach(({listener})=>
{listener(this.currentResult)})})}}exports.MutationObserver=MutationObserver}
//# sourceMappingURL=module$node_modules$$tanstack$query_core$build$lib$mutationObserver.js.map
