["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@tanstack/react-query/build/lib/suspense.js"],"~:js","shadow$provide.module$node_modules$$tanstack$react_query$build$lib$suspense=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.ensureStaleTime=defaultedOptions=>{defaultedOptions.suspense&&\"number\"!==typeof defaultedOptions.staleTime&&(defaultedOptions.staleTime=1E3)};exports.fetchOptimistic=(defaultedOptions,observer,errorResetBoundary)=>observer.fetchOptimistic(defaultedOptions).then(({data})=>{null==defaultedOptions.onSuccess?void 0:defaultedOptions.onSuccess(data);\nnull==defaultedOptions.onSettled?void 0:defaultedOptions.onSettled(data,null)}).catch(error=>{errorResetBoundary.clearReset();null==defaultedOptions.onError?void 0:defaultedOptions.onError(error);null==defaultedOptions.onSettled?void 0:defaultedOptions.onSettled(void 0,error)});exports.shouldSuspend=(defaultedOptions,result,isRestoring)=>(null==defaultedOptions?void 0:defaultedOptions.suspense)&&result.isLoading&&result.isFetching&&!isRestoring;exports.willFetch=(result,isRestoring)=>result.isLoading&&\nresult.isFetching&&!isRestoring}","~:source","shadow$provide[\"module$node_modules$$tanstack$react_query$build$lib$suspense\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst ensureStaleTime = defaultedOptions => {\n  if (defaultedOptions.suspense) {\n    // Always set stale time when using suspense to prevent\n    // fetching again when directly mounting after suspending\n    if (typeof defaultedOptions.staleTime !== 'number') {\n      defaultedOptions.staleTime = 1000;\n    }\n  }\n};\nconst willFetch = (result, isRestoring) => result.isLoading && result.isFetching && !isRestoring;\nconst shouldSuspend = (defaultedOptions, result, isRestoring) => (defaultedOptions == null ? void 0 : defaultedOptions.suspense) && willFetch(result, isRestoring);\nconst fetchOptimistic = (defaultedOptions, observer, errorResetBoundary) => observer.fetchOptimistic(defaultedOptions).then(({\n  data\n}) => {\n  defaultedOptions.onSuccess == null ? void 0 : defaultedOptions.onSuccess(data);\n  defaultedOptions.onSettled == null ? void 0 : defaultedOptions.onSettled(data, null);\n}).catch(error => {\n  errorResetBoundary.clearReset();\n  defaultedOptions.onError == null ? void 0 : defaultedOptions.onError(error);\n  defaultedOptions.onSettled == null ? void 0 : defaultedOptions.onSettled(undefined, error);\n});\n\nexports.ensureStaleTime = ensureStaleTime;\nexports.fetchOptimistic = fetchOptimistic;\nexports.shouldSuspend = shouldSuspend;\nexports.willFetch = willFetch;\n//# sourceMappingURL=suspense.js.map\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["shouldSuspend","fetchOptimistic","__esModule","value","ensureStaleTime","willFetch","staleTime"]],"~:compiled-at",1695111490188,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$tanstack$react_query$build$lib$suspense.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAA,4DAAA,CAAiF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGzHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CAwBAH,QAAQI,CAAAA,eAAR,CAtBwBC,gBAAAD,EAAoB,CACtCC,gBAAiBC,CAAAA,QAArB,EAG4C,QAH5C,GAGM,MAAOD,iBAAiBE,CAAAA,SAH9B,GAIIF,gBAAiBE,CAAAA,SAJrB,CAIiC,GAJjC,CAD0C,CAuB5CP,QAAQQ,CAAAA,eAAR,CAZwB,CAACH,gBAAD,CAAmBI,QAAnB,CAA6BC,kBAA7B,CAAAF,EAAoDC,QAASD,CAAAA,eAAT,CAAyBH,gBAAzB,CAA2CM,CAAAA,IAA3C,CAAgD,CAAC,CAC3HC,IAD2H,CAAD,CAAA,EAEtH,CAC0B,IAA9B,EAAAP,gBAAiBQ,CAAAA,SAAjB,CAAqC,IAAK,EAA1C,CAA8CR,gBAAiBQ,CAAAA,SAAjB,CAA2BD,IAA3B,CAChB;IAA9B,EAAAP,gBAAiBS,CAAAA,SAAjB,CAAqC,IAAK,EAA1C,CAA8CT,gBAAiBS,CAAAA,SAAjB,CAA2BF,IAA3B,CAAiC,IAAjC,CAF1C,CAFsE,CAKzEG,CAAAA,KALyE,CAKnEC,KAAA,EAAS,CAChBN,kBAAmBO,CAAAA,UAAnB,EAC4B,KAA5B,EAAAZ,gBAAiBa,CAAAA,OAAjB,CAAmC,IAAK,EAAxC,CAA4Cb,gBAAiBa,CAAAA,OAAjB,CAAyBF,KAAzB,CACd,KAA9B,EAAAX,gBAAiBS,CAAAA,SAAjB,CAAqC,IAAK,EAA1C,CAA8CT,gBAAiBS,CAAAA,SAAjB,CAA2BK,IAAAA,EAA3B,CAAsCH,KAAtC,CAH9B,CAL0D,CAa5EhB,QAAQoB,CAAAA,aAAR,CAdsB,CAACf,gBAAD,CAAmBgB,MAAnB,CAA2BC,WAA3B,CAAAF,GAAgE,IAApB,EAAAf,gBAAA,CAA2B,IAAK,EAAhC,CAAoCA,gBAAiBC,CAAAA,QAAjGc,GAAwHC,MAD5FE,CAAAA,SAC5BH,EAAwHC,MADxEG,CAAAA,UAChDJ,EAD8D,CACkEE,WAetJtB,QAAQyB,CAAAA,SAAR,CAhBkB,CAACJ,MAAD,CAASC,WAAT,CAAAG,EAAyBJ,MAAOE,CAAAA,SAAhCE;AAA6CJ,MAAOG,CAAAA,UAApDC,EAAkE,CAACH,WAdoC;\",\n\"sources\":[\"node_modules/@tanstack/react-query/build/lib/suspense.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$tanstack$react_query$build$lib$suspense\\\"] = function(global,require,module,exports) {\\n'use strict';\\n\\nObject.defineProperty(exports, '__esModule', { value: true });\\n\\nconst ensureStaleTime = defaultedOptions => {\\n  if (defaultedOptions.suspense) {\\n    // Always set stale time when using suspense to prevent\\n    // fetching again when directly mounting after suspending\\n    if (typeof defaultedOptions.staleTime !== 'number') {\\n      defaultedOptions.staleTime = 1000;\\n    }\\n  }\\n};\\nconst willFetch = (result, isRestoring) => result.isLoading && result.isFetching && !isRestoring;\\nconst shouldSuspend = (defaultedOptions, result, isRestoring) => (defaultedOptions == null ? void 0 : defaultedOptions.suspense) && willFetch(result, isRestoring);\\nconst fetchOptimistic = (defaultedOptions, observer, errorResetBoundary) => observer.fetchOptimistic(defaultedOptions).then(({\\n  data\\n}) => {\\n  defaultedOptions.onSuccess == null ? void 0 : defaultedOptions.onSuccess(data);\\n  defaultedOptions.onSettled == null ? void 0 : defaultedOptions.onSettled(data, null);\\n}).catch(error => {\\n  errorResetBoundary.clearReset();\\n  defaultedOptions.onError == null ? void 0 : defaultedOptions.onError(error);\\n  defaultedOptions.onSettled == null ? void 0 : defaultedOptions.onSettled(undefined, error);\\n});\\n\\nexports.ensureStaleTime = ensureStaleTime;\\nexports.fetchOptimistic = fetchOptimistic;\\nexports.shouldSuspend = shouldSuspend;\\nexports.willFetch = willFetch;\\n//# sourceMappingURL=suspense.js.map\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"ensureStaleTime\",\"defaultedOptions\",\"suspense\",\"staleTime\",\"fetchOptimistic\",\"observer\",\"errorResetBoundary\",\"then\",\"data\",\"onSuccess\",\"onSettled\",\"catch\",\"error\",\"clearReset\",\"onError\",\"undefined\",\"shouldSuspend\",\"result\",\"isRestoring\",\"isLoading\",\"isFetching\",\"willFetch\"]\n}\n"]