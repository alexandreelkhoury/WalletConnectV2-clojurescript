{
"version":3,
"file":"module$node_modules$viem$_cjs$actions$wallet$signMessage.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,wDAAA,CAA6E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAErHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CACAH,QAAQI,CAAAA,WAAR,CAAsB,IAAK,EAC3B,OAAMC,kBAAoBP,OAAA,CAAQ,2DAAR,CAA1B,CACMQ,aAAeR,OAAA,CAAQ,8CAAR,CADrB,CAEMS,WAAaT,OAAA,CAAQ,oDAAR,CAqBnBE,QAAQI,CAAAA,WAAR,CApBAA,cAA0B,CAACI,MAAD,CAAS,CAAE,QAASC,QAAA,CAAWD,MAAOE,CAAAA,OAA7B;AAAsCC,OAAtC,CAAT,CAA2D,CACjF,GAAI,CAACF,QAAL,CACI,KAAM,KAAIH,YAAaM,CAAAA,oBAAjB,CAAsC,CACxCC,SAAU,kCAD8B,CAAtC,CAAN,CAGEH,QAAAA,CAAU,GAAIL,iBAAkBS,CAAAA,YAAtB,EAAoCL,QAApC,CAChB,IAAqB,OAArB,GAAIC,QAAQK,CAAAA,IAAZ,CACI,MAAOL,SAAQN,CAAAA,WAAR,CAAoB,CAAEO,OAAF,CAApB,CACLK,QAAAA,CACqB,QAAvB,GAAI,MAAOL,QAAX,CACW,GAAIJ,UAAWU,CAAAA,WAAf,EAA4BN,OAA5B,CADX,CAEIA,OAAQO,CAAAA,GAAZ,WAA2BC,WAA3B,CACW,GAAIZ,UAAWa,CAAAA,KAAf,EAAsBT,OAAQO,CAAAA,GAA9B,CADX,CAEOP,OAAQO,CAAAA,GAEnB,OAAOV,OAAOa,CAAAA,OAAP,CAAe,CAClBC,OAAQ,eADU,CAElBC,OAAQ,CAACP,OAAD,CAAWN,QAAQc,CAAAA,OAAnB,CAFU,CAAf,CAf0E,CAPgC;",
"sources":["node_modules/viem/_cjs/actions/wallet/signMessage.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$viem$_cjs$actions$wallet$signMessage\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.signMessage = void 0;\nconst parseAccount_js_1 = require(\"../../accounts/utils/parseAccount.js\");\nconst account_js_1 = require(\"../../errors/account.js\");\nconst toHex_js_1 = require(\"../../utils/encoding/toHex.js\");\nasync function signMessage(client, { account: account_ = client.account, message, }) {\n    if (!account_)\n        throw new account_js_1.AccountNotFoundError({\n            docsPath: '/docs/actions/wallet/signMessage',\n        });\n    const account = (0, parseAccount_js_1.parseAccount)(account_);\n    if (account.type === 'local')\n        return account.signMessage({ message });\n    const message_ = (() => {\n        if (typeof message === 'string')\n            return (0, toHex_js_1.stringToHex)(message);\n        if (message.raw instanceof Uint8Array)\n            return (0, toHex_js_1.toHex)(message.raw);\n        return message.raw;\n    })();\n    return client.request({\n        method: 'personal_sign',\n        params: [message_, account.address],\n    });\n}\nexports.signMessage = signMessage;\n//# sourceMappingURL=signMessage.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","signMessage","parseAccount_js_1","account_js_1","toHex_js_1","client","account_","account","message","AccountNotFoundError","docsPath","parseAccount","type","message_","stringToHex","raw","Uint8Array","toHex","request","method","params","address"]
}
