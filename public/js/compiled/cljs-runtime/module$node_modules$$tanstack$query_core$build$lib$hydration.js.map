{
"version":3,
"file":"module$node_modules$$tanstack$query_core$build$lib$hydration.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/@tanstack/query-core/build/lib/hydration.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$tanstack$query_core$build$lib$hydration\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n// TYPES\n// FUNCTIONS\nfunction dehydrateMutation(mutation) {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state\n  };\n} // Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\n\n\nfunction dehydrateQuery(query) {\n  return {\n    state: query.state,\n    queryKey: query.queryKey,\n    queryHash: query.queryHash\n  };\n}\n\nfunction defaultShouldDehydrateMutation(mutation) {\n  return mutation.state.isPaused;\n}\nfunction defaultShouldDehydrateQuery(query) {\n  return query.state.status === 'success';\n}\nfunction dehydrate(client, options = {}) {\n  const mutations = [];\n  const queries = [];\n\n  if (options.dehydrateMutations !== false) {\n    const shouldDehydrateMutation = options.shouldDehydrateMutation || defaultShouldDehydrateMutation;\n    client.getMutationCache().getAll().forEach(mutation => {\n      if (shouldDehydrateMutation(mutation)) {\n        mutations.push(dehydrateMutation(mutation));\n      }\n    });\n  }\n\n  if (options.dehydrateQueries !== false) {\n    const shouldDehydrateQuery = options.shouldDehydrateQuery || defaultShouldDehydrateQuery;\n    client.getQueryCache().getAll().forEach(query => {\n      if (shouldDehydrateQuery(query)) {\n        queries.push(dehydrateQuery(query));\n      }\n    });\n  }\n\n  return {\n    mutations,\n    queries\n  };\n}\nfunction hydrate(client, dehydratedState, options) {\n  if (typeof dehydratedState !== 'object' || dehydratedState === null) {\n    return;\n  }\n\n  const mutationCache = client.getMutationCache();\n  const queryCache = client.getQueryCache(); // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n\n  const mutations = dehydratedState.mutations || []; // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n\n  const queries = dehydratedState.queries || [];\n  mutations.forEach(dehydratedMutation => {\n    var _options$defaultOptio;\n\n    mutationCache.build(client, { ...(options == null ? void 0 : (_options$defaultOptio = options.defaultOptions) == null ? void 0 : _options$defaultOptio.mutations),\n      mutationKey: dehydratedMutation.mutationKey\n    }, dehydratedMutation.state);\n  });\n  queries.forEach(dehydratedQuery => {\n    var _options$defaultOptio2;\n\n    const query = queryCache.get(dehydratedQuery.queryHash); // Reset fetch status to idle in the dehydrated state to avoid\n    // query being stuck in fetching state upon hydration\n\n    const dehydratedQueryState = { ...dehydratedQuery.state,\n      fetchStatus: 'idle'\n    }; // Do not hydrate if an existing query exists with newer data\n\n    if (query) {\n      if (query.state.dataUpdatedAt < dehydratedQueryState.dataUpdatedAt) {\n        query.setState(dehydratedQueryState);\n      }\n\n      return;\n    } // Restore query\n\n\n    queryCache.build(client, { ...(options == null ? void 0 : (_options$defaultOptio2 = options.defaultOptions) == null ? void 0 : _options$defaultOptio2.queries),\n      queryKey: dehydratedQuery.queryKey,\n      queryHash: dehydratedQuery.queryHash\n    }, dehydratedQueryState);\n  });\n}\n\nexports.defaultShouldDehydrateMutation = defaultShouldDehydrateMutation;\nexports.defaultShouldDehydrateQuery = defaultShouldDehydrateQuery;\nexports.dehydrate = dehydrate;\nexports.hydrate = hydrate;\n//# sourceMappingURL=hydration.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","defaultShouldDehydrateMutation","mutation","state","isPaused","defaultShouldDehydrateQuery","query","status","Object","defineProperty","value","dehydrate","client","options","mutations","queries","dehydrateMutations","shouldDehydrateMutation","getMutationCache","getAll","forEach","push","mutationKey","dehydrateQueries","shouldDehydrateQuery","getQueryCache","queryKey","queryHash","hydrate","dehydratedState","mutationCache","queryCache","dehydratedMutation","_options$defaultOptio","build","defaultOptions","dehydratedQuery","_options$defaultOptio2","get","dehydratedQueryState","fetchStatus","dataUpdatedAt","setState"]
}
