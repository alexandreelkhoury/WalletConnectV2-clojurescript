{
"version":3,
"file":"module$node_modules$$noble$hashes$_sha2.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/@noble/hashes/_sha2.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$noble$hashes$_sha2\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SHA2 = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nclass SHA2 extends utils_js_1.Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = (0, utils_js_1.createView)(this.buffer);\n    }\n    update(data) {\n        (0, _assert_js_1.exists)(this);\n        const { view, buffer, blockLen } = this;\n        data = (0, utils_js_1.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = (0, utils_js_1.createView)(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        (0, _assert_js_1.exists)(this);\n        (0, _assert_js_1.output)(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = (0, utils_js_1.createView)(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\nexports.SHA2 = SHA2;\n//# sourceMappingURL=_sha2.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","SHA2","_assert_js_1","utils_js_1","Hash","constructor","blockLen","outputLen","padOffset","isLE","finished","pos","length","destroyed","buffer","Uint8Array","view","createView","update","data","exists","toBytes","len","take","Math","min","dataView","process","set","subarray","roundClean","digestInto","out","output","fill","i","BigInt","setBigUint64","byteOffset","_u32_max","wl","Number","l","setUint32","h","wh","_32n","oview","Error","outLen","state","get","digest","res","slice","destroy","_cloneInto","to"]
}
