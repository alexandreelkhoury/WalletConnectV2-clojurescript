shadow$provide.module$node_modules$$tanstack$query_core$build$lib$queryClient=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});var utils=require("module$node_modules$$tanstack$query_core$build$lib$utils"),queryCache=require("module$node_modules$$tanstack$query_core$build$lib$queryCache"),mutationCache=require("module$node_modules$$tanstack$query_core$build$lib$mutationCache"),focusManager=require("module$node_modules$$tanstack$query_core$build$lib$focusManager"),
onlineManager=require("module$node_modules$$tanstack$query_core$build$lib$onlineManager"),notifyManager=require("module$node_modules$$tanstack$query_core$build$lib$notifyManager"),infiniteQueryBehavior=require("module$node_modules$$tanstack$query_core$build$lib$infiniteQueryBehavior"),logger=require("module$node_modules$$tanstack$query_core$build$lib$logger");class QueryClient{constructor(config={}){this.queryCache=config.queryCache||new queryCache.QueryCache;this.mutationCache=config.mutationCache||
new mutationCache.MutationCache;this.logger=config.logger||logger.defaultLogger;this.defaultOptions=config.defaultOptions||{};this.queryDefaults=[];this.mutationDefaults=[];this.mountCount=0;config.logger&&this.logger.error("Passing a custom logger has been deprecated and will be removed in the next major version.")}mount(){this.mountCount++;1===this.mountCount&&(this.unsubscribeFocus=focusManager.focusManager.subscribe(()=>{focusManager.focusManager.isFocused()&&(this.resumePausedMutations(),this.queryCache.onFocus())}),
this.unsubscribeOnline=onlineManager.onlineManager.subscribe(()=>{onlineManager.onlineManager.isOnline()&&(this.resumePausedMutations(),this.queryCache.onOnline())}))}unmount(){var _this$unsubscribeFocu,_this$unsubscribeOnli;this.mountCount--;0===this.mountCount&&(null==(_this$unsubscribeFocu=this.unsubscribeFocus)?void 0:_this$unsubscribeFocu.call(this),this.unsubscribeFocus=void 0,null==(_this$unsubscribeOnli=this.unsubscribeOnline)?void 0:_this$unsubscribeOnli.call(this),this.unsubscribeOnline=
void 0)}isFetching(arg1,arg2){[arg1]=utils.parseFilterArgs(arg1,arg2);arg1.fetchStatus="fetching";return this.queryCache.findAll(arg1).length}isMutating(filters){return this.mutationCache.findAll({...filters,fetching:!0}).length}getQueryData(queryKey,filters){var _this$queryCache$find;return null==(_this$queryCache$find=this.queryCache.find(queryKey,filters))?void 0:_this$queryCache$find.state.data}ensureQueryData(arg1,arg2,arg3){arg1=utils.parseQueryArgs(arg1,arg2,arg3);return(arg2=this.getQueryData(arg1.queryKey))?
Promise.resolve(arg2):this.fetchQuery(arg1)}getQueriesData(queryKeyOrFilters){return this.getQueryCache().findAll(queryKeyOrFilters).map(({queryKey,state})=>[queryKey,state.data])}setQueryData(queryKey,updater,options){const query=this.queryCache.find(queryKey);updater=utils.functionalUpdate(updater,null==query?void 0:query.state.data);if("undefined"!==typeof updater)return queryKey=utils.parseQueryArgs(queryKey),queryKey=this.defaultQueryOptions(queryKey),this.queryCache.build(this,queryKey).setData(updater,
{...options,manual:!0})}setQueriesData(queryKeyOrFilters,updater,options){return notifyManager.notifyManager.batch(()=>this.getQueryCache().findAll(queryKeyOrFilters).map(({queryKey})=>[queryKey,this.setQueryData(queryKey,updater,options)]))}getQueryState(queryKey,filters){var _this$queryCache$find2;return null==(_this$queryCache$find2=this.queryCache.find(queryKey,filters))?void 0:_this$queryCache$find2.state}removeQueries(arg1,arg2){const [filters]=utils.parseFilterArgs(arg1,arg2),queryCache=this.queryCache;
notifyManager.notifyManager.batch(()=>{queryCache.findAll(filters).forEach(query=>{queryCache.remove(query)})})}resetQueries(arg1,arg2,arg3){const [filters,options]=utils.parseFilterArgs(arg1,arg2,arg3),queryCache=this.queryCache,refetchFilters={type:"active",...filters};return notifyManager.notifyManager.batch(()=>{queryCache.findAll(filters).forEach(query=>{query.reset()});return this.refetchQueries(refetchFilters,options)})}cancelQueries(arg1,arg2,arg3){const [filters,cancelOptions={}]=utils.parseFilterArgs(arg1,
arg2,arg3);"undefined"===typeof cancelOptions.revert&&(cancelOptions.revert=!0);arg1=notifyManager.notifyManager.batch(()=>this.queryCache.findAll(filters).map(query=>query.cancel(cancelOptions)));return Promise.all(arg1).then(utils.noop).catch(utils.noop)}invalidateQueries(arg1,arg2,arg3){const [filters,options]=utils.parseFilterArgs(arg1,arg2,arg3);return notifyManager.notifyManager.batch(()=>{var _ref,_filters$refetchType;this.queryCache.findAll(filters).forEach(query=>{query.invalidate()});if("none"===
filters.refetchType)return Promise.resolve();const refetchFilters={...filters,type:null!=(_ref=null!=(_filters$refetchType=filters.refetchType)?_filters$refetchType:filters.type)?_ref:"active"};return this.refetchQueries(refetchFilters,options)})}refetchQueries(arg1,arg2,arg3){const [filters,options]=utils.parseFilterArgs(arg1,arg2,arg3);arg1=notifyManager.notifyManager.batch(()=>this.queryCache.findAll(filters).filter(query=>!query.isDisabled()).map(query=>{var _options$cancelRefetc;return query.fetch(void 0,
{...options,cancelRefetch:null!=(_options$cancelRefetc=null==options?void 0:options.cancelRefetch)?_options$cancelRefetc:!0,meta:{refetchPage:filters.refetchPage}})}));arg1=Promise.all(arg1).then(utils.noop);null!=options&&options.throwOnError||(arg1=arg1.catch(utils.noop));return arg1}fetchQuery(arg1,arg2,arg3){arg1=utils.parseQueryArgs(arg1,arg2,arg3);arg1=this.defaultQueryOptions(arg1);"undefined"===typeof arg1.retry&&(arg1.retry=!1);arg2=this.queryCache.build(this,arg1);return arg2.isStaleByTime(arg1.staleTime)?
arg2.fetch(arg1):Promise.resolve(arg2.state.data)}prefetchQuery(arg1,arg2,arg3){return this.fetchQuery(arg1,arg2,arg3).then(utils.noop).catch(utils.noop)}fetchInfiniteQuery(arg1,arg2,arg3){arg1=utils.parseQueryArgs(arg1,arg2,arg3);arg1.behavior=infiniteQueryBehavior.infiniteQueryBehavior();return this.fetchQuery(arg1)}prefetchInfiniteQuery(arg1,arg2,arg3){return this.fetchInfiniteQuery(arg1,arg2,arg3).then(utils.noop).catch(utils.noop)}resumePausedMutations(){return this.mutationCache.resumePausedMutations()}getQueryCache(){return this.queryCache}getMutationCache(){return this.mutationCache}getLogger(){return this.logger}getDefaultOptions(){return this.defaultOptions}setDefaultOptions(options){this.defaultOptions=
options}setQueryDefaults(queryKey,options){const result=this.queryDefaults.find(x=>utils.hashQueryKey(queryKey)===utils.hashQueryKey(x.queryKey));result?result.defaultOptions=options:this.queryDefaults.push({queryKey,defaultOptions:options})}getQueryDefaults(queryKey){if(queryKey){var firstMatchingDefaults=this.queryDefaults.find(x=>utils.partialMatchKey(queryKey,x.queryKey));1<this.queryDefaults.filter(x=>utils.partialMatchKey(queryKey,x.queryKey)).length&&this.logger.error("[QueryClient] Several query defaults match with key '"+
JSON.stringify(queryKey)+"'. The first matching query defaults are used. Please check how query defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetquerydefaults.");return null==firstMatchingDefaults?void 0:firstMatchingDefaults.defaultOptions}}setMutationDefaults(mutationKey,options){const result=this.mutationDefaults.find(x=>utils.hashQueryKey(mutationKey)===utils.hashQueryKey(x.mutationKey));result?result.defaultOptions=options:
this.mutationDefaults.push({mutationKey,defaultOptions:options})}getMutationDefaults(mutationKey){if(mutationKey){var firstMatchingDefaults=this.mutationDefaults.find(x=>utils.partialMatchKey(mutationKey,x.mutationKey));1<this.mutationDefaults.filter(x=>utils.partialMatchKey(mutationKey,x.mutationKey)).length&&this.logger.error("[QueryClient] Several mutation defaults match with key '"+JSON.stringify(mutationKey)+"'. The first matching mutation defaults are used. Please check how mutation defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetmutationdefaults.");
return null==firstMatchingDefaults?void 0:firstMatchingDefaults.defaultOptions}}defaultQueryOptions(options){if(null!=options&&options._defaulted)return options;options={...this.defaultOptions.queries,...this.getQueryDefaults(null==options?void 0:options.queryKey),...options,_defaulted:!0};!options.queryHash&&options.queryKey&&(options.queryHash=utils.hashQueryKeyByOptions(options.queryKey,options));"undefined"===typeof options.refetchOnReconnect&&(options.refetchOnReconnect="always"!==options.networkMode);
"undefined"===typeof options.useErrorBoundary&&(options.useErrorBoundary=!!options.suspense);return options}defaultMutationOptions(options){return null!=options&&options._defaulted?options:{...this.defaultOptions.mutations,...this.getMutationDefaults(null==options?void 0:options.mutationKey),...options,_defaulted:!0}}clear(){this.queryCache.clear();this.mutationCache.clear()}}exports.QueryClient=QueryClient}
//# sourceMappingURL=module$node_modules$$tanstack$query_core$build$lib$queryClient.js.map
