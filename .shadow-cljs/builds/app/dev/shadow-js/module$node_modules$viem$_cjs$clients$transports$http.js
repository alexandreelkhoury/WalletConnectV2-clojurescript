["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/viem/_cjs/clients/transports/http.js"],"~:js","shadow$provide.module$node_modules$viem$_cjs$clients$transports$http=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.http=void 0;const request_js_1=require(\"module$node_modules$viem$_cjs$errors$request\"),transport_js_1=require(\"module$node_modules$viem$_cjs$errors$transport\"),createBatchScheduler_js_1=require(\"module$node_modules$viem$_cjs$utils$promise$createBatchScheduler\"),rpc_js_1=require(\"module$node_modules$viem$_cjs$utils$rpc\"),createTransport_js_1=\nrequire(\"module$node_modules$viem$_cjs$clients$transports$createTransport\");exports.http=function(url,config={}){const {batch,fetchOptions,key=\"http\",name=\"HTTP JSON-RPC\",retryDelay}=config;return({chain,retryCount:retryCount_,timeout:timeout_})=>{const {batchSize=1E3,wait=0}=\"object\"===typeof batch?batch:{};retryCount_=config.retryCount??retryCount_;const timeout=timeout_??config.timeout??1E4,url_=url||chain?.rpcUrls.default.http[0];if(!url_)throw new transport_js_1.UrlRequiredError;return(0,createTransport_js_1.createTransport)({key,\nname,async request({method,params}){method={method,params};const {schedule}=(0,createBatchScheduler_js_1.createBatchScheduler)({id:`${url}`,wait,shouldSplitBatch(requests){return requests.length>batchSize},fn:body=>rpc_js_1.rpc.http(url_,{body,fetchOptions,timeout})}),[{error,result}]=await (async body=>batch?schedule(body):[await rpc_js_1.rpc.http(url_,{body,fetchOptions,timeout})])(method);if(error)throw new request_js_1.RpcRequestError({body:method,error,url:url_});return result},retryCount:retryCount_,\nretryDelay,timeout,type:\"http\"},{url})}}}","~:source","shadow$provide[\"module$node_modules$viem$_cjs$clients$transports$http\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.http = void 0;\nconst request_js_1 = require(\"../../errors/request.js\");\nconst transport_js_1 = require(\"../../errors/transport.js\");\nconst createBatchScheduler_js_1 = require(\"../../utils/promise/createBatchScheduler.js\");\nconst rpc_js_1 = require(\"../../utils/rpc.js\");\nconst createTransport_js_1 = require(\"./createTransport.js\");\nfunction http(url, config = {}) {\n    const { batch, fetchOptions, key = 'http', name = 'HTTP JSON-RPC', retryDelay, } = config;\n    return ({ chain, retryCount: retryCount_, timeout: timeout_ }) => {\n        const { batchSize = 1000, wait = 0 } = typeof batch === 'object' ? batch : {};\n        const retryCount = config.retryCount ?? retryCount_;\n        const timeout = timeout_ ?? config.timeout ?? 10000;\n        const url_ = url || chain?.rpcUrls.default.http[0];\n        if (!url_)\n            throw new transport_js_1.UrlRequiredError();\n        return (0, createTransport_js_1.createTransport)({\n            key,\n            name,\n            async request({ method, params }) {\n                const body = { method, params };\n                const { schedule } = (0, createBatchScheduler_js_1.createBatchScheduler)({\n                    id: `${url}`,\n                    wait,\n                    shouldSplitBatch(requests) {\n                        return requests.length > batchSize;\n                    },\n                    fn: (body) => rpc_js_1.rpc.http(url_, {\n                        body,\n                        fetchOptions,\n                        timeout,\n                    }),\n                });\n                const fn = async (body) => batch\n                    ? schedule(body)\n                    : [await rpc_js_1.rpc.http(url_, { body, fetchOptions, timeout })];\n                const [{ error, result }] = await fn(body);\n                if (error)\n                    throw new request_js_1.RpcRequestError({\n                        body,\n                        error,\n                        url: url_,\n                    });\n                return result;\n            },\n            retryCount,\n            retryDelay,\n            timeout,\n            type: 'http',\n        }, {\n            url,\n        });\n    };\n}\nexports.http = http;\n//# sourceMappingURL=http.js.map\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$viem$_cjs$utils$promise$createBatchScheduler","~$module$node_modules$viem$_cjs$clients$transports$createTransport","~$module$node_modules$viem$_cjs$utils$rpc","~$shadow.js","~$module$node_modules$viem$_cjs$errors$transport","~$module$node_modules$viem$_cjs$errors$request"]],"~:properties",["^5",["url","body","params","method","key","__esModule","http","error","id","fn","fetchOptions","name","value","wait","retryCount","timeout","retryDelay","type"]],"~:compiled-at",1695111490287,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$viem$_cjs$clients$transports$http.js\",\n\"lineCount\":4,\n\"mappings\":\"AAAAA,cAAA,CAAA,qDAAA,CAA0E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAElHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CACAH,QAAQI,CAAAA,IAAR,CAAe,IAAK,EACpB,OAAMC,aAAeP,OAAA,CAAQ,8CAAR,CAArB,CACMQ,eAAiBR,OAAA,CAAQ,gDAAR,CADvB,CAEMS,0BAA4BT,OAAA,CAAQ,kEAAR,CAFlC,CAGMU,SAAWV,OAAA,CAAQ,yCAAR,CAHjB,CAIMW;AAAuBX,OAAA,CAAQ,kEAAR,CAgD7BE,QAAQI,CAAAA,IAAR,CA/CAA,QAAa,CAACM,GAAD,CAAMC,MAAA,CAAS,EAAf,CAAmB,CAC5B,MAAM,CAAEC,KAAF,CAASC,YAAT,CAAuBC,GAAA,CAAM,MAA7B,CAAqCC,IAAA,CAAO,eAA5C,CAA6DC,UAA7D,CAAA,CAA6EL,MACnF,OAAO,CAAC,CAAEM,KAAF,CAAS,WAAYC,WAArB,CAAkC,QAASC,QAA3C,CAAD,CAAA,EAA2D,CAC9D,MAAM,CAAEC,SAAA,CAAY,GAAd,CAAoBC,IAAA,CAAO,CAA3B,CAAA,CAAkD,QAAjB,GAAA,MAAOT,MAAP,CAA4BA,KAA5B,CAAoC,EACrEU,YAAAA,CAAaX,MAAOW,CAAAA,UAApBA,EAAkCJ,WACxC,OAAMK,QAAUJ,QAAVI,EAAsBZ,MAAOY,CAAAA,OAA7BA,EAAwC,GAA9C,CACMC,KAAOd,GAAPc,EAAcP,KAAOQ,EAAAA,OAAQC,CAAAA,OAAQtB,CAAAA,IAAvB,CAA4B,CAA5B,CACpB,IAAI,CAACoB,IAAL,CACI,KAAM,KAAIlB,cAAeqB,CAAAA,gBAAzB,CACJ,MAAO,GAAIlB,oBAAqBmB,CAAAA,eAAzB,EAA0C,CAC7Cd,GAD6C;AAE7CC,IAF6C,CAGvCc,aAAO,CAAC,CAAEC,MAAF,CAAUC,MAAV,CAAD,CAAqB,CACxBC,MAAAA,CAAO,CAAEF,MAAF,CAAUC,MAAV,CACb,OAAM,CAAEE,QAAF,CAAA,CAAe,GAAI1B,yBAA0B2B,CAAAA,oBAA9B,EAAoD,CACrEC,GAAK,GAAEzB,GAAF,EADgE,CAErEW,IAFqE,CAGrEe,gBAAgB,CAACC,QAAD,CAAW,CACvB,MAAOA,SAASC,CAAAA,MAAhB,CAAyBlB,SADF,CAH0C,CAMrEmB,GAAKP,IAADO,EAAU/B,QAASgC,CAAAA,GAAIpC,CAAAA,IAAb,CAAkBoB,IAAlB,CAAwB,CAClCQ,IADkC,CAElCnB,YAFkC,CAGlCU,OAHkC,CAAxB,CANuD,CAApD,CAArB,CAeM,CAAC,CAAEkB,KAAF,CAASC,MAAT,CAAD,CAAA,CAAsB,MAHjBH,MAAOP,KAAPO,EAAgB3B,KAAA,CACrBqB,QAAA,CAASD,IAAT,CADqB,CAErB,CAAC,MAAMxB,QAASgC,CAAAA,GAAIpC,CAAAA,IAAb,CAAkBoB,IAAlB,CAAwB,CAAEQ,IAAF,CAAQnB,YAAR,CAAsBU,OAAtB,CAAxB,CAAP,CAFKgB,CAGuB,CAAGP,MAAH,CAClC,IAAIS,KAAJ,CACI,KAAM,KAAIpC,YAAasC,CAAAA,eAAjB,CAAiC,CACnCX,KAAAA,MADmC,CAEnCS,KAFmC,CAGnC/B,IAAKc,IAH8B,CAAjC,CAAN,CAKJ,MAAOkB,OAxBuB,CAHW,CA6B7CpB,WAAAA,WA7B6C;AA8B7CN,UA9B6C,CA+B7CO,OA/B6C,CAgC7CqB,KAAM,MAhCuC,CAA1C,CAiCJ,CACClC,GADD,CAjCI,CAPuD,CAFtC,CATkF;\",\n\"sources\":[\"node_modules/viem/_cjs/clients/transports/http.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$viem$_cjs$clients$transports$http\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nexports.http = void 0;\\nconst request_js_1 = require(\\\"../../errors/request.js\\\");\\nconst transport_js_1 = require(\\\"../../errors/transport.js\\\");\\nconst createBatchScheduler_js_1 = require(\\\"../../utils/promise/createBatchScheduler.js\\\");\\nconst rpc_js_1 = require(\\\"../../utils/rpc.js\\\");\\nconst createTransport_js_1 = require(\\\"./createTransport.js\\\");\\nfunction http(url, config = {}) {\\n    const { batch, fetchOptions, key = 'http', name = 'HTTP JSON-RPC', retryDelay, } = config;\\n    return ({ chain, retryCount: retryCount_, timeout: timeout_ }) => {\\n        const { batchSize = 1000, wait = 0 } = typeof batch === 'object' ? batch : {};\\n        const retryCount = config.retryCount ?? retryCount_;\\n        const timeout = timeout_ ?? config.timeout ?? 10000;\\n        const url_ = url || chain?.rpcUrls.default.http[0];\\n        if (!url_)\\n            throw new transport_js_1.UrlRequiredError();\\n        return (0, createTransport_js_1.createTransport)({\\n            key,\\n            name,\\n            async request({ method, params }) {\\n                const body = { method, params };\\n                const { schedule } = (0, createBatchScheduler_js_1.createBatchScheduler)({\\n                    id: `${url}`,\\n                    wait,\\n                    shouldSplitBatch(requests) {\\n                        return requests.length > batchSize;\\n                    },\\n                    fn: (body) => rpc_js_1.rpc.http(url_, {\\n                        body,\\n                        fetchOptions,\\n                        timeout,\\n                    }),\\n                });\\n                const fn = async (body) => batch\\n                    ? schedule(body)\\n                    : [await rpc_js_1.rpc.http(url_, { body, fetchOptions, timeout })];\\n                const [{ error, result }] = await fn(body);\\n                if (error)\\n                    throw new request_js_1.RpcRequestError({\\n                        body,\\n                        error,\\n                        url: url_,\\n                    });\\n                return result;\\n            },\\n            retryCount,\\n            retryDelay,\\n            timeout,\\n            type: 'http',\\n        }, {\\n            url,\\n        });\\n    };\\n}\\nexports.http = http;\\n//# sourceMappingURL=http.js.map\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"http\",\"request_js_1\",\"transport_js_1\",\"createBatchScheduler_js_1\",\"rpc_js_1\",\"createTransport_js_1\",\"url\",\"config\",\"batch\",\"fetchOptions\",\"key\",\"name\",\"retryDelay\",\"chain\",\"retryCount_\",\"timeout_\",\"batchSize\",\"wait\",\"retryCount\",\"timeout\",\"url_\",\"rpcUrls\",\"default\",\"UrlRequiredError\",\"createTransport\",\"request\",\"method\",\"params\",\"body\",\"schedule\",\"createBatchScheduler\",\"id\",\"shouldSplitBatch\",\"requests\",\"length\",\"fn\",\"rpc\",\"error\",\"result\",\"RpcRequestError\",\"type\"]\n}\n"]