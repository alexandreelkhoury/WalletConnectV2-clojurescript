shadow$provide.module$node_modules$$tanstack$query_core$build$lib$infiniteQueryObserver=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});global=require("module$node_modules$$tanstack$query_core$build$lib$queryObserver");var infiniteQueryBehavior=require("module$node_modules$$tanstack$query_core$build$lib$infiniteQueryBehavior");class InfiniteQueryObserver extends global.QueryObserver{constructor(client,options){super(client,options)}bindMethods(){super.bindMethods();
this.fetchNextPage=this.fetchNextPage.bind(this);this.fetchPreviousPage=this.fetchPreviousPage.bind(this)}setOptions(options,notifyOptions){super.setOptions({...options,behavior:infiniteQueryBehavior.infiniteQueryBehavior()},notifyOptions)}getOptimisticResult(options){options.behavior=infiniteQueryBehavior.infiniteQueryBehavior();return super.getOptimisticResult(options)}fetchNextPage({pageParam,...options}={}){return this.fetch({...options,meta:{fetchMore:{direction:"forward",pageParam}}})}fetchPreviousPage({pageParam,
...options}={}){return this.fetch({...options,meta:{fetchMore:{direction:"backward",pageParam}}})}createResult(query,options){var _state$fetchMeta,_state$fetchMeta$fetc,_state$fetchMeta2,_state$fetchMeta2$fet,_state$data,_state$data2;const {state}=query;query=super.createResult(query,options);const {isFetching,isRefetching}=query,isFetchingNextPage=isFetching&&"forward"===(null==(_state$fetchMeta=state.fetchMeta)?void 0:null==(_state$fetchMeta$fetc=_state$fetchMeta.fetchMore)?void 0:_state$fetchMeta$fetc.direction);
_state$fetchMeta=isFetching&&"backward"===(null==(_state$fetchMeta2=state.fetchMeta)?void 0:null==(_state$fetchMeta2$fet=_state$fetchMeta2.fetchMore)?void 0:_state$fetchMeta2$fet.direction);return{...query,fetchNextPage:this.fetchNextPage,fetchPreviousPage:this.fetchPreviousPage,hasNextPage:infiniteQueryBehavior.hasNextPage(options,null==(_state$data=state.data)?void 0:_state$data.pages),hasPreviousPage:infiniteQueryBehavior.hasPreviousPage(options,null==(_state$data2=state.data)?void 0:_state$data2.pages),
isFetchingNextPage,isFetchingPreviousPage:_state$fetchMeta,isRefetching:isRefetching&&!isFetchingNextPage&&!_state$fetchMeta}}}exports.InfiniteQueryObserver=InfiniteQueryObserver}
//# sourceMappingURL=module$node_modules$$tanstack$query_core$build$lib$infiniteQueryObserver.js.map
