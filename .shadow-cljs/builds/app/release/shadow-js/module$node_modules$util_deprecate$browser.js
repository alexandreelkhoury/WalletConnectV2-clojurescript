["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/util-deprecate/browser.js"],"~:js","shadow$provide[119]=function(S,A,V,q){function F(G){try{if(!S.localStorage)return!1}catch(r){return!1}G=S.localStorage[G];return null==G?!1:\"true\"===String(G).toLowerCase()}V.exports=function(G,r){if(F(\"noDeprecation\"))return G;var y=!1;return function(){if(!y){if(F(\"throwDeprecation\"))throw Error(r);F(\"traceDeprecation\")?console.trace(r):console.warn(r);y=!0}return G.apply(this,arguments)}}}","~:source","shadow$provide[119] = function(global,require,module,exports) {\n\n/**\n * Module exports.\n */\n\nmodule.exports = deprecate;\n\n/**\n * Mark that a method should not be used.\n * Returns a modified function which warns once by default.\n *\n * If `localStorage.noDeprecation = true` is set, then it is a no-op.\n *\n * If `localStorage.throwDeprecation = true` is set, then deprecated functions\n * will throw an Error when invoked.\n *\n * If `localStorage.traceDeprecation = true` is set, then deprecated functions\n * will invoke `console.trace()` instead of `console.error()`.\n *\n * @param {Function} fn - the function to deprecate\n * @param {String} msg - the string to print to the console when `fn` is invoked\n * @returns {Function} a new \"deprecated\" version of `fn`\n * @api public\n */\n\nfunction deprecate (fn, msg) {\n  if (config('noDeprecation')) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (config('throwDeprecation')) {\n        throw new Error(msg);\n      } else if (config('traceDeprecation')) {\n        console.trace(msg);\n      } else {\n        console.warn(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n}\n\n/**\n * Checks `localStorage` for boolean values for the given `name`.\n *\n * @param {String} name\n * @returns {Boolean}\n * @api private\n */\n\nfunction config (name) {\n  // accessing global.localStorage can trigger a DOMException in sandboxed iframes\n  try {\n    if (!global.localStorage) return false;\n  } catch (_) {\n    return false;\n  }\n  var val = global.localStorage[name];\n  if (null == val) return false;\n  return String(val).toLowerCase() === 'true';\n}\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",[]],"~:compiled-at",1695041440785,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$util_deprecate$browser.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAyD9DC,QAASA,EAAO,CAACC,CAAD,CAAO,CAErB,GAAI,CACF,GAAI,CAACL,CAAOM,CAAAA,YAAZ,CAA0B,MAAO,CAAA,CAD/B,CAEF,MAAOC,CAAP,CAAU,CACV,MAAO,CAAA,CADG,CAGRC,CAAAA,CAAMR,CAAOM,CAAAA,YAAP,CAAoBD,CAApB,CACV,OAAI,KAAJ,EAAYG,CAAZ,CAAwB,CAAA,CAAxB,CACqC,MADrC,GACOC,MAAA,CAAOD,CAAP,CAAYE,CAAAA,WAAZ,EATc,CAnDvBR,CAAOC,CAAAA,OAAP,CAoBAQ,QAAmB,CAACC,CAAD,CAAKC,CAAL,CAAU,CAC3B,GAAIT,CAAA,CAAO,eAAP,CAAJ,CACE,MAAOQ,EAGT,KAAIE,EAAS,CAAA,CAeb,OAdAC,SAAmB,EAAG,CACpB,GAAI,CAACD,CAAL,CAAa,CACX,GAAIV,CAAA,CAAO,kBAAP,CAAJ,CACE,KAAUY,MAAJ,CAAUH,CAAV,CAAN,CACST,CAAA,CAAO,kBAAP,CAAJ,CACLa,OAAQC,CAAAA,KAAR,CAAcL,CAAd,CADK,CAGLI,OAAQE,CAAAA,IAAR,CAAaN,CAAb,CAEFC,EAAA,CAAS,CAAA,CARE,CAUb,MAAOF,EAAGQ,CAAAA,KAAH,CAAS,IAAT,CAAeC,SAAf,CAXa,CANK,CA1BiC;\",\n\"sources\":[\"node_modules/util-deprecate/browser.js\"],\n\"sourcesContent\":[\"shadow$provide[119] = function(global,require,module,exports) {\\n\\n/**\\n * Module exports.\\n */\\n\\nmodule.exports = deprecate;\\n\\n/**\\n * Mark that a method should not be used.\\n * Returns a modified function which warns once by default.\\n *\\n * If `localStorage.noDeprecation = true` is set, then it is a no-op.\\n *\\n * If `localStorage.throwDeprecation = true` is set, then deprecated functions\\n * will throw an Error when invoked.\\n *\\n * If `localStorage.traceDeprecation = true` is set, then deprecated functions\\n * will invoke `console.trace()` instead of `console.error()`.\\n *\\n * @param {Function} fn - the function to deprecate\\n * @param {String} msg - the string to print to the console when `fn` is invoked\\n * @returns {Function} a new \\\"deprecated\\\" version of `fn`\\n * @api public\\n */\\n\\nfunction deprecate (fn, msg) {\\n  if (config('noDeprecation')) {\\n    return fn;\\n  }\\n\\n  var warned = false;\\n  function deprecated() {\\n    if (!warned) {\\n      if (config('throwDeprecation')) {\\n        throw new Error(msg);\\n      } else if (config('traceDeprecation')) {\\n        console.trace(msg);\\n      } else {\\n        console.warn(msg);\\n      }\\n      warned = true;\\n    }\\n    return fn.apply(this, arguments);\\n  }\\n\\n  return deprecated;\\n}\\n\\n/**\\n * Checks `localStorage` for boolean values for the given `name`.\\n *\\n * @param {String} name\\n * @returns {Boolean}\\n * @api private\\n */\\n\\nfunction config (name) {\\n  // accessing global.localStorage can trigger a DOMException in sandboxed iframes\\n  try {\\n    if (!global.localStorage) return false;\\n  } catch (_) {\\n    return false;\\n  }\\n  var val = global.localStorage[name];\\n  if (null == val) return false;\\n  return String(val).toLowerCase() === 'true';\\n}\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"config\",\"name\",\"localStorage\",\"_\",\"val\",\"String\",\"toLowerCase\",\"deprecate\",\"fn\",\"msg\",\"warned\",\"deprecated\",\"Error\",\"console\",\"trace\",\"warn\",\"apply\",\"arguments\"]\n}\n"]