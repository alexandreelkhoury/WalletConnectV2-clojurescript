["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/elliptic/lib/elliptic/curve/mont.js"],"~:js","shadow$provide[78]=function(S,A,V,q){function F(u){y.call(this,\"mont\",u);this.a=(new r(u.a,16)).toRed(this.red);this.b=(new r(u.b,16)).toRed(this.red);this.i4=(new r(4)).toRed(this.red).redInvm();this.two=(new r(2)).toRed(this.red);this.a24=this.i4.redMul(this.a.redAdd(this.two))}function G(u,p,n){y.BasePoint.call(this,u,\"projective\");null===p&&null===n?(this.x=this.curve.one,this.z=this.curve.zero):(this.x=new r(p,16),this.z=new r(n,16),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.z.red||\n(this.z=this.z.toRed(this.curve.red)))}var r=A(70);S=A(76);var y=A(75),e=A(73);S(F,y);V.exports=F;F.prototype.validate=function(u){u=u.normalize().x;var p=u.redSqr();u=p.redMul(u).redAdd(p.redMul(this.a)).redAdd(u);return 0===u.redSqrt().redSqr().cmp(u)};S(G,y.BasePoint);F.prototype.decodePoint=function(u,p){return this.point(e.toArray(u,p),1)};F.prototype.point=function(u,p){return new G(this,u,p)};F.prototype.pointFromJSON=function(u){return G.fromJSON(this,u)};G.prototype.precompute=function(){};\nG.prototype._encode=function(){return this.getX().toArray(\"be\",this.curve.p.byteLength())};G.fromJSON=function(u,p){return new G(u,p[0],p[1]||u.one)};G.prototype.inspect=function(){return this.isInfinity()?\"\\x3cEC Point Infinity\\x3e\":\"\\x3cEC Point x: \"+this.x.fromRed().toString(16,2)+\" z: \"+this.z.fromRed().toString(16,2)+\"\\x3e\"};G.prototype.isInfinity=function(){return 0===this.z.cmpn(0)};G.prototype.dbl=function(){var u=this.x.redAdd(this.z).redSqr(),p=this.x.redSub(this.z).redSqr(),n=u.redSub(p);\nu=u.redMul(p);p=n.redMul(p.redAdd(this.curve.a24.redMul(n)));return this.curve.point(u,p)};G.prototype.add=function(){throw Error(\"Not supported on Montgomery curve\");};G.prototype.diffAdd=function(u,p){var n=this.x.redAdd(this.z),l=this.x.redSub(this.z),h=u.x.redAdd(u.z);u=u.x.redSub(u.z).redMul(n);h=h.redMul(l);l=p.z.redMul(u.redAdd(h).redSqr());p=p.x.redMul(u.redISub(h).redSqr());return this.curve.point(l,p)};G.prototype.mul=function(u){var p=u.clone();u=this;for(var n=this.curve.point(null,null),\nl=[];0!==p.cmpn(0);p.iushrn(1))l.push(p.andln(1));for(p=l.length-1;0<=p;p--)0===l[p]?(u=u.diffAdd(n,this),n=n.dbl()):(n=u.diffAdd(n,this),u=u.dbl());return n};G.prototype.mulAdd=function(){throw Error(\"Not supported on Montgomery curve\");};G.prototype.jumlAdd=function(){throw Error(\"Not supported on Montgomery curve\");};G.prototype.eq=function(u){return 0===this.getX().cmp(u.getX())};G.prototype.normalize=function(){this.x=this.x.redMul(this.z.redInvm());this.z=this.curve.one;return this};G.prototype.getX=\nfunction(){this.normalize();return this.x.fromRed()}}","~:source","shadow$provide[78] = function(global,require,module,exports) {\n'use strict';\n\nvar BN = require('bn.js');\nvar inherits = require('inherits');\nvar Base = require('./base');\n\nvar utils = require('../utils');\n\nfunction MontCurve(conf) {\n  Base.call(this, 'mont', conf);\n\n  this.a = new BN(conf.a, 16).toRed(this.red);\n  this.b = new BN(conf.b, 16).toRed(this.red);\n  this.i4 = new BN(4).toRed(this.red).redInvm();\n  this.two = new BN(2).toRed(this.red);\n  this.a24 = this.i4.redMul(this.a.redAdd(this.two));\n}\ninherits(MontCurve, Base);\nmodule.exports = MontCurve;\n\nMontCurve.prototype.validate = function validate(point) {\n  var x = point.normalize().x;\n  var x2 = x.redSqr();\n  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);\n  var y = rhs.redSqrt();\n\n  return y.redSqr().cmp(rhs) === 0;\n};\n\nfunction Point(curve, x, z) {\n  Base.BasePoint.call(this, curve, 'projective');\n  if (x === null && z === null) {\n    this.x = this.curve.one;\n    this.z = this.curve.zero;\n  } else {\n    this.x = new BN(x, 16);\n    this.z = new BN(z, 16);\n    if (!this.x.red)\n      this.x = this.x.toRed(this.curve.red);\n    if (!this.z.red)\n      this.z = this.z.toRed(this.curve.red);\n  }\n}\ninherits(Point, Base.BasePoint);\n\nMontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {\n  return this.point(utils.toArray(bytes, enc), 1);\n};\n\nMontCurve.prototype.point = function point(x, z) {\n  return new Point(this, x, z);\n};\n\nMontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {\n  return Point.fromJSON(this, obj);\n};\n\nPoint.prototype.precompute = function precompute() {\n  // No-op\n};\n\nPoint.prototype._encode = function _encode() {\n  return this.getX().toArray('be', this.curve.p.byteLength());\n};\n\nPoint.fromJSON = function fromJSON(curve, obj) {\n  return new Point(curve, obj[0], obj[1] || curve.one);\n};\n\nPoint.prototype.inspect = function inspect() {\n  if (this.isInfinity())\n    return '<EC Point Infinity>';\n  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +\n      ' z: ' + this.z.fromRed().toString(16, 2) + '>';\n};\n\nPoint.prototype.isInfinity = function isInfinity() {\n  // XXX This code assumes that zero is always zero in red\n  return this.z.cmpn(0) === 0;\n};\n\nPoint.prototype.dbl = function dbl() {\n  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3\n  // 2M + 2S + 4A\n\n  // A = X1 + Z1\n  var a = this.x.redAdd(this.z);\n  // AA = A^2\n  var aa = a.redSqr();\n  // B = X1 - Z1\n  var b = this.x.redSub(this.z);\n  // BB = B^2\n  var bb = b.redSqr();\n  // C = AA - BB\n  var c = aa.redSub(bb);\n  // X3 = AA * BB\n  var nx = aa.redMul(bb);\n  // Z3 = C * (BB + A24 * C)\n  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));\n  return this.curve.point(nx, nz);\n};\n\nPoint.prototype.add = function add() {\n  throw new Error('Not supported on Montgomery curve');\n};\n\nPoint.prototype.diffAdd = function diffAdd(p, diff) {\n  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3\n  // 4M + 2S + 6A\n\n  // A = X2 + Z2\n  var a = this.x.redAdd(this.z);\n  // B = X2 - Z2\n  var b = this.x.redSub(this.z);\n  // C = X3 + Z3\n  var c = p.x.redAdd(p.z);\n  // D = X3 - Z3\n  var d = p.x.redSub(p.z);\n  // DA = D * A\n  var da = d.redMul(a);\n  // CB = C * B\n  var cb = c.redMul(b);\n  // X5 = Z1 * (DA + CB)^2\n  var nx = diff.z.redMul(da.redAdd(cb).redSqr());\n  // Z5 = X1 * (DA - CB)^2\n  var nz = diff.x.redMul(da.redISub(cb).redSqr());\n  return this.curve.point(nx, nz);\n};\n\nPoint.prototype.mul = function mul(k) {\n  var t = k.clone();\n  var a = this; // (N / 2) * Q + Q\n  var b = this.curve.point(null, null); // (N / 2) * Q\n  var c = this; // Q\n\n  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))\n    bits.push(t.andln(1));\n\n  for (var i = bits.length - 1; i >= 0; i--) {\n    if (bits[i] === 0) {\n      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q\n      a = a.diffAdd(b, c);\n      // N * Q = 2 * ((N / 2) * Q + Q))\n      b = b.dbl();\n    } else {\n      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)\n      b = a.diffAdd(b, c);\n      // N * Q + Q = 2 * ((N / 2) * Q + Q)\n      a = a.dbl();\n    }\n  }\n  return b;\n};\n\nPoint.prototype.mulAdd = function mulAdd() {\n  throw new Error('Not supported on Montgomery curve');\n};\n\nPoint.prototype.jumlAdd = function jumlAdd() {\n  throw new Error('Not supported on Montgomery curve');\n};\n\nPoint.prototype.eq = function eq(other) {\n  return this.getX().cmp(other.getX()) === 0;\n};\n\nPoint.prototype.normalize = function normalize() {\n  this.x = this.x.redMul(this.z.redInvm());\n  this.z = this.curve.one;\n  return this;\n};\n\nPoint.prototype.getX = function getX() {\n  // Normalize coordinates\n  this.normalize();\n\n  return this.x.fromRed();\n};\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$elliptic$node_modules$bn_js$lib$bn","~$module$node_modules$inherits$inherits_browser","~$module$node_modules$elliptic$lib$elliptic$utils","~$module$node_modules$elliptic$lib$elliptic$curve$base"]],"~:properties",["^5",["z","a24","normalize","fromJSON","two","eq","jumlAdd","validate","x","inspect","decodePoint","mulAdd","diffAdd","a","getX","dbl","precompute","mul","b","i4","isInfinity","_encode","add","point","pointFromJSON"]],"~:compiled-at",1695041440742,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$elliptic$lib$elliptic$curve$mont.js\",\n\"lineCount\":6,\n\"mappings\":\"AAAAA,cAAA,CAAe,EAAf,CAAA,CAAqB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAS7DC,QAASA,EAAS,CAACC,CAAD,CAAO,CACvBC,CAAKC,CAAAA,IAAL,CAAU,IAAV,CAAgB,MAAhB,CAAwBF,CAAxB,CAEA,KAAKG,CAAAA,CAAL,CAA4BC,CAAnB,IAAIC,CAAJ,CAAOL,CAAKG,CAAAA,CAAZ,CAAe,EAAf,CAAmBC,EAAAA,KAAnB,CAAyB,IAAKE,CAAAA,GAA9B,CACT,KAAKC,CAAAA,CAAL,CAA4BH,CAAnB,IAAIC,CAAJ,CAAOL,CAAKO,CAAAA,CAAZ,CAAe,EAAf,CAAmBH,EAAAA,KAAnB,CAAyB,IAAKE,CAAAA,GAA9B,CACT,KAAKE,CAAAA,EAAL,CAAoBJ,CAAV,IAAIC,CAAJ,CAAO,CAAP,CAAUD,EAAAA,KAAV,CAAgB,IAAKE,CAAAA,GAArB,CAA0BG,CAAAA,OAA1B,EACV,KAAKC,CAAAA,GAAL,CAAqBN,CAAV,IAAIC,CAAJ,CAAO,CAAP,CAAUD,EAAAA,KAAV,CAAgB,IAAKE,CAAAA,GAArB,CACX,KAAKK,CAAAA,GAAL,CAAW,IAAKH,CAAAA,EAAGI,CAAAA,MAAR,CAAe,IAAKT,CAAAA,CAAEU,CAAAA,MAAP,CAAc,IAAKH,CAAAA,GAAnB,CAAf,CAPY,CAqBzBI,QAASA,EAAK,CAACC,CAAD,CAAQC,CAAR,CAAWC,CAAX,CAAc,CAC1BhB,CAAKiB,CAAAA,SAAUhB,CAAAA,IAAf,CAAoB,IAApB,CAA0Ba,CAA1B,CAAiC,YAAjC,CACU,KAAV,GAAIC,CAAJ,EAAwB,IAAxB,GAAkBC,CAAlB,EACE,IAAKD,CAAAA,CACL,CADS,IAAKD,CAAAA,KAAMI,CAAAA,GACpB,CAAA,IAAKF,CAAAA,CAAL,CAAS,IAAKF,CAAAA,KAAMK,CAAAA,IAFtB,GAIE,IAAKJ,CAAAA,CAIL,CAJS,IAAIX,CAAJ,CAAOW,CAAP,CAAU,EAAV,CAIT,CAHA,IAAKC,CAAAA,CAGL,CAHS,IAAIZ,CAAJ,CAAOY,CAAP,CAAU,EAAV,CAGT,CAFK,IAAKD,CAAAA,CAAEV,CAAAA,GAEZ,GADE,IAAKU,CAAAA,CACP,CADW,IAAKA,CAAAA,CAAEZ,CAAAA,KAAP,CAAa,IAAKW,CAAAA,KAAMT,CAAAA,GAAxB,CACX,EAAK,IAAKW,CAAAA,CAAEX,CAAAA,GAAZ;CACE,IAAKW,CAAAA,CADP,CACW,IAAKA,CAAAA,CAAEb,CAAAA,KAAP,CAAa,IAAKW,CAAAA,KAAMT,CAAAA,GAAxB,CADX,CARF,CAF0B,CA3B5B,IAAID,EAAKT,CAAA,CAAQ,EAAR,CACLyB,EAAAA,CAAWzB,CAAA,CAAQ,EAAR,CACf,KAAIK,EAAOL,CAAA,CAAQ,EAAR,CAAX,CAEI0B,EAAQ1B,CAAA,CAAQ,EAAR,CAWZyB,EAAA,CAAStB,CAAT,CAAoBE,CAApB,CACAJ,EAAOC,CAAAA,OAAP,CAAiBC,CAEjBA,EAAUwB,CAAAA,SAAUC,CAAAA,QAApB,CAA+BC,QAAiB,CAACC,CAAD,CAAQ,CAClDV,CAAAA,CAAIU,CAAMC,CAAAA,SAAN,EAAkBX,CAAAA,CAC1B,KAAIY,EAAKZ,CAAEa,CAAAA,MAAF,EACLC,EAAAA,CAAMF,CAAGhB,CAAAA,MAAH,CAAUI,CAAV,CAAaH,CAAAA,MAAb,CAAoBe,CAAGhB,CAAAA,MAAH,CAAU,IAAKT,CAAAA,CAAf,CAApB,CAAuCU,CAAAA,MAAvC,CAA8CG,CAA9C,CAGV,OAA+B,EAA/B,GAFQc,CAAIC,CAAAA,OAAJC,EAECH,CAAAA,MAAF,EAAWI,CAAAA,GAAX,CAAeH,CAAf,CAN+C,CAuBxDT,EAAA,CAASP,CAAT,CAAgBb,CAAKiB,CAAAA,SAArB,CAEAnB,EAAUwB,CAAAA,SAAUW,CAAAA,WAApB,CAAkCC,QAAoB,CAACC,CAAD,CAAQC,CAAR,CAAa,CACjE,MAAO,KAAKX,CAAAA,KAAL,CAAWJ,CAAMgB,CAAAA,OAAN,CAAcF,CAAd,CAAqBC,CAArB,CAAX,CAAsC,CAAtC,CAD0D,CAInEtC,EAAUwB,CAAAA,SAAUG,CAAAA,KAApB,CAA4Ba,QAAc,CAACvB,CAAD,CAAIC,CAAJ,CAAO,CAC/C,MAAO,KAAIH,CAAJ,CAAU,IAAV,CAAgBE,CAAhB,CAAmBC,CAAnB,CADwC,CAIjDlB,EAAUwB,CAAAA,SAAUiB,CAAAA,aAApB,CAAoCC,QAAsB,CAACC,CAAD,CAAM,CAC9D,MAAO5B,EAAM6B,CAAAA,QAAN,CAAe,IAAf,CAAqBD,CAArB,CADuD,CAIhE5B,EAAMS,CAAAA,SAAUqB,CAAAA,UAAhB,CAA6BC,QAAmB,EAAG,EAInD/B;CAAMS,CAAAA,SAAUuB,CAAAA,OAAhB,CAA0BC,QAAgB,EAAG,CAC3C,MAAO,KAAKC,CAAAA,IAAL,EAAYV,CAAAA,OAAZ,CAAoB,IAApB,CAA0B,IAAKvB,CAAAA,KAAMkC,CAAAA,CAAEC,CAAAA,UAAb,EAA1B,CADoC,CAI7CpC,EAAM6B,CAAAA,QAAN,CAAiBQ,QAAiB,CAACpC,CAAD,CAAQ2B,CAAR,CAAa,CAC7C,MAAO,KAAI5B,CAAJ,CAAUC,CAAV,CAAiB2B,CAAA,CAAI,CAAJ,CAAjB,CAAyBA,CAAA,CAAI,CAAJ,CAAzB,EAAmC3B,CAAMI,CAAAA,GAAzC,CADsC,CAI/CL,EAAMS,CAAAA,SAAU6B,CAAAA,OAAhB,CAA0BC,QAAgB,EAAG,CAC3C,MAAI,KAAKC,CAAAA,UAAL,EAAJ,CACS,2BADT,CAEO,kBAFP,CAEyB,IAAKtC,CAAAA,CAAEuC,CAAAA,OAAP,EAAiBC,CAAAA,QAAjB,CAA0B,EAA1B,CAA8B,CAA9B,CAFzB,CAGI,MAHJ,CAGa,IAAKvC,CAAAA,CAAEsC,CAAAA,OAAP,EAAiBC,CAAAA,QAAjB,CAA0B,EAA1B,CAA8B,CAA9B,CAHb,CAGgD,MAJL,CAO7C1C,EAAMS,CAAAA,SAAU+B,CAAAA,UAAhB,CAA6BG,QAAmB,EAAG,CAEjD,MAA0B,EAA1B,GAAO,IAAKxC,CAAAA,CAAEyC,CAAAA,IAAP,CAAY,CAAZ,CAF0C,CAKnD5C,EAAMS,CAAAA,SAAUoC,CAAAA,GAAhB,CAAsBC,QAAY,EAAG,CAOnC,IAAIC,EAFI,IAAK7C,CAAAA,CAAEH,CAAAA,MAAPV,CAAc,IAAKc,CAAAA,CAAnBd,CAEG0B,CAAAA,MAAF,EAAT,CAIIiC,EAFI,IAAK9C,CAAAA,CAAE+C,CAAAA,MAAPxD,CAAc,IAAKU,CAAAA,CAAnBV,CAEGsB,CAAAA,MAAF,EAJT,CAMImC,EAAIH,CAAGE,CAAAA,MAAH,CAAUD,CAAV,CAEJG;CAAAA,CAAKJ,CAAGjD,CAAAA,MAAH,CAAUkD,CAAV,CAELI,EAAAA,CAAKF,CAAEpD,CAAAA,MAAF,CAASkD,CAAGjD,CAAAA,MAAH,CAAU,IAAKE,CAAAA,KAAMJ,CAAAA,GAAIC,CAAAA,MAAf,CAAsBoD,CAAtB,CAAV,CAAT,CACT,OAAO,KAAKjD,CAAAA,KAAMW,CAAAA,KAAX,CAAiBuC,CAAjB,CAAqBC,CAArB,CAlB4B,CAqBrCpD,EAAMS,CAAAA,SAAU4C,CAAAA,GAAhB,CAAsBC,QAAY,EAAG,CACnC,KAAUC,MAAJ,CAAU,mCAAV,CAAN,CADmC,CAIrCvD,EAAMS,CAAAA,SAAU+C,CAAAA,OAAhB,CAA0BC,QAAgB,CAACtB,CAAD,CAAIuB,CAAJ,CAAU,CAKlD,IAAIrE,EAAI,IAAKa,CAAAA,CAAEH,CAAAA,MAAP,CAAc,IAAKI,CAAAA,CAAnB,CAAR,CAEIV,EAAI,IAAKS,CAAAA,CAAE+C,CAAAA,MAAP,CAAc,IAAK9C,CAAAA,CAAnB,CAFR,CAII+C,EAAIf,CAAEjC,CAAAA,CAAEH,CAAAA,MAAJ,CAAWoC,CAAEhC,CAAAA,CAAb,CAIJwD,EAAAA,CAFIxB,CAAEjC,CAAAA,CAAE+C,CAAAA,MAAJW,CAAWzB,CAAEhC,CAAAA,CAAbyD,CAEG9D,CAAAA,MAAF,CAAST,CAAT,CAELwE,EAAAA,CAAKX,CAAEpD,CAAAA,MAAF,CAASL,CAAT,CAEL0D,EAAAA,CAAKO,CAAKvD,CAAAA,CAAEL,CAAAA,MAAP,CAAc6D,CAAG5D,CAAAA,MAAH,CAAU8D,CAAV,CAAc9C,CAAAA,MAAd,EAAd,CAELqC,EAAAA,CAAKM,CAAKxD,CAAAA,CAAEJ,CAAAA,MAAP,CAAc6D,CAAGG,CAAAA,OAAH,CAAWD,CAAX,CAAe9C,CAAAA,MAAf,EAAd,CACT,OAAO,KAAKd,CAAAA,KAAMW,CAAAA,KAAX,CAAiBuC,CAAjB,CAAqBC,CAArB,CApB2C,CAuBpDpD,EAAMS,CAAAA,SAAUsD,CAAAA,GAAhB,CAAsBC,QAAY,CAACC,CAAD,CAAI,CACpC,IAAIC,EAAID,CAAEE,CAAAA,KAAF,EACJ9E,EAAAA,CAAI,IAIR,KAHA,IAAII,EAAI,IAAKQ,CAAAA,KAAMW,CAAAA,KAAX,CAAiB,IAAjB,CAAuB,IAAvB,CAAR;AAGSwD,EAAO,EAAhB,CAAkC,CAAlC,GAAoBF,CAAEtB,CAAAA,IAAF,CAAO,CAAP,CAApB,CAAqCsB,CAAEG,CAAAA,MAAF,CAAS,CAAT,CAArC,CACED,CAAKE,CAAAA,IAAL,CAAUJ,CAAEK,CAAAA,KAAF,CAAQ,CAAR,CAAV,CAEF,KAASC,CAAT,CAAaJ,CAAKK,CAAAA,MAAlB,CAA2B,CAA3B,CAAmC,CAAnC,EAA8BD,CAA9B,CAAsCA,CAAA,EAAtC,CACkB,CAAhB,GAAIJ,CAAA,CAAKI,CAAL,CAAJ,EAEEnF,CAEA,CAFIA,CAAEmE,CAAAA,OAAF,CAAU/D,CAAV,CARAyD,IAQA,CAEJ,CAAAzD,CAAA,CAAIA,CAAEoD,CAAAA,GAAF,EAJN,GAOEpD,CAEA,CAFIJ,CAAEmE,CAAAA,OAAF,CAAU/D,CAAV,CAbAyD,IAaA,CAEJ,CAAA7D,CAAA,CAAIA,CAAEwD,CAAAA,GAAF,EATN,CAYF,OAAOpD,EAtB6B,CAyBtCO,EAAMS,CAAAA,SAAUiE,CAAAA,MAAhB,CAAyBC,QAAe,EAAG,CACzC,KAAUpB,MAAJ,CAAU,mCAAV,CAAN,CADyC,CAI3CvD,EAAMS,CAAAA,SAAUmE,CAAAA,OAAhB,CAA0BC,QAAgB,EAAG,CAC3C,KAAUtB,MAAJ,CAAU,mCAAV,CAAN,CAD2C,CAI7CvD,EAAMS,CAAAA,SAAUqE,CAAAA,EAAhB,CAAqBC,QAAW,CAACC,CAAD,CAAQ,CACtC,MAAyC,EAAzC,GAAO,IAAK9C,CAAAA,IAAL,EAAYf,CAAAA,GAAZ,CAAgB6D,CAAM9C,CAAAA,IAAN,EAAhB,CAD+B,CAIxClC,EAAMS,CAAAA,SAAUI,CAAAA,SAAhB,CAA4BoE,QAAkB,EAAG,CAC/C,IAAK/E,CAAAA,CAAL,CAAS,IAAKA,CAAAA,CAAEJ,CAAAA,MAAP,CAAc,IAAKK,CAAAA,CAAER,CAAAA,OAAP,EAAd,CACT,KAAKQ,CAAAA,CAAL,CAAS,IAAKF,CAAAA,KAAMI,CAAAA,GACpB,OAAO,KAHwC,CAMjDL,EAAMS,CAAAA,SAAUyB,CAAAA,IAAhB;AAAuBgD,QAAa,EAAG,CAErC,IAAKrE,CAAAA,SAAL,EAEA,OAAO,KAAKX,CAAAA,CAAEuC,CAAAA,OAAP,EAJ8B,CA7KsB;\",\n\"sources\":[\"node_modules/elliptic/lib/elliptic/curve/mont.js\"],\n\"sourcesContent\":[\"shadow$provide[78] = function(global,require,module,exports) {\\n'use strict';\\n\\nvar BN = require('bn.js');\\nvar inherits = require('inherits');\\nvar Base = require('./base');\\n\\nvar utils = require('../utils');\\n\\nfunction MontCurve(conf) {\\n  Base.call(this, 'mont', conf);\\n\\n  this.a = new BN(conf.a, 16).toRed(this.red);\\n  this.b = new BN(conf.b, 16).toRed(this.red);\\n  this.i4 = new BN(4).toRed(this.red).redInvm();\\n  this.two = new BN(2).toRed(this.red);\\n  this.a24 = this.i4.redMul(this.a.redAdd(this.two));\\n}\\ninherits(MontCurve, Base);\\nmodule.exports = MontCurve;\\n\\nMontCurve.prototype.validate = function validate(point) {\\n  var x = point.normalize().x;\\n  var x2 = x.redSqr();\\n  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);\\n  var y = rhs.redSqrt();\\n\\n  return y.redSqr().cmp(rhs) === 0;\\n};\\n\\nfunction Point(curve, x, z) {\\n  Base.BasePoint.call(this, curve, 'projective');\\n  if (x === null && z === null) {\\n    this.x = this.curve.one;\\n    this.z = this.curve.zero;\\n  } else {\\n    this.x = new BN(x, 16);\\n    this.z = new BN(z, 16);\\n    if (!this.x.red)\\n      this.x = this.x.toRed(this.curve.red);\\n    if (!this.z.red)\\n      this.z = this.z.toRed(this.curve.red);\\n  }\\n}\\ninherits(Point, Base.BasePoint);\\n\\nMontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {\\n  return this.point(utils.toArray(bytes, enc), 1);\\n};\\n\\nMontCurve.prototype.point = function point(x, z) {\\n  return new Point(this, x, z);\\n};\\n\\nMontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {\\n  return Point.fromJSON(this, obj);\\n};\\n\\nPoint.prototype.precompute = function precompute() {\\n  // No-op\\n};\\n\\nPoint.prototype._encode = function _encode() {\\n  return this.getX().toArray('be', this.curve.p.byteLength());\\n};\\n\\nPoint.fromJSON = function fromJSON(curve, obj) {\\n  return new Point(curve, obj[0], obj[1] || curve.one);\\n};\\n\\nPoint.prototype.inspect = function inspect() {\\n  if (this.isInfinity())\\n    return '<EC Point Infinity>';\\n  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +\\n      ' z: ' + this.z.fromRed().toString(16, 2) + '>';\\n};\\n\\nPoint.prototype.isInfinity = function isInfinity() {\\n  // XXX This code assumes that zero is always zero in red\\n  return this.z.cmpn(0) === 0;\\n};\\n\\nPoint.prototype.dbl = function dbl() {\\n  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3\\n  // 2M + 2S + 4A\\n\\n  // A = X1 + Z1\\n  var a = this.x.redAdd(this.z);\\n  // AA = A^2\\n  var aa = a.redSqr();\\n  // B = X1 - Z1\\n  var b = this.x.redSub(this.z);\\n  // BB = B^2\\n  var bb = b.redSqr();\\n  // C = AA - BB\\n  var c = aa.redSub(bb);\\n  // X3 = AA * BB\\n  var nx = aa.redMul(bb);\\n  // Z3 = C * (BB + A24 * C)\\n  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));\\n  return this.curve.point(nx, nz);\\n};\\n\\nPoint.prototype.add = function add() {\\n  throw new Error('Not supported on Montgomery curve');\\n};\\n\\nPoint.prototype.diffAdd = function diffAdd(p, diff) {\\n  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3\\n  // 4M + 2S + 6A\\n\\n  // A = X2 + Z2\\n  var a = this.x.redAdd(this.z);\\n  // B = X2 - Z2\\n  var b = this.x.redSub(this.z);\\n  // C = X3 + Z3\\n  var c = p.x.redAdd(p.z);\\n  // D = X3 - Z3\\n  var d = p.x.redSub(p.z);\\n  // DA = D * A\\n  var da = d.redMul(a);\\n  // CB = C * B\\n  var cb = c.redMul(b);\\n  // X5 = Z1 * (DA + CB)^2\\n  var nx = diff.z.redMul(da.redAdd(cb).redSqr());\\n  // Z5 = X1 * (DA - CB)^2\\n  var nz = diff.x.redMul(da.redISub(cb).redSqr());\\n  return this.curve.point(nx, nz);\\n};\\n\\nPoint.prototype.mul = function mul(k) {\\n  var t = k.clone();\\n  var a = this; // (N / 2) * Q + Q\\n  var b = this.curve.point(null, null); // (N / 2) * Q\\n  var c = this; // Q\\n\\n  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))\\n    bits.push(t.andln(1));\\n\\n  for (var i = bits.length - 1; i >= 0; i--) {\\n    if (bits[i] === 0) {\\n      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q\\n      a = a.diffAdd(b, c);\\n      // N * Q = 2 * ((N / 2) * Q + Q))\\n      b = b.dbl();\\n    } else {\\n      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)\\n      b = a.diffAdd(b, c);\\n      // N * Q + Q = 2 * ((N / 2) * Q + Q)\\n      a = a.dbl();\\n    }\\n  }\\n  return b;\\n};\\n\\nPoint.prototype.mulAdd = function mulAdd() {\\n  throw new Error('Not supported on Montgomery curve');\\n};\\n\\nPoint.prototype.jumlAdd = function jumlAdd() {\\n  throw new Error('Not supported on Montgomery curve');\\n};\\n\\nPoint.prototype.eq = function eq(other) {\\n  return this.getX().cmp(other.getX()) === 0;\\n};\\n\\nPoint.prototype.normalize = function normalize() {\\n  this.x = this.x.redMul(this.z.redInvm());\\n  this.z = this.curve.one;\\n  return this;\\n};\\n\\nPoint.prototype.getX = function getX() {\\n  // Normalize coordinates\\n  this.normalize();\\n\\n  return this.x.fromRed();\\n};\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"MontCurve\",\"conf\",\"Base\",\"call\",\"a\",\"toRed\",\"BN\",\"red\",\"b\",\"i4\",\"redInvm\",\"two\",\"a24\",\"redMul\",\"redAdd\",\"Point\",\"curve\",\"x\",\"z\",\"BasePoint\",\"one\",\"zero\",\"inherits\",\"utils\",\"prototype\",\"validate\",\"MontCurve.prototype.validate\",\"point\",\"normalize\",\"x2\",\"redSqr\",\"rhs\",\"redSqrt\",\"y\",\"cmp\",\"decodePoint\",\"MontCurve.prototype.decodePoint\",\"bytes\",\"enc\",\"toArray\",\"MontCurve.prototype.point\",\"pointFromJSON\",\"MontCurve.prototype.pointFromJSON\",\"obj\",\"fromJSON\",\"precompute\",\"Point.prototype.precompute\",\"_encode\",\"Point.prototype._encode\",\"getX\",\"p\",\"byteLength\",\"Point.fromJSON\",\"inspect\",\"Point.prototype.inspect\",\"isInfinity\",\"fromRed\",\"toString\",\"Point.prototype.isInfinity\",\"cmpn\",\"dbl\",\"Point.prototype.dbl\",\"aa\",\"bb\",\"redSub\",\"c\",\"nx\",\"nz\",\"add\",\"Point.prototype.add\",\"Error\",\"diffAdd\",\"Point.prototype.diffAdd\",\"diff\",\"da\",\"d\",\"cb\",\"redISub\",\"mul\",\"Point.prototype.mul\",\"k\",\"t\",\"clone\",\"bits\",\"iushrn\",\"push\",\"andln\",\"i\",\"length\",\"mulAdd\",\"Point.prototype.mulAdd\",\"jumlAdd\",\"Point.prototype.jumlAdd\",\"eq\",\"Point.prototype.eq\",\"other\",\"Point.prototype.normalize\",\"Point.prototype.getX\"]\n}\n"]