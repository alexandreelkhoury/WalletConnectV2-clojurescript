["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/cipher-base/index.js"],"~:js","shadow$provide[162]=function(S,A,V,q){function F(e){r.call(this);(this.hashMode=\"string\"===typeof e)?this[e]=this._finalOrDigest:this.final=this._finalOrDigest;this._final&&(this.__final=this._final,this._final=null);this._encoding=this._decoder=null}var G=A(111).Buffer,r=A(161).Transform,y=A(122).StringDecoder;A(76)(F,r);F.prototype.update=function(e,u,p){\"string\"===typeof e&&(e=G.from(e,u));e=this._update(e);if(this.hashMode)return this;p&&(e=this._toString(e,p));return e};F.prototype.setAutoPadding=\nfunction(){};F.prototype.getAuthTag=function(){throw Error(\"trying to get auth tag in unsupported state\");};F.prototype.setAuthTag=function(){throw Error(\"trying to set auth tag in unsupported state\");};F.prototype.setAAD=function(){throw Error(\"trying to set aad in unsupported state\");};F.prototype._transform=function(e,u,p){try{this.hashMode?this._update(e):this.push(this._update(e))}catch(l){var n=l}finally{p(n)}};F.prototype._flush=function(e){try{this.push(this.__final())}catch(p){var u=p}e(u)};\nF.prototype._finalOrDigest=function(e){var u=this.__final()||G.alloc(0);e&&(u=this._toString(u,e,!0));return u};F.prototype._toString=function(e,u,p){this._decoder||(this._decoder=new y(u),this._encoding=u);if(this._encoding!==u)throw Error(\"can't switch encodings\");e=this._decoder.write(e);p&&(e+=this._decoder.end());return e};V.exports=F}","~:source","shadow$provide[162] = function(global,require,module,exports) {\nvar Buffer = require('safe-buffer').Buffer\nvar Transform = require('stream').Transform\nvar StringDecoder = require('string_decoder').StringDecoder\nvar inherits = require('inherits')\n\nfunction CipherBase (hashMode) {\n  Transform.call(this)\n  this.hashMode = typeof hashMode === 'string'\n  if (this.hashMode) {\n    this[hashMode] = this._finalOrDigest\n  } else {\n    this.final = this._finalOrDigest\n  }\n  if (this._final) {\n    this.__final = this._final\n    this._final = null\n  }\n  this._decoder = null\n  this._encoding = null\n}\ninherits(CipherBase, Transform)\n\nCipherBase.prototype.update = function (data, inputEnc, outputEnc) {\n  if (typeof data === 'string') {\n    data = Buffer.from(data, inputEnc)\n  }\n\n  var outData = this._update(data)\n  if (this.hashMode) return this\n\n  if (outputEnc) {\n    outData = this._toString(outData, outputEnc)\n  }\n\n  return outData\n}\n\nCipherBase.prototype.setAutoPadding = function () {}\nCipherBase.prototype.getAuthTag = function () {\n  throw new Error('trying to get auth tag in unsupported state')\n}\n\nCipherBase.prototype.setAuthTag = function () {\n  throw new Error('trying to set auth tag in unsupported state')\n}\n\nCipherBase.prototype.setAAD = function () {\n  throw new Error('trying to set aad in unsupported state')\n}\n\nCipherBase.prototype._transform = function (data, _, next) {\n  var err\n  try {\n    if (this.hashMode) {\n      this._update(data)\n    } else {\n      this.push(this._update(data))\n    }\n  } catch (e) {\n    err = e\n  } finally {\n    next(err)\n  }\n}\nCipherBase.prototype._flush = function (done) {\n  var err\n  try {\n    this.push(this.__final())\n  } catch (e) {\n    err = e\n  }\n\n  done(err)\n}\nCipherBase.prototype._finalOrDigest = function (outputEnc) {\n  var outData = this.__final() || Buffer.alloc(0)\n  if (outputEnc) {\n    outData = this._toString(outData, outputEnc, true)\n  }\n  return outData\n}\n\nCipherBase.prototype._toString = function (value, enc, fin) {\n  if (!this._decoder) {\n    this._decoder = new StringDecoder(enc)\n    this._encoding = enc\n  }\n\n  if (this._encoding !== enc) throw new Error('can\\'t switch encodings')\n\n  var out = this._decoder.write(value)\n  if (fin) {\n    out += this._decoder.end()\n  }\n\n  return out\n}\n\nmodule.exports = CipherBase\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$inherits$inherits_browser","~$module$node_modules$stream_browserify$index","~$module$node_modules$safe_buffer$index","~$module$node_modules$string_decoder$lib$string_decoder"]],"~:properties",["^5",["setAutoPadding","_decoder","_encoding","__final","_toString","update","_transform","hashMode","_flush","final","getAuthTag","setAuthTag","_finalOrDigest","setAAD","_final"]],"~:compiled-at",1695041440818,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$cipher_base$index.js\",\n\"lineCount\":3,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/cipher-base/index.js\"],\n\"sourcesContent\":[\"shadow$provide[162] = function(global,require,module,exports) {\\nvar Buffer = require('safe-buffer').Buffer\\nvar Transform = require('stream').Transform\\nvar StringDecoder = require('string_decoder').StringDecoder\\nvar inherits = require('inherits')\\n\\nfunction CipherBase (hashMode) {\\n  Transform.call(this)\\n  this.hashMode = typeof hashMode === 'string'\\n  if (this.hashMode) {\\n    this[hashMode] = this._finalOrDigest\\n  } else {\\n    this.final = this._finalOrDigest\\n  }\\n  if (this._final) {\\n    this.__final = this._final\\n    this._final = null\\n  }\\n  this._decoder = null\\n  this._encoding = null\\n}\\ninherits(CipherBase, Transform)\\n\\nCipherBase.prototype.update = function (data, inputEnc, outputEnc) {\\n  if (typeof data === 'string') {\\n    data = Buffer.from(data, inputEnc)\\n  }\\n\\n  var outData = this._update(data)\\n  if (this.hashMode) return this\\n\\n  if (outputEnc) {\\n    outData = this._toString(outData, outputEnc)\\n  }\\n\\n  return outData\\n}\\n\\nCipherBase.prototype.setAutoPadding = function () {}\\nCipherBase.prototype.getAuthTag = function () {\\n  throw new Error('trying to get auth tag in unsupported state')\\n}\\n\\nCipherBase.prototype.setAuthTag = function () {\\n  throw new Error('trying to set auth tag in unsupported state')\\n}\\n\\nCipherBase.prototype.setAAD = function () {\\n  throw new Error('trying to set aad in unsupported state')\\n}\\n\\nCipherBase.prototype._transform = function (data, _, next) {\\n  var err\\n  try {\\n    if (this.hashMode) {\\n      this._update(data)\\n    } else {\\n      this.push(this._update(data))\\n    }\\n  } catch (e) {\\n    err = e\\n  } finally {\\n    next(err)\\n  }\\n}\\nCipherBase.prototype._flush = function (done) {\\n  var err\\n  try {\\n    this.push(this.__final())\\n  } catch (e) {\\n    err = e\\n  }\\n\\n  done(err)\\n}\\nCipherBase.prototype._finalOrDigest = function (outputEnc) {\\n  var outData = this.__final() || Buffer.alloc(0)\\n  if (outputEnc) {\\n    outData = this._toString(outData, outputEnc, true)\\n  }\\n  return outData\\n}\\n\\nCipherBase.prototype._toString = function (value, enc, fin) {\\n  if (!this._decoder) {\\n    this._decoder = new StringDecoder(enc)\\n    this._encoding = enc\\n  }\\n\\n  if (this._encoding !== enc) throw new Error('can\\\\'t switch encodings')\\n\\n  var out = this._decoder.write(value)\\n  if (fin) {\\n    out += this._decoder.end()\\n  }\\n\\n  return out\\n}\\n\\nmodule.exports = CipherBase\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"CipherBase\",\"hashMode\",\"Transform\",\"call\",\"_finalOrDigest\",\"final\",\"_final\",\"__final\",\"_encoding\",\"_decoder\",\"Buffer\",\"StringDecoder\",\"inherits\",\"prototype\",\"update\",\"CipherBase.prototype.update\",\"data\",\"inputEnc\",\"outputEnc\",\"from\",\"outData\",\"_update\",\"_toString\",\"setAutoPadding\",\"CipherBase.prototype.setAutoPadding\",\"getAuthTag\",\"CipherBase.prototype.getAuthTag\",\"Error\",\"setAuthTag\",\"CipherBase.prototype.setAuthTag\",\"setAAD\",\"CipherBase.prototype.setAAD\",\"_transform\",\"CipherBase.prototype._transform\",\"_\",\"next\",\"push\",\"e\",\"err\",\"_flush\",\"CipherBase.prototype._flush\",\"done\",\"CipherBase.prototype._finalOrDigest\",\"alloc\",\"CipherBase.prototype._toString\",\"value\",\"enc\",\"fin\",\"out\",\"write\",\"end\"]\n}\n"]