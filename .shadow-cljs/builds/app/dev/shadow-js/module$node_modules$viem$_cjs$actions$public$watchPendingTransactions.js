["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/viem/_cjs/actions/public/watchPendingTransactions.js"],"~:js","shadow$provide.module$node_modules$viem$_cjs$actions$public$watchPendingTransactions=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.watchPendingTransactions=void 0;const observe_js_1=require(\"module$node_modules$viem$_cjs$utils$observe\"),poll_js_1=require(\"module$node_modules$viem$_cjs$utils$poll\"),stringify_js_1=require(\"module$node_modules$viem$_cjs$utils$stringify\"),createPendingTransactionFilter_js_1=require(\"module$node_modules$viem$_cjs$actions$public$createPendingTransactionFilter\"),\ngetFilterChanges_js_1=require(\"module$node_modules$viem$_cjs$actions$public$getFilterChanges\"),uninstallFilter_js_1=require(\"module$node_modules$viem$_cjs$actions$public$uninstallFilter\");exports.watchPendingTransactions=function(client,{batch=!0,onError,onTransactions,poll:poll_,pollingInterval=client.pollingInterval}){const pollPendingTransactions=()=>{const observerId=(0,stringify_js_1.stringify)([\"watchPendingTransactions\",client.uid,batch,pollingInterval]);return(0,observe_js_1.observe)(observerId,\n{onTransactions,onError},emit=>{let filter;const unwatch=(0,poll_js_1.poll)(async()=>{try{if(!filter)try{filter=await (0,createPendingTransactionFilter_js_1.createPendingTransactionFilter)(client);return}catch(err){throw unwatch(),err;}const hashes=await (0,getFilterChanges_js_1.getFilterChanges)(client,{filter});if(0!==hashes.length)if(batch)emit.onTransactions(hashes);else hashes.forEach(hash=>emit.onTransactions([hash]))}catch(err){emit.onError?.(err)}},{emitOnBegin:!0,interval:pollingInterval});\nreturn async()=>{filter&&await (0,uninstallFilter_js_1.uninstallFilter)(client,{filter});unwatch()}})},subscribePendingTransactions=()=>{let active=!0,unsubscribe=()=>active=!1;(async()=>{try{const {unsubscribe:unsubscribe_}=await client.transport.subscribe({params:[\"newPendingTransactions\"],onData(data){active&&onTransactions([data.result])},onError(error){onError?.(error)}});unsubscribe=unsubscribe_;active||unsubscribe()}catch(err){onError?.(err)}})();return unsubscribe};return(\"undefined\"!==typeof poll_?\npoll_:\"webSocket\"!==client.transport.type)?pollPendingTransactions():subscribePendingTransactions()}}","~:source","shadow$provide[\"module$node_modules$viem$_cjs$actions$public$watchPendingTransactions\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.watchPendingTransactions = void 0;\nconst observe_js_1 = require(\"../../utils/observe.js\");\nconst poll_js_1 = require(\"../../utils/poll.js\");\nconst stringify_js_1 = require(\"../../utils/stringify.js\");\nconst createPendingTransactionFilter_js_1 = require(\"./createPendingTransactionFilter.js\");\nconst getFilterChanges_js_1 = require(\"./getFilterChanges.js\");\nconst uninstallFilter_js_1 = require(\"./uninstallFilter.js\");\nfunction watchPendingTransactions(client, { batch = true, onError, onTransactions, poll: poll_, pollingInterval = client.pollingInterval, }) {\n    const enablePolling = typeof poll_ !== 'undefined' ? poll_ : client.transport.type !== 'webSocket';\n    const pollPendingTransactions = () => {\n        const observerId = (0, stringify_js_1.stringify)([\n            'watchPendingTransactions',\n            client.uid,\n            batch,\n            pollingInterval,\n        ]);\n        return (0, observe_js_1.observe)(observerId, { onTransactions, onError }, (emit) => {\n            let filter;\n            const unwatch = (0, poll_js_1.poll)(async () => {\n                try {\n                    if (!filter) {\n                        try {\n                            filter = await (0, createPendingTransactionFilter_js_1.createPendingTransactionFilter)(client);\n                            return;\n                        }\n                        catch (err) {\n                            unwatch();\n                            throw err;\n                        }\n                    }\n                    const hashes = await (0, getFilterChanges_js_1.getFilterChanges)(client, { filter });\n                    if (hashes.length === 0)\n                        return;\n                    if (batch)\n                        emit.onTransactions(hashes);\n                    else\n                        hashes.forEach((hash) => emit.onTransactions([hash]));\n                }\n                catch (err) {\n                    emit.onError?.(err);\n                }\n            }, {\n                emitOnBegin: true,\n                interval: pollingInterval,\n            });\n            return async () => {\n                if (filter)\n                    await (0, uninstallFilter_js_1.uninstallFilter)(client, { filter });\n                unwatch();\n            };\n        });\n    };\n    const subscribePendingTransactions = () => {\n        let active = true;\n        let unsubscribe = () => (active = false);\n        (async () => {\n            try {\n                const { unsubscribe: unsubscribe_ } = await client.transport.subscribe({\n                    params: ['newPendingTransactions'],\n                    onData(data) {\n                        if (!active)\n                            return;\n                        const transaction = data.result;\n                        onTransactions([transaction]);\n                    },\n                    onError(error) {\n                        onError?.(error);\n                    },\n                });\n                unsubscribe = unsubscribe_;\n                if (!active)\n                    unsubscribe();\n            }\n            catch (err) {\n                onError?.(err);\n            }\n        })();\n        return unsubscribe;\n    };\n    return enablePolling\n        ? pollPendingTransactions()\n        : subscribePendingTransactions();\n}\nexports.watchPendingTransactions = watchPendingTransactions;\n//# sourceMappingURL=watchPendingTransactions.js.map\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$viem$_cjs$actions$public$uninstallFilter","~$shadow.js","~$module$node_modules$viem$_cjs$utils$stringify","~$module$node_modules$viem$_cjs$utils$observe","~$module$node_modules$viem$_cjs$actions$public$getFilterChanges","~$module$node_modules$viem$_cjs$actions$public$createPendingTransactionFilter","~$module$node_modules$viem$_cjs$utils$poll"]],"~:properties",["^5",["params","__esModule","onError","emitOnBegin","value","interval","watchPendingTransactions","filter","onTransactions"]],"~:compiled-at",1695111490356,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$viem$_cjs$actions$public$watchPendingTransactions.js\",\n\"lineCount\":5,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/viem/_cjs/actions/public/watchPendingTransactions.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$viem$_cjs$actions$public$watchPendingTransactions\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nexports.watchPendingTransactions = void 0;\\nconst observe_js_1 = require(\\\"../../utils/observe.js\\\");\\nconst poll_js_1 = require(\\\"../../utils/poll.js\\\");\\nconst stringify_js_1 = require(\\\"../../utils/stringify.js\\\");\\nconst createPendingTransactionFilter_js_1 = require(\\\"./createPendingTransactionFilter.js\\\");\\nconst getFilterChanges_js_1 = require(\\\"./getFilterChanges.js\\\");\\nconst uninstallFilter_js_1 = require(\\\"./uninstallFilter.js\\\");\\nfunction watchPendingTransactions(client, { batch = true, onError, onTransactions, poll: poll_, pollingInterval = client.pollingInterval, }) {\\n    const enablePolling = typeof poll_ !== 'undefined' ? poll_ : client.transport.type !== 'webSocket';\\n    const pollPendingTransactions = () => {\\n        const observerId = (0, stringify_js_1.stringify)([\\n            'watchPendingTransactions',\\n            client.uid,\\n            batch,\\n            pollingInterval,\\n        ]);\\n        return (0, observe_js_1.observe)(observerId, { onTransactions, onError }, (emit) => {\\n            let filter;\\n            const unwatch = (0, poll_js_1.poll)(async () => {\\n                try {\\n                    if (!filter) {\\n                        try {\\n                            filter = await (0, createPendingTransactionFilter_js_1.createPendingTransactionFilter)(client);\\n                            return;\\n                        }\\n                        catch (err) {\\n                            unwatch();\\n                            throw err;\\n                        }\\n                    }\\n                    const hashes = await (0, getFilterChanges_js_1.getFilterChanges)(client, { filter });\\n                    if (hashes.length === 0)\\n                        return;\\n                    if (batch)\\n                        emit.onTransactions(hashes);\\n                    else\\n                        hashes.forEach((hash) => emit.onTransactions([hash]));\\n                }\\n                catch (err) {\\n                    emit.onError?.(err);\\n                }\\n            }, {\\n                emitOnBegin: true,\\n                interval: pollingInterval,\\n            });\\n            return async () => {\\n                if (filter)\\n                    await (0, uninstallFilter_js_1.uninstallFilter)(client, { filter });\\n                unwatch();\\n            };\\n        });\\n    };\\n    const subscribePendingTransactions = () => {\\n        let active = true;\\n        let unsubscribe = () => (active = false);\\n        (async () => {\\n            try {\\n                const { unsubscribe: unsubscribe_ } = await client.transport.subscribe({\\n                    params: ['newPendingTransactions'],\\n                    onData(data) {\\n                        if (!active)\\n                            return;\\n                        const transaction = data.result;\\n                        onTransactions([transaction]);\\n                    },\\n                    onError(error) {\\n                        onError?.(error);\\n                    },\\n                });\\n                unsubscribe = unsubscribe_;\\n                if (!active)\\n                    unsubscribe();\\n            }\\n            catch (err) {\\n                onError?.(err);\\n            }\\n        })();\\n        return unsubscribe;\\n    };\\n    return enablePolling\\n        ? pollPendingTransactions()\\n        : subscribePendingTransactions();\\n}\\nexports.watchPendingTransactions = watchPendingTransactions;\\n//# sourceMappingURL=watchPendingTransactions.js.map\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"watchPendingTransactions\",\"observe_js_1\",\"poll_js_1\",\"stringify_js_1\",\"createPendingTransactionFilter_js_1\",\"getFilterChanges_js_1\",\"uninstallFilter_js_1\",\"client\",\"batch\",\"onError\",\"onTransactions\",\"poll_\",\"pollingInterval\",\"pollPendingTransactions\",\"observerId\",\"stringify\",\"uid\",\"observe\",\"emit\",\"filter\",\"unwatch\",\"poll\",\"createPendingTransactionFilter\",\"err\",\"hashes\",\"getFilterChanges\",\"length\",\"forEach\",\"hash\",\"emitOnBegin\",\"interval\",\"uninstallFilter\",\"subscribePendingTransactions\",\"active\",\"unsubscribe\",\"unsubscribe_\",\"transport\",\"subscribe\",\"params\",\"onData\",\"data\",\"result\",\"error\",\"enablePolling\",\"type\"]\n}\n"]