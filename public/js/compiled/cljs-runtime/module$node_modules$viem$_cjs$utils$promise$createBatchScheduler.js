shadow$provide.module$node_modules$viem$_cjs$utils$promise$createBatchScheduler=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.createBatchScheduler=void 0;const schedulerCache=new Map;exports.createBatchScheduler=function({fn,id,shouldSplitBatch,wait=0}){const exec=async()=>{const scheduler=schedulerCache.get(id)||[];schedulerCache.delete(id);const args$jscomp$0=scheduler.map(({args})=>args);0!==args$jscomp$0.length&&fn(args$jscomp$0).then(data=>
{scheduler.forEach(({pendingPromise},i)=>pendingPromise.resolve?.([data[i],data]))}).catch(err=>{scheduler.forEach(({pendingPromise})=>pendingPromise.reject?.(err))})},getBatchedArgs=()=>(schedulerCache.get(id)||[]).map(({args})=>args),setScheduler=item=>schedulerCache.set(id,[...(schedulerCache.get(id)||[]),item]);return{flush:()=>schedulerCache.delete(id),async schedule(args){const pendingPromise={},promise=new Promise((resolve,reject)=>{pendingPromise.resolve=resolve;pendingPromise.reject=reject});
shouldSplitBatch?.([...getBatchedArgs(),args])&&exec();if(0<(schedulerCache.get(id)||[]).length)return setScheduler({args,pendingPromise}),promise;setScheduler({args,pendingPromise});setTimeout(exec,wait);return promise}}}}
//# sourceMappingURL=module$node_modules$viem$_cjs$utils$promise$createBatchScheduler.js.map
