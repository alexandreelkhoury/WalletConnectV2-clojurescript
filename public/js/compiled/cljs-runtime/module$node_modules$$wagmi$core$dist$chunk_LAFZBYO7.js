shadow$provide.module$node_modules$$wagmi$core$dist$chunk_LAFZBYO7=function(global,require,module,exports){function configureChains(defaultChains,providers,{batch={multicall:{wait:32}},pollingInterval=4E3,rank,retryCount,retryDelay,stallTimeout}={}){if(!defaultChains.length)throw Error("must have at least one chain");let chains=[];const httpUrls={},wsUrls={};for(const chain of defaultChains){let configExists=!1;for(const provider of providers){const apiConfig=provider(chain);apiConfig&&(configExists=
!0,chains.some(({id})=>id===chain.id)||(chains=[...chains,apiConfig.chain]),httpUrls[chain.id]=[...(httpUrls[chain.id]||[]),...apiConfig.rpcUrls.http],apiConfig.rpcUrls.webSocket&&(wsUrls[chain.id]=[...(wsUrls[chain.id]||[]),...apiConfig.rpcUrls.webSocket]))}if(!configExists)throw Error([`Could not find valid provider configuration for chain "${chain.name}".
`,"You may need to add `jsonRpcProvider` to `configureChains` with the chain's RPC URLs.\nRead more: https://wagmi.sh/core/providers/jsonRpc"].join("\n"));}return{chains,publicClient:({chainId})=>{var activeChain=chains.find(x=>x.id===chainId)??defaultChains[0];const chainHttpUrls=httpUrls[activeChain.id];if(!chainHttpUrls||!chainHttpUrls[0])throw Error(`No providers configured for chain "${activeChain.id}"`);activeChain=(0,require$viem.createPublicClient)({batch,chain:activeChain,transport:(0,require$viem.fallback)(chainHttpUrls.map(url=>
(0,require$viem.http)(url,{timeout:stallTimeout})),{rank,retryCount,retryDelay}),pollingInterval});return Object.assign(activeChain,{chains})},webSocketPublicClient:({chainId})=>{var activeChain=chains.find(x=>x.id===chainId)??defaultChains[0];const chainWsUrls=wsUrls[activeChain.id];if(chainWsUrls&&chainWsUrls[0])return activeChain=(0,require$viem.createPublicClient)({batch,chain:activeChain,transport:(0,require$viem.fallback)(chainWsUrls.map(url=>(0,require$viem.webSocket)(url,{timeout:stallTimeout})),
{rank,retryCount,retryDelay}),pollingInterval}),Object.assign(activeChain,{chains})}}}function deepEqual(a,b){if(a===b)return!0;if(a&&b&&"object"===typeof a&&"object"===typeof b){if(a.constructor!==b.constructor)return!1;let i;if(Array.isArray(a)&&Array.isArray(b)){var length=a.length;if(length!=b.length)return!1;for(i=length;0!==i--;)if(!deepEqual(a[i],b[i]))return!1;return!0}if(a.valueOf!==Object.prototype.valueOf)return a.valueOf()===b.valueOf();if(a.toString!==Object.prototype.toString)return a.toString()===
b.toString();const keys=Object.keys(a);length=keys.length;if(length!==Object.keys(b).length)return!1;for(i=length;0!==i--;)if(!Object.prototype.hasOwnProperty.call(b,keys[i]))return!1;for(i=length;0!==i--;)if((length=keys[i])&&!deepEqual(a[length],b[length]))return!1;return!0}return a!==a&&b!==b}function deserialize(cachedString){cachedString=JSON.parse(cachedString);return findAndReplace(cachedString,{find:data=>"string"===typeof data&&data.startsWith("#bigint."),replace:data=>BigInt(data.replace("#bigint.",
""))})}function getCallParameters(args){return{accessList:args.accessList,account:args.account,blockNumber:args.blockNumber,blockTag:args.blockTag,data:args.data,gas:args.gas,gasPrice:args.gasPrice,maxFeePerGas:args.maxFeePerGas,maxPriorityFeePerGas:args.maxPriorityFeePerGas,nonce:args.nonce,to:args.to,value:args.value}}function getSendTransactionParameters(args){return{accessList:args.accessList,account:args.account,data:args.data,gas:args.gas,gasPrice:args.gasPrice,maxFeePerGas:args.maxFeePerGas,
maxPriorityFeePerGas:args.maxPriorityFeePerGas,nonce:args.nonce,to:args.to,value:args.value}}function getUnit(unit){return"number"===typeof unit?unit:"wei"===unit?0:Math.abs(require$viem.weiUnits[unit])}function getCutoff(array,value){const {length}=array;for(let index=0;index<length;++index)if(array[index]===value)return index+1;return 0}function createReplacer(replacer,circularReplacer){const hasReplacer="function"===typeof replacer,hasCircularReplacer="function"===typeof circularReplacer,cache=
[],keys=[];return function(key,value){if("object"===typeof value)if(cache.length){var thisCutoff=getCutoff(cache,this);0===thisCutoff?cache[cache.length]=this:(cache.splice(thisCutoff),keys.splice(thisCutoff));keys[keys.length]=key;thisCutoff=getCutoff(cache,value);if(0!==thisCutoff)return hasCircularReplacer?circularReplacer.call(this,key,value,keys.slice(0,thisCutoff).join(".")||"."):`[ref=${keys.slice(0,thisCutoff).join(".")||"."}]`}else cache[0]=value,keys[0]=key;return hasReplacer?replacer.call(this,
key,value):value}}function serialize(value,replacer,indent,circularReplacer){return JSON.stringify(value,createReplacer((key,value_)=>{value_="bigint"===typeof value_?`#bigint.${value_.toString()}`:value_;return replacer?.(key,value_)||value_},circularReplacer),indent??void 0)}function createStorage({deserialize:deserialize2=deserialize,key:prefix="wagmi",serialize:serialize2=serialize,storage}){return{...storage,getItem:(key,defaultState=null)=>{key=storage.getItem(`${prefix}.${key}`);try{return key?
deserialize2(key):defaultState}catch(error){return console.warn(error),defaultState}},setItem:(key,value)=>{if(null===value)storage.removeItem(`${prefix}.${key}`);else try{storage.setItem(`${prefix}.${key}`,serialize2(value))}catch(err){console.error(err)}},removeItem:key=>storage.removeItem(`${prefix}.${key}`)}}function createConfig(args){return config=args=new Config(args)}function getConfig(){if(!config)throw Error("No wagmi config found. Ensure you have set up a config: https://wagmi.sh/react/config");
return config}async function connect({chainId,connector}){const config2=getConfig(),activeConnector=config2.connector;if(activeConnector&&connector.id===activeConnector.id)throw new ConnectorAlreadyConnectedError;try{config2.setState(x=>({...x,status:"connecting"}));const data=await connector.connect({chainId});config2.setLastUsedConnector(connector.id);config2.setState(x=>({...x,connector,chains:connector?.chains,data,status:"connected"}));config2.storage.setItem("connected",!0);return{...data,connector}}catch(err){throw config2.setState(x=>
({...x,status:x.connector?"connected":"disconnected"})),err;}}async function disconnect(){const config2=getConfig();config2.connector&&await config2.connector.disconnect();config2.clearState();config2.storage.removeItem("connected")}async function fetchToken({address,chainId,formatUnits:unit=18}){async function fetchToken_({abi}){abi={address,abi,chainId};const [decimals,name,symbol,totalSupply]=await readContracts({allowFailure:!1,contracts:[{...abi,functionName:"decimals"},{...abi,functionName:"name"},
{...abi,functionName:"symbol"},{...abi,functionName:"totalSupply"}]});return{address,decimals,name,symbol,totalSupply:{formatted:(0,require$viem.formatUnits)(totalSupply,getUnit(unit)),value:totalSupply}}}try{return await fetchToken_({abi:erc20ABI})}catch(err){if(err instanceof require$viem.ContractFunctionExecutionError){const {name,symbol,...rest}=await fetchToken_({abi:erc20ABI_bytes32});return{name:(0,require$viem.hexToString)((0,require$viem.trim)(name,{dir:"right"})),symbol:(0,require$viem.hexToString)((0,require$viem.trim)(symbol,
{dir:"right"})),...rest}}throw err;}}function getPublicClient({chainId}={}){const config2=getConfig();return chainId?config2.getPublicClient({chainId})||config2.publicClient:config2.publicClient}async function getWalletClient({chainId}={}){return await getConfig().connector?.getWalletClient?.({chainId})||null}function getWebSocketPublicClient({chainId}={}){const config2=getConfig();return chainId?config2.getWebSocketPublicClient({chainId})||config2.webSocketPublicClient:config2.webSocketPublicClient}
function watchPublicClient(args,callback){return getConfig().subscribe(({publicClient})=>publicClient,async()=>callback(getPublicClient(args)))}function watchWalletClient({chainId},callback){return getConfig().subscribe(({data,connector})=>({account:data?.account,chainId:data?.chain?.id,connector}),async({chainId:chainId_})=>{if(!chainId||!chainId_||chainId===chainId_)return chainId_=await getWalletClient({chainId}),getConfig().connector?callback(chainId_):callback(null)},{equalityFn:require$zustand_SLASH_shallow.shallow})}
function watchWebSocketPublicClient(args,callback){return getConfig().subscribe(({webSocketPublicClient})=>webSocketPublicClient,async()=>callback(getWebSocketPublicClient(args)))}async function prepareWriteContract({abi,address,args,chainId,functionName,walletClient:walletClient_,...config2}){const publicClient=getPublicClient({chainId});walletClient_=walletClient_??await getWalletClient({chainId});if(!walletClient_)throw new require$_CIRCA_wagmi_SLASH_connectors.ConnectorNotFoundError;chainId&&
assertActiveChain({chainId});const {account,accessList,blockNumber,blockTag,gas,gasPrice,maxFeePerGas,maxPriorityFeePerGas,nonce,value}=getCallParameters(config2),{result,request}=await publicClient.simulateContract({abi,address,functionName,args,account:account||walletClient_.account,accessList,blockNumber,blockTag,gas,gasPrice,maxFeePerGas,maxPriorityFeePerGas,nonce,value});abi=abi.filter(abiItem=>"name"in abiItem&&abiItem.name===functionName);return{mode:"prepared",request:{...request,abi,chainId},
result}}function getContract({address,abi,chainId,walletClient}){chainId=getPublicClient({chainId});return(0,require$viem.getContract)({address,abi,publicClient:chainId,walletClient})}async function multicall({chainId,contracts,blockNumber,blockTag,...args}){const publicClient=getPublicClient({chainId});if(!publicClient.chains)throw new ConfigChainsNotFound;if(chainId&&publicClient.chain.id!==chainId)throw new ChainNotConfiguredError({chainId});return publicClient.multicall({allowFailure:args.allowFailure??
!0,blockNumber,blockTag,contracts})}async function readContract({address,account,chainId,abi,args,functionName,blockNumber,blockTag}){return getPublicClient({chainId}).readContract({abi,address,account,functionName,args,blockNumber,blockTag})}async function readContracts({contracts,blockNumber,blockTag,...args}){const {allowFailure=!0}=args;try{const publicClient=getPublicClient(),contractsByChainId=contracts.reduce((contracts2,contract,index)=>{const chainId=contract.chainId??publicClient.chain.id;
return{...contracts2,[chainId]:[...(contracts2[chainId]||[]),{contract,index}]}},{}),multicallResults=(await Promise.all((()=>Object.entries(contractsByChainId).map(([chainId,contracts2])=>multicall({allowFailure,chainId:parseInt(chainId),contracts:contracts2.map(({contract})=>contract),blockNumber,blockTag})))())).flat(),resultIndexes=Object.values(contractsByChainId).flatMap(contracts2=>contracts2.map(({index})=>index));return multicallResults.reduce((results,result,index)=>{results&&(results[resultIndexes[index]]=
result);return results},[])}catch(err){if(err instanceof require$viem.ContractFunctionExecutionError)throw err;args=()=>contracts.map(contract=>readContract({...contract,blockNumber,blockTag}));return allowFailure?(await Promise.allSettled(args())).map(result=>"fulfilled"===result.status?{result:result.value,status:"success"}:{error:result.reason,result:void 0,status:"failure"}):await Promise.all(args())}}function watchContractEvent({address,abi,chainId,eventName},callback){let unwatch;const watchEvent=
async()=>{unwatch&&unwatch();unwatch=(getWebSocketPublicClient({chainId})||getPublicClient({chainId})).watchContractEvent({address,abi,eventName,onLogs:callback})};watchEvent();const unsubscribe=getConfig().subscribe(({publicClient,webSocketPublicClient})=>({publicClient,webSocketPublicClient}),watchEvent,{equalityFn:require$zustand_SLASH_shallow.shallow});return()=>{unwatch?.();unsubscribe()}}function watchBlockNumber(args,callback){let unwatch;const createListener=publicClient=>{unwatch&&unwatch();
unwatch=publicClient.watchBlockNumber({onBlockNumber:callback,emitOnBegin:!0,poll:!0})},publicClient_=getWebSocketPublicClient({chainId:args.chainId})??getPublicClient({chainId:args.chainId});args.listen&&createListener(publicClient_);const unsubscribe=getConfig().subscribe(({publicClient,webSocketPublicClient})=>({publicClient,webSocketPublicClient}),async({publicClient,webSocketPublicClient})=>{publicClient=webSocketPublicClient??publicClient;args.listen&&!args.chainId&&publicClient&&createListener(publicClient)},
{equalityFn:require$zustand_SLASH_shallow.shallow});return()=>{unsubscribe();unwatch?.()}}function watchMulticall(args,callback){const config2=getConfig(),handleChange=async()=>callback(await multicall(args)),unwatch=args.listenToBlock?watchBlockNumber({listen:!0},handleChange):void 0,unsubscribe=config2.subscribe(({publicClient})=>publicClient,handleChange);return()=>{unsubscribe();unwatch?.()}}function watchReadContract(args,callback){const config2=getConfig(),handleChange=async()=>callback(await readContract(args)),
unwatch=args.listenToBlock?watchBlockNumber({listen:!0},handleChange):void 0,unsubscribe=config2.subscribe(({publicClient})=>publicClient,handleChange);return()=>{unsubscribe();unwatch?.()}}function watchReadContracts(args,callback){const config2=getConfig(),handleChange=async()=>callback(await readContracts(args)),unwatch=args.listenToBlock?watchBlockNumber({listen:!0},handleChange):void 0,unsubscribe=config2.subscribe(({publicClient})=>publicClient,handleChange);return()=>{unsubscribe();unwatch?.()}}
async function writeContract(config2){const walletClient=await getWalletClient({chainId:config2.chainId});if(!walletClient)throw new require$_CIRCA_wagmi_SLASH_connectors.ConnectorNotFoundError;config2.chainId&&assertActiveChain({chainId:config2.chainId});if("prepared"===config2.mode)config2=config2.request;else{const {chainId:_,mode:__,...args}=config2;config2=(await prepareWriteContract(args)).request}return{hash:await walletClient.writeContract({...config2,chain:null})}}async function fetchBalance({address,
chainId,formatUnits:unit,token}){var config2=getConfig();const publicClient=getPublicClient({chainId});if(token){config2=async({abi})=>{abi={abi,address:token,chainId};const [value2,decimals,symbol]=await readContracts({allowFailure:!1,contracts:[{...abi,functionName:"balanceOf",args:[address]},{...abi,functionName:"decimals"},{...abi,functionName:"symbol"}]});return{decimals,formatted:(0,require$viem.formatUnits)(value2??"0",getUnit(unit??decimals)),symbol,value:value2}};try{return await config2({abi:erc20ABI})}catch(err){if(err instanceof
require$viem.ContractFunctionExecutionError){const {symbol,...rest}=await config2({abi:erc20ABI_bytes32});return{symbol:(0,require$viem.hexToString)((0,require$viem.trim)(symbol,{dir:"right"})),...rest}}throw err;}}var chains=[...(config2.publicClient.chains||[]),...(config2.chains??[])];config2=await publicClient.getBalance({address});chains=chains.find(x=>x.id===publicClient.chain.id);return{decimals:chains?.nativeCurrency.decimals??18,formatted:(0,require$viem.formatUnits)(config2??"0",getUnit(unit??
18)),symbol:chains?.nativeCurrency.symbol??"ETH",value:config2}}function getAccount(){const {data,connector,status}=getConfig();switch(status){case "connected":return{address:data?.account,connector,isConnected:!0,isConnecting:!1,isDisconnected:!1,isReconnecting:!1,status};case "reconnecting":return{address:data?.account,connector,isConnected:!!data?.account,isConnecting:!1,isDisconnected:!1,isReconnecting:!0,status};case "connecting":return{address:data?.account,connector,isConnected:!1,isConnecting:!0,
isDisconnected:!1,isReconnecting:!1,status};case "disconnected":return{address:void 0,connector:void 0,isConnected:!1,isConnecting:!1,isDisconnected:!0,isReconnecting:!1,status}}}function getNetwork(){const config2=getConfig(),chainId=config2.data?.chain?.id,activeChains=config2.chains??[],activeChain=[...(config2.publicClient?.chains||[]),...activeChains].find(x=>x.id===chainId)??{id:chainId,name:`Chain ${chainId}`,network:`${chainId}`,nativeCurrency:{name:"Ether",decimals:18,symbol:"ETH"},rpcUrls:{default:{http:[""]},
public:{http:[""]}}};return{chain:chainId?{...activeChain,...config2.data?.chain,id:chainId}:void 0,chains:activeChains}}async function signMessage(args){const walletClient=await getWalletClient();if(!walletClient)throw new require$_CIRCA_wagmi_SLASH_connectors.ConnectorNotFoundError;return await walletClient.signMessage({message:args.message})}async function signTypedData({domain,message,primaryType,types}){const walletClient=await getWalletClient();if(!walletClient)throw new require$_CIRCA_wagmi_SLASH_connectors.ConnectorNotFoundError;
const {chainId}=domain;chainId&&assertActiveChain({chainId});return walletClient.signTypedData({message,primaryType,types,domain})}async function switchNetwork({chainId}){const {connector}=getConfig();if(!connector)throw new require$_CIRCA_wagmi_SLASH_connectors.ConnectorNotFoundError;if(!connector.switchChain)throw new SwitchChainNotSupportedError({connector});return connector.switchChain(chainId)}function watchAccount(callback,{selector=x=>x}={}){return getConfig().subscribe(({data,connector,status})=>
selector({address:data?.account,connector,status}),()=>callback(getAccount()),{equalityFn:require$zustand_SLASH_shallow.shallow})}function watchNetwork(callback,{selector=x=>x}={}){return getConfig().subscribe(({data,chains})=>selector({chainId:data?.chain?.id,chains}),()=>callback(getNetwork()),{equalityFn:require$zustand_SLASH_shallow.shallow})}async function fetchEnsAddress({chainId,name}){chainId=await getPublicClient({chainId}).getEnsAddress({name:(0,require$viem_SLASH_ens.normalize)(name)});
try{return"0x0000000000000000000000000000000000000000"===chainId?null:chainId?(0,require$viem.getAddress)(chainId):null}catch(_error){return null}}async function fetchEnsAvatar({name,chainId}){return await getPublicClient({chainId}).getEnsAvatar({name:(0,require$viem_SLASH_ens.normalize)(name)})}async function fetchEnsName({address,chainId}){return getPublicClient({chainId}).getEnsName({address:(0,require$viem.getAddress)(address)})}async function fetchEnsResolver({chainId,name}){return await getPublicClient({chainId}).getEnsResolver({name:(0,require$viem_SLASH_ens.normalize)(name)})}
async function fetchBlockNumber({chainId}={}){return await getPublicClient({chainId}).getBlockNumber()}async function fetchFeeData({chainId,formatUnits:units="gwei"}={}){var publicClient=getPublicClient({chainId});const block=await publicClient.getBlock();chainId=null;try{chainId=await publicClient.getGasPrice()}catch{}let maxFeePerGas=publicClient=null,maxPriorityFeePerGas=null;block?.baseFeePerGas&&(publicClient=block.baseFeePerGas,maxPriorityFeePerGas=(0,require$viem.parseGwei)("1"),maxFeePerGas=
2n*block.baseFeePerGas+maxPriorityFeePerGas);units=getUnit(units);units={gasPrice:chainId?(0,require$viem.formatUnits)(chainId,units):null,maxFeePerGas:maxFeePerGas?(0,require$viem.formatUnits)(maxFeePerGas,units):null,maxPriorityFeePerGas:maxPriorityFeePerGas?(0,require$viem.formatUnits)(maxPriorityFeePerGas,units):null};return{lastBaseFeePerGas:publicClient,gasPrice:chainId,maxFeePerGas,maxPriorityFeePerGas,formatted:units}}async function fetchTransaction({chainId,hash}){return getPublicClient({chainId}).getTransaction({hash})}
async function prepareSendTransaction({accessList,account,chainId,data,gas:gas_,gasPrice,maxFeePerGas,maxPriorityFeePerGas,nonce,to:to_,value,walletClient:walletClient_}){const publicClient=getPublicClient({chainId});walletClient_=walletClient_??await getWalletClient({chainId});if(!walletClient_)throw new require$_CIRCA_wagmi_SLASH_connectors.ConnectorNotFoundError;chainId&&assertActiveChain({chainId});if((to_=(to_&&!(0,require$viem.isAddress)(to_)?await fetchEnsAddress({name:to_}):to_)||void 0)&&
!(0,require$viem.isAddress)(to_))throw Error("Invalid address");gas_="undefined"===typeof gas_?await publicClient.estimateGas({accessList,account:walletClient_.account,data,gas:gas_??void 0,gasPrice,maxFeePerGas,maxPriorityFeePerGas,nonce,to:to_,value}):gas_||void 0;return{accessList,account,data,gas:gas_,gasPrice,maxFeePerGas,maxPriorityFeePerGas,mode:"prepared",nonce,to:to_,value,...(chainId?{chainId}:{})}}async function sendTransaction({accessList,account,chainId,data,gas,gasPrice,maxFeePerGas,
maxPriorityFeePerGas,mode,nonce,to,value}){const walletClient=await getWalletClient({chainId});if(!walletClient)throw new require$_CIRCA_wagmi_SLASH_connectors.ConnectorNotFoundError;chainId&&assertActiveChain({chainId});accessList="prepared"===mode?{account,accessList,chain:null,data,gas,gasPrice,maxFeePerGas,maxPriorityFeePerGas,nonce,to,value}:await prepareSendTransaction({accessList,account,chainId,data,gas:gas||null,gasPrice,maxFeePerGas,maxPriorityFeePerGas,nonce,to,value});return{hash:await walletClient.sendTransaction({...accessList,
chain:null})}}async function waitForTransaction({chainId,confirmations=1,hash,onReplaced,timeout=0}){chainId=getPublicClient({chainId});confirmations=await chainId.waitForTransactionReceipt({hash,confirmations,onReplaced,timeout});if("reverted"===confirmations.status)throw confirmations=await chainId.getTransaction({hash:confirmations.transactionHash}),chainId=await chainId.call({...confirmations,gasPrice:"eip1559"!==confirmations.type?confirmations.gasPrice:void 0,maxFeePerGas:"eip1559"===confirmations.type?
confirmations.maxFeePerGas:void 0,maxPriorityFeePerGas:"eip1559"===confirmations.type?confirmations.maxPriorityFeePerGas:void 0}),chainId=(0,require$viem.hexToString)(`0x${chainId.substring(138)}`),Error(chainId);return confirmations}function watchPendingTransactions(args,callback){let unwatch;const createListener=publicClient=>{unwatch&&unwatch();unwatch=publicClient.watchPendingTransactions({onTransactions:callback,poll:!0})},publicClient_=getWebSocketPublicClient({chainId:args.chainId})??getPublicClient({chainId:args.chainId});
createListener(publicClient_);const unsubscribe=getConfig().subscribe(({publicClient,webSocketPublicClient})=>({publicClient,webSocketPublicClient}),async({publicClient,webSocketPublicClient})=>{publicClient=webSocketPublicClient??publicClient;!args.chainId&&publicClient&&createListener(publicClient)},{equalityFn:require$zustand_SLASH_shallow.shallow});return()=>{unsubscribe();unwatch?.()}}function assertActiveChain({chainId}){const {chain:activeChain,chains}=getNetwork(),activeChainId=activeChain?.id;
if(activeChainId&&chainId!==activeChainId)throw new ChainMismatchError({activeChain:chains.find(x=>x.id===activeChainId)?.name??`Chain ${activeChainId}`,targetChain:chains.find(x=>x.id===chainId)?.name??`Chain ${chainId}`});}Object.defineProperties(exports,{__esModule:{enumerable:!0,value:!0},ChainMismatchError:{enumerable:!0,get:function(){return ChainMismatchError}},ChainNotConfiguredError:{enumerable:!0,get:function(){return ChainNotConfiguredError}},Config:{enumerable:!0,get:function(){return Config}},
ConfigChainsNotFound:{enumerable:!0,get:function(){return ConfigChainsNotFound}},ConnectorAlreadyConnectedError:{enumerable:!0,get:function(){return ConnectorAlreadyConnectedError}},ConnectorNotFoundError:{enumerable:!0,get:function(){return require$_CIRCA_wagmi_SLASH_connectors.ConnectorNotFoundError}},SwitchChainNotSupportedError:{enumerable:!0,get:function(){return SwitchChainNotSupportedError}},configureChains:{enumerable:!0,get:function(){return configureChains}},connect:{enumerable:!0,get:function(){return connect}},
createConfig:{enumerable:!0,get:function(){return createConfig}},createStorage:{enumerable:!0,get:function(){return createStorage}},deepEqual:{enumerable:!0,get:function(){return deepEqual}},deserialize:{enumerable:!0,get:function(){return deserialize}},disconnect:{enumerable:!0,get:function(){return disconnect}},erc20ABI:{enumerable:!0,get:function(){return erc20ABI}},erc4626ABI:{enumerable:!0,get:function(){return erc4626ABI}},erc721ABI:{enumerable:!0,get:function(){return erc721ABI}},fetchBalance:{enumerable:!0,
get:function(){return fetchBalance}},fetchBlockNumber:{enumerable:!0,get:function(){return fetchBlockNumber}},fetchEnsAddress:{enumerable:!0,get:function(){return fetchEnsAddress}},fetchEnsAvatar:{enumerable:!0,get:function(){return fetchEnsAvatar}},fetchEnsName:{enumerable:!0,get:function(){return fetchEnsName}},fetchEnsResolver:{enumerable:!0,get:function(){return fetchEnsResolver}},fetchFeeData:{enumerable:!0,get:function(){return fetchFeeData}},fetchToken:{enumerable:!0,get:function(){return fetchToken}},
fetchTransaction:{enumerable:!0,get:function(){return fetchTransaction}},getAccount:{enumerable:!0,get:function(){return getAccount}},getCallParameters:{enumerable:!0,get:function(){return getCallParameters}},getConfig:{enumerable:!0,get:function(){return getConfig}},getContract:{enumerable:!0,get:function(){return getContract}},getNetwork:{enumerable:!0,get:function(){return getNetwork}},getPublicClient:{enumerable:!0,get:function(){return getPublicClient}},getSendTransactionParameters:{enumerable:!0,
get:function(){return getSendTransactionParameters}},getUnit:{enumerable:!0,get:function(){return getUnit}},getWalletClient:{enumerable:!0,get:function(){return getWalletClient}},getWebSocketPublicClient:{enumerable:!0,get:function(){return getWebSocketPublicClient}},multicall:{enumerable:!0,get:function(){return multicall}},noopStorage:{enumerable:!0,get:function(){return noopStorage}},prepareSendTransaction:{enumerable:!0,get:function(){return prepareSendTransaction}},prepareWriteContract:{enumerable:!0,
get:function(){return prepareWriteContract}},readContract:{enumerable:!0,get:function(){return readContract}},readContracts:{enumerable:!0,get:function(){return readContracts}},sendTransaction:{enumerable:!0,get:function(){return sendTransaction}},serialize:{enumerable:!0,get:function(){return serialize}},signMessage:{enumerable:!0,get:function(){return signMessage}},signTypedData:{enumerable:!0,get:function(){return signTypedData}},switchNetwork:{enumerable:!0,get:function(){return switchNetwork}},
waitForTransaction:{enumerable:!0,get:function(){return waitForTransaction}},watchAccount:{enumerable:!0,get:function(){return watchAccount}},watchBlockNumber:{enumerable:!0,get:function(){return watchBlockNumber}},watchContractEvent:{enumerable:!0,get:function(){return watchContractEvent}},watchMulticall:{enumerable:!0,get:function(){return watchMulticall}},watchNetwork:{enumerable:!0,get:function(){return watchNetwork}},watchPendingTransactions:{enumerable:!0,get:function(){return watchPendingTransactions}},
watchPublicClient:{enumerable:!0,get:function(){return watchPublicClient}},watchReadContract:{enumerable:!0,get:function(){return watchReadContract}},watchReadContracts:{enumerable:!0,get:function(){return watchReadContracts}},watchWalletClient:{enumerable:!0,get:function(){return watchWalletClient}},watchWebSocketPublicClient:{enumerable:!0,get:function(){return watchWebSocketPublicClient}},writeContract:{enumerable:!0,get:function(){return writeContract}}});var require$_DOT__SLASH_chunk_BVC4KGLQ_DOT_js=
require("module$node_modules$$wagmi$core$dist$chunk_BVC4KGLQ"),require$_DOT__SLASH_chunk_MQXBDTVK_DOT_js=require("module$node_modules$$wagmi$core$dist$chunk_MQXBDTVK"),require$viem=require("module$node_modules$viem$_cjs$index"),require$_CIRCA_wagmi_SLASH_connectors=require("module$node_modules$$wagmi$connectors$dist$index"),require$zustand_SLASH_middleware=require("module$node_modules$zustand$middleware"),require$zustand_SLASH_vanilla=require("module$node_modules$zustand$vanilla"),require$zustand_SLASH_shallow=
require("module$node_modules$zustand$shallow"),require$viem_SLASH_ens=require("module$node_modules$viem$_cjs$ens$index"),ChainMismatchError=class extends Error{constructor({activeChain,targetChain}){super(`Chain mismatch: Expected "${targetChain}", received "${activeChain}".`);this.name="ChainMismatchError"}},ChainNotConfiguredError=class extends Error{constructor({chainId,connectorId}){super(`Chain "${chainId}" not configured${connectorId?` for connector "${connectorId}"`:""}.`);this.name="ChainNotConfigured"}},
ConnectorAlreadyConnectedError=class extends Error{constructor(){super(...arguments);this.name="ConnectorAlreadyConnectedError";this.message="Connector already connected"}},ConfigChainsNotFound=class extends Error{constructor(){super(...arguments);this.name="ConfigChainsNotFound";this.message="No chains were found on the wagmi config. Some functions that require a chain may not work."}},SwitchChainNotSupportedError=class extends Error{constructor({connector}){super(`"${connector.name}" does not support programmatic chain switching.`);
this.name="SwitchChainNotSupportedError"}},findAndReplace=(cacheRef,{find,replace})=>cacheRef&&find(cacheRef)?replace(cacheRef):"object"!==typeof cacheRef?cacheRef:Array.isArray(cacheRef)?cacheRef.map(item=>findAndReplace(item,{find,replace})):cacheRef instanceof Object?Object.entries(cacheRef).reduce((curr,[key,value])=>({...curr,[key]:findAndReplace(value,{find,replace})}),{}):cacheRef,noopStorage={getItem:_key=>"",setItem:(_key,_value)=>null,removeItem:_key=>null},Config=class{constructor({autoConnect=
!1,connectors=[new require$_DOT__SLASH_chunk_BVC4KGLQ_DOT_js.InjectedConnector],publicClient,storage=createStorage({storage:"undefined"!==typeof window?window.localStorage:noopStorage}),logger={warn:console.warn},webSocketPublicClient}){(0,require$_DOT__SLASH_chunk_MQXBDTVK_DOT_js.__privateAdd)(this,_addEffects);this.publicClients=new Map;this.webSocketPublicClients=new Map;(0,require$_DOT__SLASH_chunk_MQXBDTVK_DOT_js.__privateAdd)(this,_isAutoConnecting,void 0);(0,require$_DOT__SLASH_chunk_MQXBDTVK_DOT_js.__privateAdd)(this,
_lastUsedConnector,void 0);this.args={autoConnect,connectors,logger,publicClient,storage,webSocketPublicClient};let status="disconnected",chainId;if(autoConnect)try{const data=storage.getItem("store")?.state?.data;status=data?.account?"reconnecting":"connecting";chainId=data?.chain?.id}catch(_error){}const connectors_="function"===typeof connectors?connectors():connectors;connectors_.forEach(connector=>connector.setStorage(storage));this.store=(0,require$zustand_SLASH_vanilla.createStore)((0,require$zustand_SLASH_middleware.subscribeWithSelector)((0,require$zustand_SLASH_middleware.persist)(()=>
({connectors:connectors_,publicClient:this.getPublicClient({chainId}),status,webSocketPublicClient:this.getWebSocketPublicClient({chainId})}),{name:"store",storage,partialize:state=>({...(autoConnect&&{data:{account:state?.data?.account,chain:state?.data?.chain}}),chains:state?.chains}),version:2})));this.storage=storage;(0,require$_DOT__SLASH_chunk_MQXBDTVK_DOT_js.__privateSet)(this,_lastUsedConnector,storage?.getItem("wallet"));(0,require$_DOT__SLASH_chunk_MQXBDTVK_DOT_js.__privateMethod)(this,
_addEffects,addEffects_fn).call(this);autoConnect&&"undefined"!==typeof window&&setTimeout(async()=>await this.autoConnect(),0)}get chains(){return this.store.getState().chains}get connectors(){return this.store.getState().connectors}get connector(){return this.store.getState().connector}get data(){return this.store.getState().data}get error(){return this.store.getState().error}get lastUsedChainId(){return this.data?.chain?.id}get publicClient(){return this.store.getState().publicClient}get status(){return this.store.getState().status}get subscribe(){return this.store.subscribe}get webSocketPublicClient(){return this.store.getState().webSocketPublicClient}setState(updater){updater=
"function"===typeof updater?updater(this.store.getState()):updater;this.store.setState(updater,!0)}clearState(){this.setState(x=>({...x,chains:void 0,connector:void 0,data:void 0,error:void 0,status:"disconnected"}))}async destroy(){this.connector&&await this.connector.disconnect?.();(0,require$_DOT__SLASH_chunk_MQXBDTVK_DOT_js.__privateSet)(this,_isAutoConnecting,!1);this.clearState();this.store.destroy()}async autoConnect(){if(!(0,require$_DOT__SLASH_chunk_MQXBDTVK_DOT_js.__privateGet)(this,_isAutoConnecting)){(0,require$_DOT__SLASH_chunk_MQXBDTVK_DOT_js.__privateSet)(this,
_isAutoConnecting,!0);this.setState(x=>({...x,status:x.data?.account?"reconnecting":"connecting"}));var sorted=(0,require$_DOT__SLASH_chunk_MQXBDTVK_DOT_js.__privateGet)(this,_lastUsedConnector)?[...this.connectors].sort(x=>x.id===(0,require$_DOT__SLASH_chunk_MQXBDTVK_DOT_js.__privateGet)(this,_lastUsedConnector)?-1:1):this.connectors,connected=!1;for(const connector of sorted){if(!connector.ready||!connector.isAuthorized)continue;if(!await connector.isAuthorized())continue;const data=await connector.connect();
this.setState(x=>({...x,connector,chains:connector?.chains,data,status:"connected"}));connected=!0;break}connected||this.setState(x=>({...x,data:void 0,status:"disconnected"}));(0,require$_DOT__SLASH_chunk_MQXBDTVK_DOT_js.__privateSet)(this,_isAutoConnecting,!1);return this.data}}setConnectors(connectors){this.args={...this.args,connectors};const connectors_="function"===typeof connectors?connectors():connectors;connectors_.forEach(connector=>connector.setStorage(this.args.storage));this.setState(x=>
({...x,connectors:connectors_}))}getPublicClient({chainId}={}){var publicClient_=this.publicClients.get(-1);if(publicClient_&&publicClient_?.chain.id===chainId||(publicClient_=this.publicClients.get(chainId??-1)))return publicClient_;({publicClient:publicClient_}=this.args);publicClient_="function"===typeof publicClient_?publicClient_({chainId}):publicClient_;this.publicClients.set(chainId??-1,publicClient_);return publicClient_}setPublicClient(publicClient){const chainId=this.data?.chain?.id;this.args=
{...this.args,publicClient};this.publicClients.clear();this.setState(x=>({...x,publicClient:this.getPublicClient({chainId})}))}getWebSocketPublicClient({chainId}={}){var webSocketPublicClient_=this.webSocketPublicClients.get(-1);if(webSocketPublicClient_&&webSocketPublicClient_?.chain.id===chainId||(webSocketPublicClient_=this.webSocketPublicClients.get(chainId??-1)))return webSocketPublicClient_;({webSocketPublicClient:webSocketPublicClient_}=this.args);(webSocketPublicClient_="function"===typeof webSocketPublicClient_?
webSocketPublicClient_({chainId}):webSocketPublicClient_)&&this.webSocketPublicClients.set(chainId??-1,webSocketPublicClient_);return webSocketPublicClient_}setWebSocketPublicClient(webSocketPublicClient){const chainId=this.data?.chain?.id;this.args={...this.args,webSocketPublicClient};this.webSocketPublicClients.clear();this.setState(x=>({...x,webSocketPublicClient:this.getWebSocketPublicClient({chainId})}))}setLastUsedConnector(lastUsedConnector=null){this.storage?.setItem("wallet",lastUsedConnector)}};
var _isAutoConnecting=new WeakMap;var _lastUsedConnector=new WeakMap;var _addEffects=new WeakSet;var addEffects_fn=function(){const onChange=data=>{this.setState(x=>({...x,data:{...x.data,...data}}))},onDisconnect=()=>{this.clearState()},onError=error=>{this.setState(x=>({...x,error}))};this.store.subscribe(({connector})=>connector,(connector,prevConnector)=>{prevConnector?.off?.("change",onChange);prevConnector?.off?.("disconnect",onDisconnect);prevConnector?.off?.("error",onError);connector&&(connector.on?.("change",
onChange),connector.on?.("disconnect",onDisconnect),connector.on?.("error",onError))});const {publicClient,webSocketPublicClient}=this.args;"function"!==typeof publicClient&&"function"!==typeof webSocketPublicClient||this.store.subscribe(({data})=>data?.chain?.id,chainId=>{this.setState(x=>({...x,publicClient:this.getPublicClient({chainId}),webSocketPublicClient:this.getWebSocketPublicClient({chainId})}))})};var config,erc20ABI=[{type:"event",name:"Approval",inputs:[{indexed:!0,name:"owner",type:"address"},
{indexed:!0,name:"spender",type:"address"},{indexed:!1,name:"value",type:"uint256"}]},{type:"event",name:"Transfer",inputs:[{indexed:!0,name:"from",type:"address"},{indexed:!0,name:"to",type:"address"},{indexed:!1,name:"value",type:"uint256"}]},{type:"function",name:"allowance",stateMutability:"view",inputs:[{name:"owner",type:"address"},{name:"spender",type:"address"}],outputs:[{name:"",type:"uint256"}]},{type:"function",name:"approve",stateMutability:"nonpayable",inputs:[{name:"spender",type:"address"},
{name:"amount",type:"uint256"}],outputs:[{name:"",type:"bool"}]},{type:"function",name:"balanceOf",stateMutability:"view",inputs:[{name:"account",type:"address"}],outputs:[{name:"",type:"uint256"}]},{type:"function",name:"decimals",stateMutability:"view",inputs:[],outputs:[{name:"",type:"uint8"}]},{type:"function",name:"name",stateMutability:"view",inputs:[],outputs:[{name:"",type:"string"}]},{type:"function",name:"symbol",stateMutability:"view",inputs:[],outputs:[{name:"",type:"string"}]},{type:"function",
name:"totalSupply",stateMutability:"view",inputs:[],outputs:[{name:"",type:"uint256"}]},{type:"function",name:"transfer",stateMutability:"nonpayable",inputs:[{name:"recipient",type:"address"},{name:"amount",type:"uint256"}],outputs:[{name:"",type:"bool"}]},{type:"function",name:"transferFrom",stateMutability:"nonpayable",inputs:[{name:"sender",type:"address"},{name:"recipient",type:"address"},{name:"amount",type:"uint256"}],outputs:[{name:"",type:"bool"}]}],erc20ABI_bytes32=[{type:"event",name:"Approval",
inputs:[{indexed:!0,name:"owner",type:"address"},{indexed:!0,name:"spender",type:"address"},{indexed:!1,name:"value",type:"uint256"}]},{type:"event",name:"Transfer",inputs:[{indexed:!0,name:"from",type:"address"},{indexed:!0,name:"to",type:"address"},{indexed:!1,name:"value",type:"uint256"}]},{type:"function",name:"allowance",stateMutability:"view",inputs:[{name:"owner",type:"address"},{name:"spender",type:"address"}],outputs:[{name:"",type:"uint256"}]},{type:"function",name:"approve",stateMutability:"nonpayable",
inputs:[{name:"spender",type:"address"},{name:"amount",type:"uint256"}],outputs:[{name:"",type:"bool"}]},{type:"function",name:"balanceOf",stateMutability:"view",inputs:[{name:"account",type:"address"}],outputs:[{name:"",type:"uint256"}]},{type:"function",name:"decimals",stateMutability:"view",inputs:[],outputs:[{name:"",type:"uint8"}]},{type:"function",name:"name",stateMutability:"view",inputs:[],outputs:[{name:"",type:"bytes32"}]},{type:"function",name:"symbol",stateMutability:"view",inputs:[],
outputs:[{name:"",type:"bytes32"}]},{type:"function",name:"totalSupply",stateMutability:"view",inputs:[],outputs:[{name:"",type:"uint256"}]},{type:"function",name:"transfer",stateMutability:"nonpayable",inputs:[{name:"recipient",type:"address"},{name:"amount",type:"uint256"}],outputs:[{name:"",type:"bool"}]},{type:"function",name:"transferFrom",stateMutability:"nonpayable",inputs:[{name:"sender",type:"address"},{name:"recipient",type:"address"},{name:"amount",type:"uint256"}],outputs:[{name:"",type:"bool"}]}],
erc721ABI=[{type:"event",name:"Approval",inputs:[{indexed:!0,name:"owner",type:"address"},{indexed:!0,name:"spender",type:"address"},{indexed:!0,name:"tokenId",type:"uint256"}]},{type:"event",name:"ApprovalForAll",inputs:[{indexed:!0,name:"owner",type:"address"},{indexed:!0,name:"operator",type:"address"},{indexed:!1,name:"approved",type:"bool"}]},{type:"event",name:"Transfer",inputs:[{indexed:!0,name:"from",type:"address"},{indexed:!0,name:"to",type:"address"},{indexed:!0,name:"tokenId",type:"uint256"}]},
{type:"function",name:"approve",stateMutability:"payable",inputs:[{name:"spender",type:"address"},{name:"tokenId",type:"uint256"}],outputs:[]},{type:"function",name:"balanceOf",stateMutability:"view",inputs:[{name:"account",type:"address"}],outputs:[{name:"",type:"uint256"}]},{type:"function",name:"getApproved",stateMutability:"view",inputs:[{name:"tokenId",type:"uint256"}],outputs:[{name:"",type:"address"}]},{type:"function",name:"isApprovedForAll",stateMutability:"view",inputs:[{name:"owner",type:"address"},
{name:"operator",type:"address"}],outputs:[{name:"",type:"bool"}]},{type:"function",name:"name",stateMutability:"view",inputs:[],outputs:[{name:"",type:"string"}]},{type:"function",name:"ownerOf",stateMutability:"view",inputs:[{name:"tokenId",type:"uint256"}],outputs:[{name:"owner",type:"address"}]},{type:"function",name:"safeTransferFrom",stateMutability:"payable",inputs:[{name:"from",type:"address"},{name:"to",type:"address"},{name:"tokenId",type:"uint256"}],outputs:[]},{type:"function",name:"safeTransferFrom",
stateMutability:"nonpayable",inputs:[{name:"from",type:"address"},{name:"to",type:"address"},{name:"id",type:"uint256"},{name:"data",type:"bytes"}],outputs:[]},{type:"function",name:"setApprovalForAll",stateMutability:"nonpayable",inputs:[{name:"operator",type:"address"},{name:"approved",type:"bool"}],outputs:[]},{type:"function",name:"symbol",stateMutability:"view",inputs:[],outputs:[{name:"",type:"string"}]},{type:"function",name:"tokenByIndex",stateMutability:"view",inputs:[{name:"index",type:"uint256"}],
outputs:[{name:"",type:"uint256"}]},{type:"function",name:"tokenByIndex",stateMutability:"view",inputs:[{name:"owner",type:"address"},{name:"index",type:"uint256"}],outputs:[{name:"tokenId",type:"uint256"}]},{type:"function",name:"tokenURI",stateMutability:"view",inputs:[{name:"tokenId",type:"uint256"}],outputs:[{name:"",type:"string"}]},{type:"function",name:"totalSupply",stateMutability:"view",inputs:[],outputs:[{name:"",type:"uint256"}]},{type:"function",name:"transferFrom",stateMutability:"payable",
inputs:[{name:"sender",type:"address"},{name:"recipient",type:"address"},{name:"tokeId",type:"uint256"}],outputs:[]}],erc4626ABI=[{anonymous:!1,inputs:[{indexed:!0,name:"owner",type:"address"},{indexed:!0,name:"spender",type:"address"},{indexed:!1,name:"value",type:"uint256"}],name:"Approval",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"sender",type:"address"},{indexed:!0,name:"receiver",type:"address"},{indexed:!1,name:"assets",type:"uint256"},{indexed:!1,name:"shares",type:"uint256"}],
name:"Deposit",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"from",type:"address"},{indexed:!0,name:"to",type:"address"},{indexed:!1,name:"value",type:"uint256"}],name:"Transfer",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"sender",type:"address"},{indexed:!0,name:"receiver",type:"address"},{indexed:!0,name:"owner",type:"address"},{indexed:!1,name:"assets",type:"uint256"},{indexed:!1,name:"shares",type:"uint256"}],name:"Withdraw",type:"event"},{inputs:[{name:"owner",type:"address"},
{name:"spender",type:"address"}],name:"allowance",outputs:[{name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{name:"spender",type:"address"},{name:"amount",type:"uint256"}],name:"approve",outputs:[{name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"asset",outputs:[{name:"assetTokenAddress",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{name:"account",type:"address"}],name:"balanceOf",outputs:[{name:"",type:"uint256"}],
stateMutability:"view",type:"function"},{inputs:[{name:"shares",type:"uint256"}],name:"convertToAssets",outputs:[{name:"assets",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{name:"assets",type:"uint256"}],name:"convertToShares",outputs:[{name:"shares",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{name:"assets",type:"uint256"},{name:"receiver",type:"address"}],name:"deposit",outputs:[{name:"shares",type:"uint256"}],stateMutability:"nonpayable",type:"function"},
{inputs:[{name:"caller",type:"address"}],name:"maxDeposit",outputs:[{name:"maxAssets",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{name:"caller",type:"address"}],name:"maxMint",outputs:[{name:"maxShares",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{name:"owner",type:"address"}],name:"maxRedeem",outputs:[{name:"maxShares",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{name:"owner",type:"address"}],name:"maxWithdraw",outputs:[{name:"maxAssets",
type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{name:"shares",type:"uint256"},{name:"receiver",type:"address"}],name:"mint",outputs:[{name:"assets",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{name:"assets",type:"uint256"}],name:"previewDeposit",outputs:[{name:"shares",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{name:"shares",type:"uint256"}],name:"previewMint",outputs:[{name:"assets",type:"uint256"}],stateMutability:"view",type:"function"},
{inputs:[{name:"shares",type:"uint256"}],name:"previewRedeem",outputs:[{name:"assets",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{name:"assets",type:"uint256"}],name:"previewWithdraw",outputs:[{name:"shares",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{name:"shares",type:"uint256"},{name:"receiver",type:"address"},{name:"owner",type:"address"}],name:"redeem",outputs:[{name:"assets",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[],
name:"totalAssets",outputs:[{name:"totalManagedAssets",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"totalSupply",outputs:[{name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{name:"to",type:"address"},{name:"amount",type:"uint256"}],name:"transfer",outputs:[{name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{name:"from",type:"address"},{name:"to",type:"address"},{name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{name:"",
type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{name:"assets",type:"uint256"},{name:"receiver",type:"address"},{name:"owner",type:"address"}],name:"withdraw",outputs:[{name:"shares",type:"uint256"}],stateMutability:"nonpayable",type:"function"}]}
//# sourceMappingURL=module$node_modules$$wagmi$core$dist$chunk_LAFZBYO7.js.map
