shadow$provide.module$node_modules$$tanstack$query_core$build$lib$retryer=function(global,require,module,exports){function defaultRetryDelay(failureCount){return Math.min(1E3*2**failureCount,3E4)}function canFetch(networkMode){return"online"===(null!=networkMode?networkMode:"online")?onlineManager.onlineManager.isOnline():!0}Object.defineProperty(exports,"__esModule",{value:!0});var focusManager=require("module$node_modules$$tanstack$query_core$build$lib$focusManager"),onlineManager=require("module$node_modules$$tanstack$query_core$build$lib$onlineManager"),
utils=require("module$node_modules$$tanstack$query_core$build$lib$utils");class CancelledError{constructor(options){this.revert=null==options?void 0:options.revert;this.silent=null==options?void 0:options.silent}}exports.CancelledError=CancelledError;exports.canFetch=canFetch;exports.createRetryer=function(config){let isRetryCancelled=!1,failureCount=0,isResolved=!1,continueFn,promiseResolve,promiseReject;const promise=new Promise((outerResolve,outerReject)=>{promiseResolve=outerResolve;promiseReject=
outerReject}),shouldPause=()=>!focusManager.focusManager.isFocused()||"always"!==config.networkMode&&!onlineManager.onlineManager.isOnline(),resolve=value=>{isResolved||(isResolved=!0,null==config.onSuccess?void 0:config.onSuccess(value),null==continueFn?void 0:continueFn(),promiseResolve(value))},reject=value=>{isResolved||(isResolved=!0,null==config.onError?void 0:config.onError(value),null==continueFn?void 0:continueFn(),promiseReject(value))},pause=()=>(new Promise(continueResolve=>{continueFn=
value=>{const canContinue=isResolved||!shouldPause();canContinue&&continueResolve(value);return canContinue};null==config.onPause?void 0:config.onPause()})).then(()=>{continueFn=void 0;isResolved||(null==config.onContinue?void 0:config.onContinue())}),run=()=>{if(!isResolved){try{var promiseOrValue=config.fn()}catch(error){promiseOrValue=Promise.reject(error)}Promise.resolve(promiseOrValue).then(resolve).catch(error=>{var _config$retry,_config$retryDelay;if(!isResolved){var retry=null!=(_config$retry=
config.retry)?_config$retry:3;_config$retry=null!=(_config$retryDelay=config.retryDelay)?_config$retryDelay:defaultRetryDelay;_config$retryDelay="function"===typeof _config$retry?_config$retry(failureCount,error):_config$retry;retry=!0===retry||"number"===typeof retry&&failureCount<retry||"function"===typeof retry&&retry(failureCount,error);isRetryCancelled||!retry?reject(error):(failureCount++,null==config.onFail?void 0:config.onFail(failureCount,error),utils.sleep(_config$retryDelay).then(()=>{if(shouldPause())return pause()}).then(()=>
{isRetryCancelled?reject(error):run()}))}})}};canFetch(config.networkMode)?run():pause().then(run);return{promise,cancel:cancelOptions=>{isResolved||(reject(new CancelledError(cancelOptions)),null==config.abort?void 0:config.abort())},continue:()=>(null==continueFn?0:continueFn())?promise:Promise.resolve(),cancelRetry:()=>{isRetryCancelled=!0},continueRetry:()=>{isRetryCancelled=!1}}};exports.isCancelledError=function(value){return value instanceof CancelledError}}
//# sourceMappingURL=module$node_modules$$tanstack$query_core$build$lib$retryer.js.map
