["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/viem/_cjs/actions/public/getLogs.js"],"~:js","shadow$provide.module$node_modules$viem$_cjs$actions$public$getLogs=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.getLogs=void 0;const abi_js_1=require(\"module$node_modules$viem$_cjs$errors$abi\"),decodeEventLog_js_1=require(\"module$node_modules$viem$_cjs$utils$abi$decodeEventLog\"),encodeEventTopics_js_1=require(\"module$node_modules$viem$_cjs$utils$abi$encodeEventTopics\"),toHex_js_1=require(\"module$node_modules$viem$_cjs$utils$encoding$toHex\"),\nlog_js_1=require(\"module$node_modules$viem$_cjs$utils$formatters$log\");exports.getLogs=async function(client,{address,blockHash,fromBlock,toBlock,event:event$jscomp$0,events:events_,args:args$jscomp$0,strict:strict_}={}){const strict=strict_??!1,events=events_??(event$jscomp$0?[event$jscomp$0]:void 0);events_=[];events&&(events_=[events.flatMap(event=>(0,encodeEventTopics_js_1.encodeEventTopics)({abi:[event],eventName:event.name,args:args$jscomp$0}))],event$jscomp$0&&(events_=events_[0]));return(blockHash?\nawait client.request({method:\"eth_getLogs\",params:[{address,topics:events_,blockHash}]}):await client.request({method:\"eth_getLogs\",params:[{address,topics:events_,fromBlock:\"bigint\"===typeof fromBlock?(0,toHex_js_1.numberToHex)(fromBlock):fromBlock,toBlock:\"bigint\"===typeof toBlock?(0,toHex_js_1.numberToHex)(toBlock):toBlock}]})).map(log=>{try{const {eventName,args}=events?(0,decodeEventLog_js_1.decodeEventLog)({abi:events,data:log.data,topics:log.topics,strict}):{eventName:void 0,args:void 0};return(0,log_js_1.formatLog)(log,\n{args,eventName})}catch(err){let eventName,isUnnamed;if(err instanceof abi_js_1.DecodeLogDataMismatch||err instanceof abi_js_1.DecodeLogTopicsMismatch){if(strict)return;eventName=err.abiItem.name;isUnnamed=err.abiItem.inputs?.some(x=>!(\"name\"in x&&x.name))}return(0,log_js_1.formatLog)(log,{args:isUnnamed?[]:{},eventName})}}).filter(Boolean)}}","~:source","shadow$provide[\"module$node_modules$viem$_cjs$actions$public$getLogs\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getLogs = void 0;\nconst abi_js_1 = require(\"../../errors/abi.js\");\nconst decodeEventLog_js_1 = require(\"../../utils/abi/decodeEventLog.js\");\nconst encodeEventTopics_js_1 = require(\"../../utils/abi/encodeEventTopics.js\");\nconst toHex_js_1 = require(\"../../utils/encoding/toHex.js\");\nconst log_js_1 = require(\"../../utils/formatters/log.js\");\nasync function getLogs(client, { address, blockHash, fromBlock, toBlock, event, events: events_, args, strict: strict_, } = {}) {\n    const strict = strict_ ?? false;\n    const events = events_ ?? (event ? [event] : undefined);\n    let topics = [];\n    if (events) {\n        topics = [\n            events.flatMap((event) => (0, encodeEventTopics_js_1.encodeEventTopics)({\n                abi: [event],\n                eventName: event.name,\n                args,\n            })),\n        ];\n        if (event)\n            topics = topics[0];\n    }\n    let logs;\n    if (blockHash) {\n        logs = await client.request({\n            method: 'eth_getLogs',\n            params: [{ address, topics, blockHash }],\n        });\n    }\n    else {\n        logs = await client.request({\n            method: 'eth_getLogs',\n            params: [\n                {\n                    address,\n                    topics,\n                    fromBlock: typeof fromBlock === 'bigint' ? (0, toHex_js_1.numberToHex)(fromBlock) : fromBlock,\n                    toBlock: typeof toBlock === 'bigint' ? (0, toHex_js_1.numberToHex)(toBlock) : toBlock,\n                },\n            ],\n        });\n    }\n    return logs\n        .map((log) => {\n        try {\n            const { eventName, args } = events\n                ? (0, decodeEventLog_js_1.decodeEventLog)({\n                    abi: events,\n                    data: log.data,\n                    topics: log.topics,\n                    strict,\n                })\n                : { eventName: undefined, args: undefined };\n            return (0, log_js_1.formatLog)(log, { args, eventName: eventName });\n        }\n        catch (err) {\n            let eventName;\n            let isUnnamed;\n            if (err instanceof abi_js_1.DecodeLogDataMismatch ||\n                err instanceof abi_js_1.DecodeLogTopicsMismatch) {\n                if (strict)\n                    return;\n                eventName = err.abiItem.name;\n                isUnnamed = err.abiItem.inputs?.some((x) => !('name' in x && x.name));\n            }\n            return (0, log_js_1.formatLog)(log, { args: isUnnamed ? [] : {}, eventName });\n        }\n    })\n        .filter(Boolean);\n}\nexports.getLogs = getLogs;\n//# sourceMappingURL=getLogs.js.map\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$viem$_cjs$utils$formatters$log","~$shadow.js","~$module$node_modules$viem$_cjs$utils$abi$encodeEventTopics","~$module$node_modules$viem$_cjs$errors$abi","~$module$node_modules$viem$_cjs$utils$abi$decodeEventLog","~$module$node_modules$viem$_cjs$utils$encoding$toHex"]],"~:properties",["^5",["topics","abi","getLogs","params","args","method","__esModule","toBlock","eventName","fromBlock","value","address","blockHash","strict","data"]],"~:compiled-at",1695111490270,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$viem$_cjs$actions$public$getLogs.js\",\n\"lineCount\":4,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/viem/_cjs/actions/public/getLogs.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$viem$_cjs$actions$public$getLogs\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nexports.getLogs = void 0;\\nconst abi_js_1 = require(\\\"../../errors/abi.js\\\");\\nconst decodeEventLog_js_1 = require(\\\"../../utils/abi/decodeEventLog.js\\\");\\nconst encodeEventTopics_js_1 = require(\\\"../../utils/abi/encodeEventTopics.js\\\");\\nconst toHex_js_1 = require(\\\"../../utils/encoding/toHex.js\\\");\\nconst log_js_1 = require(\\\"../../utils/formatters/log.js\\\");\\nasync function getLogs(client, { address, blockHash, fromBlock, toBlock, event, events: events_, args, strict: strict_, } = {}) {\\n    const strict = strict_ ?? false;\\n    const events = events_ ?? (event ? [event] : undefined);\\n    let topics = [];\\n    if (events) {\\n        topics = [\\n            events.flatMap((event) => (0, encodeEventTopics_js_1.encodeEventTopics)({\\n                abi: [event],\\n                eventName: event.name,\\n                args,\\n            })),\\n        ];\\n        if (event)\\n            topics = topics[0];\\n    }\\n    let logs;\\n    if (blockHash) {\\n        logs = await client.request({\\n            method: 'eth_getLogs',\\n            params: [{ address, topics, blockHash }],\\n        });\\n    }\\n    else {\\n        logs = await client.request({\\n            method: 'eth_getLogs',\\n            params: [\\n                {\\n                    address,\\n                    topics,\\n                    fromBlock: typeof fromBlock === 'bigint' ? (0, toHex_js_1.numberToHex)(fromBlock) : fromBlock,\\n                    toBlock: typeof toBlock === 'bigint' ? (0, toHex_js_1.numberToHex)(toBlock) : toBlock,\\n                },\\n            ],\\n        });\\n    }\\n    return logs\\n        .map((log) => {\\n        try {\\n            const { eventName, args } = events\\n                ? (0, decodeEventLog_js_1.decodeEventLog)({\\n                    abi: events,\\n                    data: log.data,\\n                    topics: log.topics,\\n                    strict,\\n                })\\n                : { eventName: undefined, args: undefined };\\n            return (0, log_js_1.formatLog)(log, { args, eventName: eventName });\\n        }\\n        catch (err) {\\n            let eventName;\\n            let isUnnamed;\\n            if (err instanceof abi_js_1.DecodeLogDataMismatch ||\\n                err instanceof abi_js_1.DecodeLogTopicsMismatch) {\\n                if (strict)\\n                    return;\\n                eventName = err.abiItem.name;\\n                isUnnamed = err.abiItem.inputs?.some((x) => !('name' in x && x.name));\\n            }\\n            return (0, log_js_1.formatLog)(log, { args: isUnnamed ? [] : {}, eventName });\\n        }\\n    })\\n        .filter(Boolean);\\n}\\nexports.getLogs = getLogs;\\n//# sourceMappingURL=getLogs.js.map\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"getLogs\",\"abi_js_1\",\"decodeEventLog_js_1\",\"encodeEventTopics_js_1\",\"toHex_js_1\",\"log_js_1\",\"client\",\"address\",\"blockHash\",\"fromBlock\",\"toBlock\",\"event\",\"events_\",\"args\",\"strict_\",\"strict\",\"events\",\"undefined\",\"topics\",\"flatMap\",\"encodeEventTopics\",\"abi\",\"eventName\",\"name\",\"map\",\"logs\",\"request\",\"method\",\"params\",\"numberToHex\",\"log\",\"decodeEventLog\",\"data\",\"formatLog\",\"err\",\"isUnnamed\",\"DecodeLogDataMismatch\",\"DecodeLogTopicsMismatch\",\"abiItem\",\"inputs\",\"some\",\"x\",\"filter\",\"Boolean\"]\n}\n"]