shadow$provide.module$node_modules$viem$_cjs$utils$ens$avatar$utils=function(global,require,module,exports){async function isImageUri(uri){try{const res=await fetch(uri,{method:"HEAD"});return 200===res.status?res.headers.get("content-type")?.startsWith("image/"):!1}catch(error){return"object"===typeof error&&"undefined"!==typeof error.response||!globalThis.hasOwnProperty("Image")?!1:new Promise(resolve=>{const img=new Image;img.onload=()=>{resolve(!0)};img.onerror=()=>{resolve(!1)};img.src=uri})}}
function getGateway(custom,defaultGateway){return custom?custom.endsWith("/")?custom.slice(0,-1):custom:defaultGateway}function resolveAvatarUri({uri,gatewayUrls}){var isEncoded=base64Regex.test(uri);if(isEncoded)return{uri,isOnChain:!0,isEncoded};isEncoded=getGateway(gatewayUrls?.ipfs,"https://ipfs.io");const arweaveGateway=getGateway(gatewayUrls?.arweave,"https://arweave.net");var networkRegexMatch=uri.match(networkRegex);const {protocol,subpath,target,subtarget=""}=networkRegexMatch?.groups||{};
networkRegexMatch="ipns:/"===protocol||"ipns/"===subpath;const isIPFS="ipfs:/"===protocol||"ipfs/"===subpath||ipfsHashRegex.test(uri);if(uri.startsWith("http")&&!networkRegexMatch&&!isIPFS)return isEncoded=uri,gatewayUrls?.arweave&&(isEncoded=uri.replace(/https:\/\/arweave.net/g,gatewayUrls?.arweave)),{uri:isEncoded,isOnChain:!1,isEncoded:!1};if((networkRegexMatch||isIPFS)&&target)return{uri:`${isEncoded}/${networkRegexMatch?"ipns":"ipfs"}/${target}${subtarget}`,isOnChain:!1,isEncoded:!1};if("ar:/"===
protocol&&target)return{uri:`${arweaveGateway}/${target}${subtarget||""}`,isOnChain:!1,isEncoded:!1};gatewayUrls=uri.replace(dataURIRegex,"");gatewayUrls.startsWith("\x3csvg")&&(gatewayUrls=`data:image/svg+xml;base64,${btoa(gatewayUrls)}`);if(gatewayUrls.startsWith("data:")||gatewayUrls.startsWith("{"))return{uri:gatewayUrls,isOnChain:!0,isEncoded:!1};throw new ens_js_1.EnsAvatarUriResolutionError({uri});}function getJsonImage(data){if("object"!==typeof data||!("image"in data||"image_url"in data||
"image_data"in data))throw new ens_js_1.EnsAvatarInvalidMetadataError({data});return data.image||data.image_url||data.image_data}async function parseAvatarUri({gatewayUrls,uri}){const {uri:resolvedURI,isOnChain}=resolveAvatarUri({uri,gatewayUrls});if(isOnChain||await isImageUri(resolvedURI))return resolvedURI;throw new ens_js_1.EnsAvatarUriResolutionError({uri});}Object.defineProperty(exports,"__esModule",{value:!0});exports.getNftTokenUri=exports.parseNftUri=exports.parseAvatarUri=exports.getMetadataAvatarUri=
exports.getJsonImage=exports.resolveAvatarUri=exports.getGateway=exports.isImageUri=void 0;const readContract_js_1=require("module$node_modules$viem$_cjs$actions$public$readContract"),ens_js_1=require("module$node_modules$viem$_cjs$errors$ens"),networkRegex=/(?<protocol>https?:\/\/[^\/]*|ipfs:\/|ipns:\/|ar:\/)?(?<root>\/)?(?<subpath>ipfs\/|ipns\/)?(?<target>[\w\-.]+)(?<subtarget>\/.*)?/,ipfsHashRegex=/^(Qm[1-9A-HJ-NP-Za-km-z]{44,}|b[A-Za-z2-7]{58,}|B[A-Z2-7]{58,}|z[1-9A-HJ-NP-Za-km-z]{48,}|F[0-9A-F]{50,})(\/(?<target>[\w\-.]+))?(?<subtarget>\/.*)?$/,
base64Regex=/^data:([a-zA-Z\-/+]*);base64,([^"].*)/,dataURIRegex=/^data:([a-zA-Z\-/+]*)?(;[a-zA-Z0-9].*?)?(,)/;exports.isImageUri=isImageUri;exports.getGateway=getGateway;exports.resolveAvatarUri=resolveAvatarUri;exports.getJsonImage=getJsonImage;exports.getMetadataAvatarUri=async function({gatewayUrls,uri}){try{const res$jscomp$0=await fetch(uri).then(res=>res.json());return await parseAvatarUri({gatewayUrls,uri:getJsonImage(res$jscomp$0)})}catch{throw new ens_js_1.EnsAvatarUriResolutionError({uri});
}};exports.parseAvatarUri=parseAvatarUri;exports.parseNftUri=function(uri_){uri_.startsWith("did:nft:")&&(uri_=uri_.replace("did:nft:","").replace(/_/g,"/"));const [reference,asset_namespace,tokenID]=uri_.split("/"),[eip_namespace,chainID]=reference.split(":"),[erc_namespace,contractAddress]=asset_namespace.split(":");if(!eip_namespace||"eip155"!==eip_namespace.toLowerCase())throw new ens_js_1.EnsAvatarInvalidNftUriError({reason:"Only EIP-155 supported"});if(!chainID)throw new ens_js_1.EnsAvatarInvalidNftUriError({reason:"Chain ID not found"});
if(!contractAddress)throw new ens_js_1.EnsAvatarInvalidNftUriError({reason:"Contract address not found"});if(!tokenID)throw new ens_js_1.EnsAvatarInvalidNftUriError({reason:"Token ID not found"});if(!erc_namespace)throw new ens_js_1.EnsAvatarInvalidNftUriError({reason:"ERC namespace not found"});return{chainID:parseInt(chainID),namespace:erc_namespace.toLowerCase(),contractAddress,tokenID}};exports.getNftTokenUri=async function(client,{nft}){if("erc721"===nft.namespace)return(0,readContract_js_1.readContract)(client,
{address:nft.contractAddress,abi:[{name:"tokenURI",type:"function",stateMutability:"view",inputs:[{name:"tokenId",type:"uint256"}],outputs:[{name:"",type:"string"}]}],functionName:"tokenURI",args:[BigInt(nft.tokenID)]});if("erc1155"===nft.namespace)return(0,readContract_js_1.readContract)(client,{address:nft.contractAddress,abi:[{name:"uri",type:"function",stateMutability:"view",inputs:[{name:"_id",type:"uint256"}],outputs:[{name:"",type:"string"}]}],functionName:"uri",args:[BigInt(nft.tokenID)]});
throw new ens_js_1.EnsAvatarUnsupportedNamespaceError({namespace:nft.namespace});}}
//# sourceMappingURL=module$node_modules$viem$_cjs$utils$ens$avatar$utils.js.map
