{
"version":3,
"file":"module$node_modules$$noble$curves$abstract$weierstrass.js",
"lineCount":38,
"mappings":"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",
"sources":["node_modules/@noble/curves/abstract/weierstrass.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$noble$curves$abstract$weierstrass\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.mapToCurveSimpleSWU = exports.SWUFpSqrtRatio = exports.weierstrass = exports.weierstrassPoints = exports.DER = void 0;\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y\u00b2 = x\u00b3 + ax + b\nconst mod = require(\"./modular.js\");\nconst ut = require(\"./utils.js\");\nconst utils_js_1 = require(\"./utils.js\");\nconst curve_js_1 = require(\"./curve.js\");\nfunction validatePointOpts(curve) {\n    const opts = (0, curve_js_1.validateBasic)(curve);\n    ut.validateObject(opts, {\n        a: 'field',\n        b: 'field',\n    }, {\n        allowedPrivateKeyLengths: 'array',\n        wrapPrivateKey: 'boolean',\n        isTorsionFree: 'function',\n        clearCofactor: 'function',\n        allowInfinityPoint: 'boolean',\n        fromBytes: 'function',\n        toBytes: 'function',\n    });\n    const { endo, Fp, a } = opts;\n    if (endo) {\n        if (!Fp.eql(a, Fp.ZERO)) {\n            throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n        }\n        if (typeof endo !== 'object' ||\n            typeof endo.beta !== 'bigint' ||\n            typeof endo.splitScalar !== 'function') {\n            throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n        }\n    }\n    return Object.freeze({ ...opts });\n}\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nexports.DER = {\n    // asn.1 DER encoding utils\n    Err: class DERErr extends Error {\n        constructor(m = '') {\n            super(m);\n        }\n    },\n    _parseInt(data) {\n        const { Err: E } = exports.DER;\n        if (data.length < 2 || data[0] !== 0x02)\n            throw new E('Invalid signature integer tag');\n        const len = data[1];\n        const res = data.subarray(2, len + 2);\n        if (!len || res.length !== len)\n            throw new E('Invalid signature integer: wrong length');\n        // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n        // since we always use positive integers here. It must always be empty:\n        // - add zero byte if exists\n        // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n        if (res[0] & 0b10000000)\n            throw new E('Invalid signature integer: negative');\n        if (res[0] === 0x00 && !(res[1] & 0b10000000))\n            throw new E('Invalid signature integer: unnecessary leading zero');\n        return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n    },\n    toSig(hex) {\n        // parse DER signature\n        const { Err: E } = exports.DER;\n        const data = typeof hex === 'string' ? h2b(hex) : hex;\n        if (!(data instanceof Uint8Array))\n            throw new Error('ui8a expected');\n        let l = data.length;\n        if (l < 2 || data[0] != 0x30)\n            throw new E('Invalid signature tag');\n        if (data[1] !== l - 2)\n            throw new E('Invalid signature: incorrect length');\n        const { d: r, l: sBytes } = exports.DER._parseInt(data.subarray(2));\n        const { d: s, l: rBytesLeft } = exports.DER._parseInt(sBytes);\n        if (rBytesLeft.length)\n            throw new E('Invalid signature: left bytes after parsing');\n        return { r, s };\n    },\n    hexFromSig(sig) {\n        // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n        const slice = (s) => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n        const h = (num) => {\n            const hex = num.toString(16);\n            return hex.length & 1 ? `0${hex}` : hex;\n        };\n        const s = slice(h(sig.s));\n        const r = slice(h(sig.r));\n        const shl = s.length / 2;\n        const rhl = r.length / 2;\n        const sl = h(shl);\n        const rl = h(rhl);\n        return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n    },\n};\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\nfunction weierstrassPoints(opts) {\n    const CURVE = validatePointOpts(opts);\n    const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n    const toBytes = CURVE.toBytes ||\n        ((_c, point, _isCompressed) => {\n            const a = point.toAffine();\n            return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n        });\n    const fromBytes = CURVE.fromBytes ||\n        ((bytes) => {\n            // const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n            return { x, y };\n        });\n    /**\n     * y\u00b2 = x\u00b3 + ax + b: Short weierstrass curve formula\n     * @returns y\u00b2\n     */\n    function weierstrassEquation(x) {\n        const { a, b } = CURVE;\n        const x2 = Fp.sqr(x); // x * x\n        const x3 = Fp.mul(x2, x); // x2 * x\n        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n    }\n    // Validate whether the passed curve params are valid.\n    // We check if curve equation works for generator point.\n    // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n    // ProjectivePoint class has not been initialized yet.\n    if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n        throw new Error('bad generator point: equation left != right');\n    // Valid group elements reside in range 1..n-1\n    function isWithinCurveOrder(num) {\n        return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n    }\n    function assertGE(num) {\n        if (!isWithinCurveOrder(num))\n            throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n    }\n    // Validates if priv key is valid and converts it to bigint.\n    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n    function normPrivateKeyToScalar(key) {\n        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n        if (lengths && typeof key !== 'bigint') {\n            if (key instanceof Uint8Array)\n                key = ut.bytesToHex(key);\n            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n            if (typeof key !== 'string' || !lengths.includes(key.length))\n                throw new Error('Invalid key');\n            key = key.padStart(nByteLength * 2, '0');\n        }\n        let num;\n        try {\n            num =\n                typeof key === 'bigint'\n                    ? key\n                    : ut.bytesToNumberBE((0, utils_js_1.ensureBytes)('private key', key, nByteLength));\n        }\n        catch (error) {\n            throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n        }\n        if (wrapPrivateKey)\n            num = mod.mod(num, n); // disabled by default, enabled for BLS\n        assertGE(num); // num in range [1..N-1]\n        return num;\n    }\n    const pointPrecomputes = new Map();\n    function assertPrjPoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ProjectivePoint expected');\n    }\n    /**\n     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) \u220b (x=x/z, y=y/z)\n     * Default Point works in 2d / affine coordinates: (x, y)\n     * We're doing calculations in projective, because its operations don't require costly inversion.\n     */\n    class Point {\n        constructor(px, py, pz) {\n            this.px = px;\n            this.py = py;\n            this.pz = pz;\n            if (px == null || !Fp.isValid(px))\n                throw new Error('x required');\n            if (py == null || !Fp.isValid(py))\n                throw new Error('y required');\n            if (pz == null || !Fp.isValid(pz))\n                throw new Error('z required');\n        }\n        // Does not validate if the point is on-curve.\n        // Use fromHex instead, or call assertValidity() later.\n        static fromAffine(p) {\n            const { x, y } = p || {};\n            if (!p || !Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('invalid affine point');\n            if (p instanceof Point)\n                throw new Error('projective point not allowed');\n            const is0 = (i) => Fp.eql(i, Fp.ZERO);\n            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n            if (is0(x) && is0(y))\n                return Point.ZERO;\n            return new Point(x, y, Fp.ONE);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        /**\n         * Takes a bunch of Projective Points but executes only one\n         * inversion on all of them. Inversion is very slow operation,\n         * so this improves performance massively.\n         * Optimization: converts a list of projective points to a list of identical points with Z=1.\n         */\n        static normalizeZ(points) {\n            const toInv = Fp.invertBatch(points.map((p) => p.pz));\n            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        /**\n         * Converts hash string or Uint8Array to Point.\n         * @param hex short/long ECDSA hex\n         */\n        static fromHex(hex) {\n            const P = Point.fromAffine(fromBytes((0, utils_js_1.ensureBytes)('pointHex', hex)));\n            P.assertValidity();\n            return P;\n        }\n        // Multiplies generator point by privateKey.\n        static fromPrivateKey(privateKey) {\n            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            this._WINDOW_SIZE = windowSize;\n            pointPrecomputes.delete(this);\n        }\n        // A point on curve is valid if it conforms to equation.\n        assertValidity() {\n            if (this.is0()) {\n                // (0, 1, 0) aka ZERO is invalid in most contexts.\n                // In BLS, ZERO can be serialized, so we allow it.\n                // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n                if (CURVE.allowInfinityPoint && !Fp.is0(this.py))\n                    return;\n                throw new Error('bad point: ZERO');\n            }\n            // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n            const { x, y } = this.toAffine();\n            // Check if x, y are valid field elements\n            if (!Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('bad point: x or y not FE');\n            const left = Fp.sqr(y); // y\u00b2\n            const right = weierstrassEquation(x); // x\u00b3 + ax + b\n            if (!Fp.eql(left, right))\n                throw new Error('bad point: equation left != right');\n            if (!this.isTorsionFree())\n                throw new Error('bad point: not in prime-order subgroup');\n        }\n        hasEvenY() {\n            const { y } = this.toAffine();\n            if (Fp.isOdd)\n                return !Fp.isOdd(y);\n            throw new Error(\"Field doesn't support isOdd\");\n        }\n        /**\n         * Compare one point to another.\n         */\n        equals(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n            return U1 && U2;\n        }\n        /**\n         * Flips point to one corresponding to (x, -y) in Affine coordinates.\n         */\n        negate() {\n            return new Point(this.px, Fp.neg(this.py), this.pz);\n        }\n        // Renes-Costello-Batina exception-free doubling formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 3\n        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n        double() {\n            const { a, b } = CURVE;\n            const b3 = Fp.mul(b, _3n);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            let t0 = Fp.mul(X1, X1); // step 1\n            let t1 = Fp.mul(Y1, Y1);\n            let t2 = Fp.mul(Z1, Z1);\n            let t3 = Fp.mul(X1, Y1);\n            t3 = Fp.add(t3, t3); // step 5\n            Z3 = Fp.mul(X1, Z1);\n            Z3 = Fp.add(Z3, Z3);\n            X3 = Fp.mul(a, Z3);\n            Y3 = Fp.mul(b3, t2);\n            Y3 = Fp.add(X3, Y3); // step 10\n            X3 = Fp.sub(t1, Y3);\n            Y3 = Fp.add(t1, Y3);\n            Y3 = Fp.mul(X3, Y3);\n            X3 = Fp.mul(t3, X3);\n            Z3 = Fp.mul(b3, Z3); // step 15\n            t2 = Fp.mul(a, t2);\n            t3 = Fp.sub(t0, t2);\n            t3 = Fp.mul(a, t3);\n            t3 = Fp.add(t3, Z3);\n            Z3 = Fp.add(t0, t0); // step 20\n            t0 = Fp.add(Z3, t0);\n            t0 = Fp.add(t0, t2);\n            t0 = Fp.mul(t0, t3);\n            Y3 = Fp.add(Y3, t0);\n            t2 = Fp.mul(Y1, Z1); // step 25\n            t2 = Fp.add(t2, t2);\n            t0 = Fp.mul(t2, t3);\n            X3 = Fp.sub(X3, t0);\n            Z3 = Fp.mul(t2, t1);\n            Z3 = Fp.add(Z3, Z3); // step 30\n            Z3 = Fp.add(Z3, Z3);\n            return new Point(X3, Y3, Z3);\n        }\n        // Renes-Costello-Batina exception-free addition formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 1\n        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n        add(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            const a = CURVE.a;\n            const b3 = Fp.mul(CURVE.b, _3n);\n            let t0 = Fp.mul(X1, X2); // step 1\n            let t1 = Fp.mul(Y1, Y2);\n            let t2 = Fp.mul(Z1, Z2);\n            let t3 = Fp.add(X1, Y1);\n            let t4 = Fp.add(X2, Y2); // step 5\n            t3 = Fp.mul(t3, t4);\n            t4 = Fp.add(t0, t1);\n            t3 = Fp.sub(t3, t4);\n            t4 = Fp.add(X1, Z1);\n            let t5 = Fp.add(X2, Z2); // step 10\n            t4 = Fp.mul(t4, t5);\n            t5 = Fp.add(t0, t2);\n            t4 = Fp.sub(t4, t5);\n            t5 = Fp.add(Y1, Z1);\n            X3 = Fp.add(Y2, Z2); // step 15\n            t5 = Fp.mul(t5, X3);\n            X3 = Fp.add(t1, t2);\n            t5 = Fp.sub(t5, X3);\n            Z3 = Fp.mul(a, t4);\n            X3 = Fp.mul(b3, t2); // step 20\n            Z3 = Fp.add(X3, Z3);\n            X3 = Fp.sub(t1, Z3);\n            Z3 = Fp.add(t1, Z3);\n            Y3 = Fp.mul(X3, Z3);\n            t1 = Fp.add(t0, t0); // step 25\n            t1 = Fp.add(t1, t0);\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.mul(b3, t4);\n            t1 = Fp.add(t1, t2);\n            t2 = Fp.sub(t0, t2); // step 30\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.add(t4, t2);\n            t0 = Fp.mul(t1, t4);\n            Y3 = Fp.add(Y3, t0);\n            t0 = Fp.mul(t5, t4); // step 35\n            X3 = Fp.mul(t3, X3);\n            X3 = Fp.sub(X3, t0);\n            t0 = Fp.mul(t3, t1);\n            Z3 = Fp.mul(t5, Z3);\n            Z3 = Fp.add(Z3, t0); // step 40\n            return new Point(X3, Y3, Z3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {\n                const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n                return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n            });\n        }\n        /**\n         * Non-constant-time multiplication. Uses double-and-add algorithm.\n         * It's faster, but should only be used when you don't care about\n         * an exposed private key e.g. sig verification, which works over *public* keys.\n         */\n        multiplyUnsafe(n) {\n            const I = Point.ZERO;\n            if (n === _0n)\n                return I;\n            assertGE(n); // Will throw on 0\n            if (n === _1n)\n                return this;\n            const { endo } = CURVE;\n            if (!endo)\n                return wnaf.unsafeLadder(this, n);\n            // Apply endomorphism\n            let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n            let k1p = I;\n            let k2p = I;\n            let d = this;\n            while (k1 > _0n || k2 > _0n) {\n                if (k1 & _1n)\n                    k1p = k1p.add(d);\n                if (k2 & _1n)\n                    k2p = k2p.add(d);\n                d = d.double();\n                k1 >>= _1n;\n                k2 >>= _1n;\n            }\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n            return k1p.add(k2p);\n        }\n        /**\n         * Constant time multiplication.\n         * Uses wNAF method. Windowed method may be 10% faster,\n         * but takes 2x longer to generate and consumes 2x memory.\n         * Uses precomputes when available.\n         * Uses endomorphism for Koblitz curves.\n         * @param scalar by which the point would be multiplied\n         * @returns New point\n         */\n        multiply(scalar) {\n            assertGE(scalar);\n            let n = scalar;\n            let point, fake; // Fake point is used to const-time mult\n            const { endo } = CURVE;\n            if (endo) {\n                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n                let { p: k1p, f: f1p } = this.wNAF(k1);\n                let { p: k2p, f: f2p } = this.wNAF(k2);\n                k1p = wnaf.constTimeNegate(k1neg, k1p);\n                k2p = wnaf.constTimeNegate(k2neg, k2p);\n                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n                point = k1p.add(k2p);\n                fake = f1p.add(f2p);\n            }\n            else {\n                const { p, f } = this.wNAF(n);\n                point = p;\n                fake = f;\n            }\n            // Normalize `z` for both points, but return only real one\n            return Point.normalizeZ([point, fake])[0];\n        }\n        /**\n         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n         * Not using Strauss-Shamir trick: precomputation tables are faster.\n         * The trick could be useful if both P and Q are not G (not in our case).\n         * @returns non-zero affine point\n         */\n        multiplyAndAddUnsafe(Q, a, b) {\n            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n            const mul = (P, a // Select faster multiply() method\n            ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n            const sum = mul(this, a).add(mul(Q, b));\n            return sum.is0() ? undefined : sum;\n        }\n        // Converts Projective point to affine (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        // (x, y, z) \u220b (x=x/z, y=y/z)\n        toAffine(iz) {\n            const { px: x, py: y, pz: z } = this;\n            const is0 = this.is0();\n            // If invZ was 0, we return zero point. However we still want to execute\n            // all operations, so we replace invZ with a random number, 1.\n            if (iz == null)\n                iz = is0 ? Fp.ONE : Fp.inv(z);\n            const ax = Fp.mul(x, iz);\n            const ay = Fp.mul(y, iz);\n            const zz = Fp.mul(z, iz);\n            if (is0)\n                return { x: Fp.ZERO, y: Fp.ZERO };\n            if (!Fp.eql(zz, Fp.ONE))\n                throw new Error('invZ was invalid');\n            return { x: ax, y: ay };\n        }\n        isTorsionFree() {\n            const { h: cofactor, isTorsionFree } = CURVE;\n            if (cofactor === _1n)\n                return true; // No subgroups, always torsion-free\n            if (isTorsionFree)\n                return isTorsionFree(Point, this);\n            throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n        }\n        clearCofactor() {\n            const { h: cofactor, clearCofactor } = CURVE;\n            if (cofactor === _1n)\n                return this; // Fast-path\n            if (clearCofactor)\n                return clearCofactor(Point, this);\n            return this.multiplyUnsafe(CURVE.h);\n        }\n        toRawBytes(isCompressed = true) {\n            this.assertValidity();\n            return toBytes(Point, this, isCompressed);\n        }\n        toHex(isCompressed = true) {\n            return ut.bytesToHex(this.toRawBytes(isCompressed));\n        }\n    }\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n    const _bits = CURVE.nBitLength;\n    const wnaf = (0, curve_js_1.wNAF)(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n    // Validate if generator point is on curve\n    return {\n        CURVE,\n        ProjectivePoint: Point,\n        normPrivateKeyToScalar,\n        weierstrassEquation,\n        isWithinCurveOrder,\n    };\n}\nexports.weierstrassPoints = weierstrassPoints;\nfunction validateOpts(curve) {\n    const opts = (0, curve_js_1.validateBasic)(curve);\n    ut.validateObject(opts, {\n        hash: 'hash',\n        hmac: 'function',\n        randomBytes: 'function',\n    }, {\n        bits2int: 'function',\n        bits2int_modN: 'function',\n        lowS: 'boolean',\n    });\n    return Object.freeze({ lowS: true, ...opts });\n}\nfunction weierstrass(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER } = CURVE;\n    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n    function isValidFieldElement(num) {\n        return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n    }\n    function modN(a) {\n        return mod.mod(a, CURVE_ORDER);\n    }\n    function invN(a) {\n        return mod.invert(a, CURVE_ORDER);\n    }\n    const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder, } = weierstrassPoints({\n        ...CURVE,\n        toBytes(_c, point, isCompressed) {\n            const a = point.toAffine();\n            const x = Fp.toBytes(a.x);\n            const cat = ut.concatBytes;\n            if (isCompressed) {\n                return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n            }\n            else {\n                return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n            }\n        },\n        fromBytes(bytes) {\n            const len = bytes.length;\n            const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // this.assertValidity() is done inside of fromHex\n            if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n                const x = ut.bytesToNumberBE(tail);\n                if (!isValidFieldElement(x))\n                    throw new Error('Point is not on curve');\n                const y2 = weierstrassEquation(x); // y\u00b2 = x\u00b3 + ax + b\n                let y = Fp.sqrt(y2); // y = y\u00b2 ^ (p+1)/4\n                const isYOdd = (y & _1n) === _1n;\n                // ECDSA\n                const isHeadOdd = (head & 1) === 1;\n                if (isHeadOdd !== isYOdd)\n                    y = Fp.neg(y);\n                return { x, y };\n            }\n            else if (len === uncompressedLen && head === 0x04) {\n                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n                return { x, y };\n            }\n            else {\n                throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);\n            }\n        },\n    });\n    const numToNByteStr = (num) => ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n    function isBiggerThanHalfOrder(number) {\n        const HALF = CURVE_ORDER >> _1n;\n        return number > HALF;\n    }\n    function normalizeS(s) {\n        return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n    }\n    // slice bytes num\n    const slcNum = (b, from, to) => ut.bytesToNumberBE(b.slice(from, to));\n    /**\n     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n     */\n    class Signature {\n        constructor(r, s, recovery) {\n            this.r = r;\n            this.s = s;\n            this.recovery = recovery;\n            this.assertValidity();\n        }\n        // pair (bytes of r, bytes of s)\n        static fromCompact(hex) {\n            const l = CURVE.nByteLength;\n            hex = (0, utils_js_1.ensureBytes)('compactSignature', hex, l * 2);\n            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n        }\n        // DER encoded ECDSA signature\n        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n        static fromDER(hex) {\n            const { r, s } = exports.DER.toSig((0, utils_js_1.ensureBytes)('DER', hex));\n            return new Signature(r, s);\n        }\n        assertValidity() {\n            // can use assertGE here\n            if (!isWithinCurveOrder(this.r))\n                throw new Error('r must be 0 < r < CURVE.n');\n            if (!isWithinCurveOrder(this.s))\n                throw new Error('s must be 0 < s < CURVE.n');\n        }\n        addRecoveryBit(recovery) {\n            return new Signature(this.r, this.s, recovery);\n        }\n        recoverPublicKey(msgHash) {\n            const { r, s, recovery: rec } = this;\n            const h = bits2int_modN((0, utils_js_1.ensureBytes)('msgHash', msgHash)); // Truncate hash\n            if (rec == null || ![0, 1, 2, 3].includes(rec))\n                throw new Error('recovery id invalid');\n            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n            if (radj >= Fp.ORDER)\n                throw new Error('recovery id 2 or 3 invalid');\n            const prefix = (rec & 1) === 0 ? '02' : '03';\n            const R = Point.fromHex(prefix + numToNByteStr(radj));\n            const ir = invN(radj); // r^-1\n            const u1 = modN(-h * ir); // -hr^-1\n            const u2 = modN(s * ir); // sr^-1\n            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n            if (!Q)\n                throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n            Q.assertValidity();\n            return Q;\n        }\n        // Signatures should be low-s, to prevent malleability.\n        hasHighS() {\n            return isBiggerThanHalfOrder(this.s);\n        }\n        normalizeS() {\n            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n        }\n        // DER-encoded\n        toDERRawBytes() {\n            return ut.hexToBytes(this.toDERHex());\n        }\n        toDERHex() {\n            return exports.DER.hexFromSig({ r: this.r, s: this.s });\n        }\n        // padded bytes of r, then padded bytes of s\n        toCompactRawBytes() {\n            return ut.hexToBytes(this.toCompactHex());\n        }\n        toCompactHex() {\n            return numToNByteStr(this.r) + numToNByteStr(this.s);\n        }\n    }\n    const utils = {\n        isValidPrivateKey(privateKey) {\n            try {\n                normPrivateKeyToScalar(privateKey);\n                return true;\n            }\n            catch (error) {\n                return false;\n            }\n        },\n        normPrivateKeyToScalar: normPrivateKeyToScalar,\n        /**\n         * Produces cryptographically secure private key from random of size\n         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n         */\n        randomPrivateKey: () => {\n            const length = mod.getMinHashLength(CURVE.n);\n            return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n        },\n        /**\n         * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n         * Allows to massively speed-up `point.multiply(scalar)`.\n         * @returns cached point\n         * @example\n         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n         * fast.multiply(privKey); // much faster ECDH now\n         */\n        precompute(windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n            return point;\n        },\n    };\n    /**\n     * Computes public key for a private key. Checks for validity of the private key.\n     * @param privateKey private key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\n     */\n    function getPublicKey(privateKey, isCompressed = true) {\n        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n    }\n    /**\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n     */\n    function isProbPub(item) {\n        const arr = item instanceof Uint8Array;\n        const str = typeof item === 'string';\n        const len = (arr || str) && item.length;\n        if (arr)\n            return len === compressedLen || len === uncompressedLen;\n        if (str)\n            return len === 2 * compressedLen || len === 2 * uncompressedLen;\n        if (item instanceof Point)\n            return true;\n        return false;\n    }\n    /**\n     * ECDH (Elliptic Curve Diffie Hellman).\n     * Computes shared public key from private key and public key.\n     * Checks: 1) private key validity 2) shared key is on-curve.\n     * Does NOT hash the result.\n     * @param privateA private key\n     * @param publicB different public key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns shared public key\n     */\n    function getSharedSecret(privateA, publicB, isCompressed = true) {\n        if (isProbPub(privateA))\n            throw new Error('first arg must be private key');\n        if (!isProbPub(publicB))\n            throw new Error('second arg must be public key');\n        const b = Point.fromHex(publicB); // check for being on-curve\n        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n    }\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n    const bits2int = CURVE.bits2int ||\n        function (bytes) {\n            // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n            // for some cases, since bytes.length * 8 is not actual bitLength.\n            const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n            const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n            return delta > 0 ? num >> BigInt(delta) : num;\n        };\n    const bits2int_modN = CURVE.bits2int_modN ||\n        function (bytes) {\n            return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n        };\n    // NOTE: pads output with zero as per spec\n    const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n    /**\n     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n     */\n    function int2octets(num) {\n        if (typeof num !== 'bigint')\n            throw new Error('bigint expected');\n        if (!(_0n <= num && num < ORDER_MASK))\n            throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n        // works with order, can have different size than numToField!\n        return ut.numberToBytesBE(num, CURVE.nByteLength);\n    }\n    // Steps A, D of RFC6979 3.2\n    // Creates RFC6979 seed; converts msg/privKey to numbers.\n    // Used only in sign, not in verify.\n    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n    // Also it can be bigger for P224 + SHA256\n    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\n        if (['recovered', 'canonical'].some((k) => k in opts))\n            throw new Error('sign() legacy options not supported');\n        const { hash, randomBytes } = CURVE;\n        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n        if (lowS == null)\n            lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n        msgHash = (0, utils_js_1.ensureBytes)('msgHash', msgHash);\n        if (prehash)\n            msgHash = (0, utils_js_1.ensureBytes)('prehashed msgHash', hash(msgHash));\n        // We can't later call bits2octets, since nested bits2int is broken for curves\n        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n        const h1int = bits2int_modN(msgHash);\n        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n        const seedArgs = [int2octets(d), int2octets(h1int)];\n        // extraEntropy. RFC6979 3.6: additional k' (optional).\n        if (ent != null) {\n            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n            seedArgs.push((0, utils_js_1.ensureBytes)('extraEntropy', e)); // check for being bytes\n        }\n        const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n        // Converts signature params into point w r/s, checks result for validity.\n        function k2sig(kBytes) {\n            // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n            if (!isWithinCurveOrder(k))\n                return; // Important: all mod() calls here must be done over N\n            const ik = invN(k); // k^-1 mod n\n            const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n            const r = modN(q.x); // r = q.x mod n\n            if (r === _0n)\n                return;\n            // Can use scalar blinding b^-1(bm + bdr) where b \u2208 [1,q\u22121] according to\n            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n            const s = modN(ik * modN(m + r * d)); // Not using blinding here\n            if (s === _0n)\n                return;\n            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n            let normS = s;\n            if (lowS && isBiggerThanHalfOrder(s)) {\n                normS = normalizeS(s); // if lowS was passed, ensure s is always\n                recovery ^= 1; // // in the bottom half of N\n            }\n            return new Signature(r, normS, recovery); // use normS, not s\n        }\n        return { seed, k2sig };\n    }\n    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };\n    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };\n    /**\n     * Signs message hash with a private key.\n     * ```\n     * sign(m, d, k) where\n     *   (x, y) = G \u00d7 k\n     *   r = x mod n\n     *   s = (m + dr)/k mod n\n     * ```\n     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n     * @param privKey private key\n     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n     * @returns signature with recovery param\n     */\n    function sign(msgHash, privKey, opts = defaultSigOpts) {\n        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n        const C = CURVE;\n        const drbg = ut.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);\n        return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n    }\n    // Enable precomputes. Slows down first publicKey computation by 20ms.\n    Point.BASE._setWindowSize(8);\n    // utils.precompute(8, ProjectivePoint.BASE)\n    /**\n     * Verifies a signature against message hash and public key.\n     * Rejects lowS signatures by default: to override,\n     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n     *\n     * ```\n     * verify(r, s, h, P) where\n     *   U1 = hs^-1 mod n\n     *   U2 = rs^-1 mod n\n     *   R = U1\u22c5G - U2\u22c5P\n     *   mod(R.x, n) == r\n     * ```\n     */\n    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\n        const sg = signature;\n        msgHash = (0, utils_js_1.ensureBytes)('msgHash', msgHash);\n        publicKey = (0, utils_js_1.ensureBytes)('publicKey', publicKey);\n        if ('strict' in opts)\n            throw new Error('options.strict was renamed to lowS');\n        const { lowS, prehash } = opts;\n        let _sig = undefined;\n        let P;\n        try {\n            if (typeof sg === 'string' || sg instanceof Uint8Array) {\n                // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n                // Since DER can also be 2*nByteLength bytes, we check for it first.\n                try {\n                    _sig = Signature.fromDER(sg);\n                }\n                catch (derError) {\n                    if (!(derError instanceof exports.DER.Err))\n                        throw derError;\n                    _sig = Signature.fromCompact(sg);\n                }\n            }\n            else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n                const { r, s } = sg;\n                _sig = new Signature(r, s);\n            }\n            else {\n                throw new Error('PARSE');\n            }\n            P = Point.fromHex(publicKey);\n        }\n        catch (error) {\n            if (error.message === 'PARSE')\n                throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n            return false;\n        }\n        if (lowS && _sig.hasHighS())\n            return false;\n        if (prehash)\n            msgHash = CURVE.hash(msgHash);\n        const { r, s } = _sig;\n        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n        const is = invN(s); // s^-1\n        const u1 = modN(h * is); // u1 = hs^-1 mod n\n        const u2 = modN(r * is); // u2 = rs^-1 mod n\n        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1\u22c5G + u2\u22c5P\n        if (!R)\n            return false;\n        const v = modN(R.x);\n        return v === r;\n    }\n    return {\n        CURVE,\n        getPublicKey,\n        getSharedSecret,\n        sign,\n        verify,\n        ProjectivePoint: Point,\n        Signature,\n        utils,\n    };\n}\nexports.weierstrass = weierstrass;\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nfunction SWUFpSqrtRatio(Fp, Z) {\n    // Generic implementation\n    const q = Fp.ORDER;\n    let l = _0n;\n    for (let o = q - _1n; o % _2n === _0n; o /= _2n)\n        l += _1n;\n    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n    // 2n ** c1 == 2n << (c1-1)\n    const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n    let sqrtRatio = (u, v) => {\n        let tv1 = c6; // 1. tv1 = c6\n        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n        // 17. for i in (c1, c1 - 1, ..., 2):\n        for (let i = c1; i > _1n; i--) {\n            let tv5 = i - _2n; // 18.    tv5 = i - 2\n            tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n        }\n        return { isValid: isQR, value: tv3 };\n    };\n    if (Fp.ORDER % _4n === _3n) {\n        // sqrt_ratio_3mod4(u, v)\n        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n        sqrtRatio = (u, v) => {\n            let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n            return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n        };\n    }\n    // No curves uses that\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n    return sqrtRatio;\n}\nexports.SWUFpSqrtRatio = SWUFpSqrtRatio;\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nfunction mapToCurveSimpleSWU(Fp, opts) {\n    mod.validateField(Fp);\n    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n        throw new Error('mapToCurveSimpleSWU: invalid opts');\n    const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n    if (!Fp.isOdd)\n        throw new Error('Fp.isOdd is not implemented!');\n    // Input: u, an element of F.\n    // Output: (x, y), a point on E.\n    return (u) => {\n        // prettier-ignore\n        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n        tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n        tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n        tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n        tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n        tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n        tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n        y = Fp.mul(y, value); // 20.   y = y * y1\n        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n        x = Fp.div(x, tv4); // 25.   x = x / tv4\n        return { x, y };\n    };\n}\nexports.mapToCurveSimpleSWU = mapToCurveSimpleSWU;\n//# sourceMappingURL=weierstrass.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","validatePointOpts","curve","opts","curve_js_1","validateBasic","ut","validateObject","a","b","allowedPrivateKeyLengths","wrapPrivateKey","isTorsionFree","clearCofactor","allowInfinityPoint","fromBytes","toBytes","endo","Fp","eql","ZERO","Error","beta","splitScalar","Object","freeze","weierstrassPoints","weierstrassEquation","x","CURVE","x2","sqr","x3","mul","add","isWithinCurveOrder","num","_0n","n","assertGE","normPrivateKeyToScalar","key","lengths","nByteLength","Uint8Array","bytesToHex","includes","length","padStart","bytesToNumberBE","utils_js_1","ensureBytes","error","mod","assertPrjPoint","other","Point","_c","point","_isCompressed","toAffine","concatBytes","from","y","bytes","tail","subarray","BYTES","Gy","Gx","pointPrecomputes","Map","constructor","px","py","pz","isValid","fromAffine","p","ONE","normalizeZ","points","toInv","invertBatch","map","i","fromHex","hex","P","assertValidity","fromPrivateKey","privateKey","BASE","multiply","_setWindowSize","windowSize","_WINDOW_SIZE","delete","is0","left","right","hasEvenY","isOdd","equals","X1","Y1","Z1","X2","Y2","Z2","U1","U2","negate","neg","double","b3","_3n","X3","Y3","Z3","t0","t1","t2","t3","sub","t4","t5","subtract","wNAF","wnaf","wNAFCached","comp","multiplyUnsafe","I","_1n","unsafeLadder","k1neg","k1","k2neg","k2","k1p","d","k2p","scalar","f1p","f2p","constTimeNegate","fake","f","multiplyAndAddUnsafe","Q","G","sum","undefined","iz","z","inv","ax","ay","zz","cofactor","h","toRawBytes","isCompressed","toHex","_bits","nBitLength","Math","ceil","ProjectivePoint","validateOpts","hash","hmac","randomBytes","bits2int","bits2int_modN","lowS","SWUFpSqrtRatio","Z","q","ORDER","l","o","_2n","c1","_2n_pow_c1_1","_2n_pow_c1","c2","c3","c4","c6","pow","c7","sqrtRatio","u","v","tv1","tv2","tv3","tv5","tv4","isQR","cmov","tvv5","e1","value","_4n","sqrt","y1","y2","defineProperty","mapToCurveSimpleSWU","weierstrass","DER","b2n","h2b","Err","m","_parseInt","data","E","len","res","toSig","r","sBytes","s","rBytesLeft","hexFromSig","sig","slice","Number","parseInt","toString","shl","rhl","sl","rl","BigInt","curveDef","modN","CURVE_ORDER","isProbPub","item","arr","str","compressedLen","uncompressedLen","int2octets","ORDER_MASK","numberToBytesBE","prepSig","msgHash","defaultSigOpts","some","k","prehash","ent","h1int","seedArgs","e","push","seed","k2sig","kBytes","ik","invert","recovery","normS","Signature","cat","head","fromCompact","fromDER","addRecoveryBit","recoverPublicKey","rec","radj","R","prefix","ir","u1","u2","hasHighS","normalizeS","toDERRawBytes","hexToBytes","toDERHex","toCompactRawBytes","toCompactHex","utils","isValidPrivateKey","randomPrivateKey","getMinHashLength","mapHashToField","precompute","delta","bitMask","defaultVerOpts","getPublicKey","getSharedSecret","privateA","publicB","sign","privKey","C","createHmacDrbg","drbg","outputLen","verify","signature","publicKey","_sig","derError","message","is","validateField","A","B","tv6","div"]
}
