["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/hash_DOT_js/lib/hash/common.js"],"~:js","shadow$provide[82]=function(S,A,V,q){function F(){this.pending=null;this.pendingTotal=0;this.blockSize=this.constructor.blockSize;this.outSize=this.constructor.outSize;this.hmacStrength=this.constructor.hmacStrength;this.padLength=this.constructor.padLength/8;this.endian=\"big\";this._delta8=this.blockSize/8;this._delta32=this.blockSize/32}var G=A(81),r=A(71);q.BlockHash=F;F.prototype.update=function(y,e){y=G.toArray(y,e);this.pending=this.pending?this.pending.concat(y):y;this.pendingTotal+=y.length;\nif(this.pending.length>=this._delta8)for(y=this.pending,e=y.length%this._delta8,this.pending=y.slice(y.length-e,y.length),0===this.pending.length&&(this.pending=null),y=G.join32(y,0,y.length-e,this.endian),e=0;e<y.length;e+=this._delta32)this._update(y,e,e+this._delta32);return this};F.prototype.digest=function(y){this.update(this._pad());r(null===this.pending);return this._digest(y)};F.prototype._pad=function(){var y=this.pendingTotal,e=this._delta8,u=e-(y+this.padLength)%e;e=Array(u+this.padLength);\ne[0]=128;for(var p=1;p<u;p++)e[p]=0;y<<=3;if(\"big\"===this.endian){for(u=8;u<this.padLength;u++)e[p++]=0;e[p++]=0;e[p++]=0;e[p++]=0;e[p++]=0;e[p++]=y>>>24&255;e[p++]=y>>>16&255;e[p++]=y>>>8&255;e[p++]=y&255}else for(e[p++]=y&255,e[p++]=y>>>8&255,e[p++]=y>>>16&255,e[p++]=y>>>24&255,e[p++]=0,e[p++]=0,e[p++]=0,e[p++]=0,u=8;u<this.padLength;u++)e[p++]=0;return e}}","~:source","shadow$provide[82] = function(global,require,module,exports) {\n'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction BlockHash() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\nexports.BlockHash = BlockHash;\n\nBlockHash.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils.toArray(msg, enc);\n  if (!this.pending)\n    this.pending = msg;\n  else\n    this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n\n  // Enough data, try updating\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n\n    // Process pending data in blocks\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0)\n      this.pending = null;\n\n    msg = utils.join32(msg, 0, msg.length - r, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32)\n      this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\nBlockHash.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert(this.pending === null);\n\n  return this._digest(enc);\n};\n\nBlockHash.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - ((len + this.padLength) % bytes);\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n  for (var i = 1; i < k; i++)\n    res[i] = 0;\n\n  // Append length\n  len <<= 3;\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n  }\n\n  return res;\n};\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$minimalistic_assert$index","~$module$node_modules$hash_DOT_js$lib$hash$utils"]],"~:properties",["^5",["outSize","_delta8","BlockHash","update","_delta32","digest","blockSize","pendingTotal","padLength","hmacStrength","endian","pending","_pad"]],"~:compiled-at",1695041440745,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$hash_DOT_js$lib$hash$common.js\",\n\"lineCount\":3,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/hash_DOT_js/lib/hash/common.js\"],\n\"sourcesContent\":[\"shadow$provide[82] = function(global,require,module,exports) {\\n'use strict';\\n\\nvar utils = require('./utils');\\nvar assert = require('minimalistic-assert');\\n\\nfunction BlockHash() {\\n  this.pending = null;\\n  this.pendingTotal = 0;\\n  this.blockSize = this.constructor.blockSize;\\n  this.outSize = this.constructor.outSize;\\n  this.hmacStrength = this.constructor.hmacStrength;\\n  this.padLength = this.constructor.padLength / 8;\\n  this.endian = 'big';\\n\\n  this._delta8 = this.blockSize / 8;\\n  this._delta32 = this.blockSize / 32;\\n}\\nexports.BlockHash = BlockHash;\\n\\nBlockHash.prototype.update = function update(msg, enc) {\\n  // Convert message to array, pad it, and join into 32bit blocks\\n  msg = utils.toArray(msg, enc);\\n  if (!this.pending)\\n    this.pending = msg;\\n  else\\n    this.pending = this.pending.concat(msg);\\n  this.pendingTotal += msg.length;\\n\\n  // Enough data, try updating\\n  if (this.pending.length >= this._delta8) {\\n    msg = this.pending;\\n\\n    // Process pending data in blocks\\n    var r = msg.length % this._delta8;\\n    this.pending = msg.slice(msg.length - r, msg.length);\\n    if (this.pending.length === 0)\\n      this.pending = null;\\n\\n    msg = utils.join32(msg, 0, msg.length - r, this.endian);\\n    for (var i = 0; i < msg.length; i += this._delta32)\\n      this._update(msg, i, i + this._delta32);\\n  }\\n\\n  return this;\\n};\\n\\nBlockHash.prototype.digest = function digest(enc) {\\n  this.update(this._pad());\\n  assert(this.pending === null);\\n\\n  return this._digest(enc);\\n};\\n\\nBlockHash.prototype._pad = function pad() {\\n  var len = this.pendingTotal;\\n  var bytes = this._delta8;\\n  var k = bytes - ((len + this.padLength) % bytes);\\n  var res = new Array(k + this.padLength);\\n  res[0] = 0x80;\\n  for (var i = 1; i < k; i++)\\n    res[i] = 0;\\n\\n  // Append length\\n  len <<= 3;\\n  if (this.endian === 'big') {\\n    for (var t = 8; t < this.padLength; t++)\\n      res[i++] = 0;\\n\\n    res[i++] = 0;\\n    res[i++] = 0;\\n    res[i++] = 0;\\n    res[i++] = 0;\\n    res[i++] = (len >>> 24) & 0xff;\\n    res[i++] = (len >>> 16) & 0xff;\\n    res[i++] = (len >>> 8) & 0xff;\\n    res[i++] = len & 0xff;\\n  } else {\\n    res[i++] = len & 0xff;\\n    res[i++] = (len >>> 8) & 0xff;\\n    res[i++] = (len >>> 16) & 0xff;\\n    res[i++] = (len >>> 24) & 0xff;\\n    res[i++] = 0;\\n    res[i++] = 0;\\n    res[i++] = 0;\\n    res[i++] = 0;\\n\\n    for (t = 8; t < this.padLength; t++)\\n      res[i++] = 0;\\n  }\\n\\n  return res;\\n};\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"BlockHash\",\"pending\",\"pendingTotal\",\"blockSize\",\"constructor\",\"outSize\",\"hmacStrength\",\"padLength\",\"endian\",\"_delta8\",\"_delta32\",\"utils\",\"assert\",\"prototype\",\"update\",\"BlockHash.prototype.update\",\"msg\",\"enc\",\"toArray\",\"concat\",\"length\",\"i\",\"r\",\"slice\",\"join32\",\"_update\",\"digest\",\"BlockHash.prototype.digest\",\"_pad\",\"_digest\",\"BlockHash.prototype._pad\",\"len\",\"bytes\",\"k\",\"res\",\"Array\",\"t\"]\n}\n"]