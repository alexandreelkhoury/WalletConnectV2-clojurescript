shadow$provide.module$node_modules$$tanstack$query_core$build$lib$mutationCache=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});var notifyManager=require("module$node_modules$$tanstack$query_core$build$lib$notifyManager"),mutation$jscomp$0=require("module$node_modules$$tanstack$query_core$build$lib$mutation"),utils=require("module$node_modules$$tanstack$query_core$build$lib$utils");global=require("module$node_modules$$tanstack$query_core$build$lib$subscribable");
class MutationCache extends global.Subscribable{constructor(config){super();this.config=config||{};this.mutations=[];this.mutationId=0}build(client,options,state){client=new mutation$jscomp$0.Mutation({mutationCache:this,logger:client.getLogger(),mutationId:++this.mutationId,options:client.defaultMutationOptions(options),state,defaultOptions:options.mutationKey?client.getMutationDefaults(options.mutationKey):void 0});this.add(client);return client}add(mutation){this.mutations.push(mutation);this.notify({type:"added",
mutation})}remove(mutation){this.mutations=this.mutations.filter(x=>x!==mutation);this.notify({type:"removed",mutation})}clear(){notifyManager.notifyManager.batch(()=>{this.mutations.forEach(mutation=>{this.remove(mutation)})})}getAll(){return this.mutations}find(filters){"undefined"===typeof filters.exact&&(filters.exact=!0);return this.mutations.find(mutation=>utils.matchMutation(filters,mutation))}findAll(filters){return this.mutations.filter(mutation=>utils.matchMutation(filters,mutation))}notify(event){notifyManager.notifyManager.batch(()=>
{this.listeners.forEach(({listener})=>{listener(event)})})}resumePausedMutations(){var _this$resuming;return this.resuming=(null!=(_this$resuming=this.resuming)?_this$resuming:Promise.resolve()).then(()=>{const pausedMutations=this.mutations.filter(x=>x.state.isPaused);return notifyManager.notifyManager.batch(()=>pausedMutations.reduce((promise,mutation)=>promise.then(()=>mutation.continue().catch(utils.noop)),Promise.resolve()))}).then(()=>{this.resuming=void 0})}}exports.MutationCache=MutationCache}
//# sourceMappingURL=module$node_modules$$tanstack$query_core$build$lib$mutationCache.js.map
