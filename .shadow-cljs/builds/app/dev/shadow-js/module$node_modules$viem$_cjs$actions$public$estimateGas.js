["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/viem/_cjs/actions/public/estimateGas.js"],"~:js","shadow$provide.module$node_modules$viem$_cjs$actions$public$estimateGas=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.estimateGas=void 0;const parseAccount_js_1=require(\"module$node_modules$viem$_cjs$accounts$utils$parseAccount\"),account_js_1=require(\"module$node_modules$viem$_cjs$errors$account\"),toHex_js_1=require(\"module$node_modules$viem$_cjs$utils$encoding$toHex\"),getEstimateGasError_js_1=require(\"module$node_modules$viem$_cjs$utils$errors$getEstimateGasError\"),\nextract_js_1=require(\"module$node_modules$viem$_cjs$utils$formatters$extract\"),transactionRequest_js_1=require(\"module$node_modules$viem$_cjs$utils$formatters$transactionRequest\"),assertRequest_js_1=require(\"module$node_modules$viem$_cjs$utils$transaction$assertRequest\"),prepareTransactionRequest_js_1=require(\"module$node_modules$viem$_cjs$actions$wallet$prepareTransactionRequest\");exports.estimateGas=async function(client,args){var account_=args.account??client.account;if(!account_)throw new account_js_1.AccountNotFoundError({docsPath:\"/docs/actions/public/estimateGas\"});\naccount_=(0,parseAccount_js_1.parseAccount)(account_);try{const {accessList,blockNumber,blockTag,data,gas,gasPrice,maxFeePerGas,maxPriorityFeePerGas,nonce,to,value,...rest}=\"local\"===account_.type?await (0,prepareTransactionRequest_js_1.prepareTransactionRequest)(client,args):args,block=(blockNumber?(0,toHex_js_1.numberToHex)(blockNumber):void 0)||blockTag;(0,assertRequest_js_1.assertRequest)(args);const format=client.chain?.formatters?.transactionRequest?.format||transactionRequest_js_1.formatTransactionRequest,\nrequest=format({...(0,extract_js_1.extract)(rest,{format}),from:account_.address,accessList,data,gas,gasPrice,maxFeePerGas,maxPriorityFeePerGas,nonce,to,value}),balance=await client.request({method:\"eth_estimateGas\",params:block?[request,block]:[request]});return BigInt(balance)}catch(err){throw(0,getEstimateGasError_js_1.getEstimateGasError)(err,{...args,account:account_,chain:client.chain});}}}","~:source","shadow$provide[\"module$node_modules$viem$_cjs$actions$public$estimateGas\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.estimateGas = void 0;\nconst parseAccount_js_1 = require(\"../../accounts/utils/parseAccount.js\");\nconst account_js_1 = require(\"../../errors/account.js\");\nconst toHex_js_1 = require(\"../../utils/encoding/toHex.js\");\nconst getEstimateGasError_js_1 = require(\"../../utils/errors/getEstimateGasError.js\");\nconst extract_js_1 = require(\"../../utils/formatters/extract.js\");\nconst transactionRequest_js_1 = require(\"../../utils/formatters/transactionRequest.js\");\nconst assertRequest_js_1 = require(\"../../utils/transaction/assertRequest.js\");\nconst prepareTransactionRequest_js_1 = require(\"../wallet/prepareTransactionRequest.js\");\nasync function estimateGas(client, args) {\n    const account_ = args.account ?? client.account;\n    if (!account_)\n        throw new account_js_1.AccountNotFoundError({\n            docsPath: '/docs/actions/public/estimateGas',\n        });\n    const account = (0, parseAccount_js_1.parseAccount)(account_);\n    try {\n        const { accessList, blockNumber, blockTag, data, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, nonce, to, value, ...rest } = account.type === 'local'\n            ? (await (0, prepareTransactionRequest_js_1.prepareTransactionRequest)(client, args))\n            : args;\n        const blockNumberHex = blockNumber ? (0, toHex_js_1.numberToHex)(blockNumber) : undefined;\n        const block = blockNumberHex || blockTag;\n        (0, assertRequest_js_1.assertRequest)(args);\n        const format = client.chain?.formatters?.transactionRequest?.format ||\n            transactionRequest_js_1.formatTransactionRequest;\n        const request = format({\n            ...(0, extract_js_1.extract)(rest, { format }),\n            from: account.address,\n            accessList,\n            data,\n            gas,\n            gasPrice,\n            maxFeePerGas,\n            maxPriorityFeePerGas,\n            nonce,\n            to,\n            value,\n        });\n        const balance = await client.request({\n            method: 'eth_estimateGas',\n            params: block ? [request, block] : [request],\n        });\n        return BigInt(balance);\n    }\n    catch (err) {\n        throw (0, getEstimateGasError_js_1.getEstimateGasError)(err, {\n            ...args,\n            account,\n            chain: client.chain,\n        });\n    }\n}\nexports.estimateGas = estimateGas;\n//# sourceMappingURL=estimateGas.js.map\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$viem$_cjs$actions$wallet$prepareTransactionRequest","~$module$node_modules$viem$_cjs$utils$transaction$assertRequest","~$module$node_modules$viem$_cjs$utils$formatters$transactionRequest","~$module$node_modules$viem$_cjs$errors$account","~$module$node_modules$viem$_cjs$utils$formatters$extract","~$shadow.js","~$module$node_modules$viem$_cjs$utils$errors$getEstimateGasError","~$module$node_modules$viem$_cjs$accounts$utils$parseAccount","~$module$node_modules$viem$_cjs$utils$encoding$toHex"]],"~:properties",["^5",["gasPrice","params","accessList","method","__esModule","estimateGas","gas","maxPriorityFeePerGas","maxFeePerGas","value","account","docsPath","from","nonce","to","data","chain","format"]],"~:compiled-at",1695111490257,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$viem$_cjs$actions$public$estimateGas.js\",\n\"lineCount\":4,\n\"mappings\":\"AAAAA,cAAA,CAAA,wDAAA,CAA6E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAErHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CACAH,QAAQI,CAAAA,WAAR,CAAsB,IAAK,EAC3B,OAAMC,kBAAoBP,OAAA,CAAQ,2DAAR,CAA1B,CACMQ,aAAeR,OAAA,CAAQ,8CAAR,CADrB,CAEMS,WAAaT,OAAA,CAAQ,oDAAR,CAFnB,CAGMU,yBAA2BV,OAAA,CAAQ,gEAAR,CAHjC;AAIMW,aAAeX,OAAA,CAAQ,wDAAR,CAJrB,CAKMY,wBAA0BZ,OAAA,CAAQ,mEAAR,CALhC,CAMMa,mBAAqBb,OAAA,CAAQ,+DAAR,CAN3B,CAOMc,+BAAiCd,OAAA,CAAQ,wEAAR,CA4CvCE,QAAQI,CAAAA,WAAR,CA3CAA,cAA0B,CAACS,MAAD,CAASC,IAAT,CAAe,CACrC,IAAMC,SAAWD,IAAKE,CAAAA,OAAhBD,EAA2BF,MAAOG,CAAAA,OACxC,IAAI,CAACD,QAAL,CACI,KAAM,KAAIT,YAAaW,CAAAA,oBAAjB,CAAsC,CACxCC,SAAU,kCAD8B,CAAtC,CAAN;AAGEF,QAAAA,CAAU,GAAIX,iBAAkBc,CAAAA,YAAtB,EAAoCJ,QAApC,CAChB,IAAI,CACA,MAAM,CAAEK,UAAF,CAAcC,WAAd,CAA2BC,QAA3B,CAAqCC,IAArC,CAA2CC,GAA3C,CAAgDC,QAAhD,CAA0DC,YAA1D,CAAwEC,oBAAxE,CAA8FC,KAA9F,CAAqGC,EAArG,CAAyG1B,KAAzG,CAAgH,GAAG2B,IAAnH,CAAA,CAA6I,OAAjB,GAAAd,QAAQe,CAAAA,IAAR,CAC3H,MAAM,GAAInB,8BAA+BoB,CAAAA,yBAAnC,EAA8DnB,MAA9D,CAAsEC,IAAtE,CADqH,CAE5HA,IAFN,CAIMmB,OADiBZ,WAAAa,CAAc,GAAI3B,UAAW4B,CAAAA,WAAf,EAA4Bd,WAA5B,CAAda,CAAyDE,IAAAA,EAC1EH,GAA0BX,QAChC,IAAIX,kBAAmB0B,CAAAA,aAAvB,EAAsCvB,IAAtC,CACA,OAAMwB,OAASzB,MAAO0B,CAAAA,KAAOC,EAAAA,UAAYC,EAAAA,kBAAoBH,EAAAA,MAAvDA,EACF5B,uBAAwBgC,CAAAA,wBAD5B;AAEMC,QAAUL,MAAA,CAAO,CACnB,GAAG,GAAI7B,YAAamC,CAAAA,OAAjB,EAA0Bd,IAA1B,CAAgC,CAAEQ,MAAF,CAAhC,CADgB,CAEnBO,KAAM7B,QAAQ8B,CAAAA,OAFK,CAGnB1B,UAHmB,CAInBG,IAJmB,CAKnBC,GALmB,CAMnBC,QANmB,CAOnBC,YAPmB,CAQnBC,oBARmB,CASnBC,KATmB,CAUnBC,EAVmB,CAWnB1B,KAXmB,CAAP,CAFhB,CAeM4C,QAAU,MAAMlC,MAAO8B,CAAAA,OAAP,CAAe,CACjCK,OAAQ,iBADyB,CAEjCC,OAAQhB,KAAA,CAAQ,CAACU,OAAD,CAAUV,KAAV,CAAR,CAA2B,CAACU,OAAD,CAFF,CAAf,CAItB,OAAOO,OAAA,CAAOH,OAAP,CA1BP,CA4BJ,MAAOI,GAAP,CAAY,CACR,KAAM,GAAI3C,wBAAyB4C,CAAAA,mBAA7B,EAAkDD,GAAlD,CAAuD,CACzD,GAAGrC,IADsD,CAEzDE,QAAAA,QAFyD,CAGzDuB,MAAO1B,MAAO0B,CAAAA,KAH2C,CAAvD,CAAN,CADQ,CAnCyB,CAZ4E;\",\n\"sources\":[\"node_modules/viem/_cjs/actions/public/estimateGas.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$viem$_cjs$actions$public$estimateGas\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nexports.estimateGas = void 0;\\nconst parseAccount_js_1 = require(\\\"../../accounts/utils/parseAccount.js\\\");\\nconst account_js_1 = require(\\\"../../errors/account.js\\\");\\nconst toHex_js_1 = require(\\\"../../utils/encoding/toHex.js\\\");\\nconst getEstimateGasError_js_1 = require(\\\"../../utils/errors/getEstimateGasError.js\\\");\\nconst extract_js_1 = require(\\\"../../utils/formatters/extract.js\\\");\\nconst transactionRequest_js_1 = require(\\\"../../utils/formatters/transactionRequest.js\\\");\\nconst assertRequest_js_1 = require(\\\"../../utils/transaction/assertRequest.js\\\");\\nconst prepareTransactionRequest_js_1 = require(\\\"../wallet/prepareTransactionRequest.js\\\");\\nasync function estimateGas(client, args) {\\n    const account_ = args.account ?? client.account;\\n    if (!account_)\\n        throw new account_js_1.AccountNotFoundError({\\n            docsPath: '/docs/actions/public/estimateGas',\\n        });\\n    const account = (0, parseAccount_js_1.parseAccount)(account_);\\n    try {\\n        const { accessList, blockNumber, blockTag, data, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, nonce, to, value, ...rest } = account.type === 'local'\\n            ? (await (0, prepareTransactionRequest_js_1.prepareTransactionRequest)(client, args))\\n            : args;\\n        const blockNumberHex = blockNumber ? (0, toHex_js_1.numberToHex)(blockNumber) : undefined;\\n        const block = blockNumberHex || blockTag;\\n        (0, assertRequest_js_1.assertRequest)(args);\\n        const format = client.chain?.formatters?.transactionRequest?.format ||\\n            transactionRequest_js_1.formatTransactionRequest;\\n        const request = format({\\n            ...(0, extract_js_1.extract)(rest, { format }),\\n            from: account.address,\\n            accessList,\\n            data,\\n            gas,\\n            gasPrice,\\n            maxFeePerGas,\\n            maxPriorityFeePerGas,\\n            nonce,\\n            to,\\n            value,\\n        });\\n        const balance = await client.request({\\n            method: 'eth_estimateGas',\\n            params: block ? [request, block] : [request],\\n        });\\n        return BigInt(balance);\\n    }\\n    catch (err) {\\n        throw (0, getEstimateGasError_js_1.getEstimateGasError)(err, {\\n            ...args,\\n            account,\\n            chain: client.chain,\\n        });\\n    }\\n}\\nexports.estimateGas = estimateGas;\\n//# sourceMappingURL=estimateGas.js.map\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"estimateGas\",\"parseAccount_js_1\",\"account_js_1\",\"toHex_js_1\",\"getEstimateGasError_js_1\",\"extract_js_1\",\"transactionRequest_js_1\",\"assertRequest_js_1\",\"prepareTransactionRequest_js_1\",\"client\",\"args\",\"account_\",\"account\",\"AccountNotFoundError\",\"docsPath\",\"parseAccount\",\"accessList\",\"blockNumber\",\"blockTag\",\"data\",\"gas\",\"gasPrice\",\"maxFeePerGas\",\"maxPriorityFeePerGas\",\"nonce\",\"to\",\"rest\",\"type\",\"prepareTransactionRequest\",\"block\",\"blockNumberHex\",\"numberToHex\",\"undefined\",\"assertRequest\",\"format\",\"chain\",\"formatters\",\"transactionRequest\",\"formatTransactionRequest\",\"request\",\"extract\",\"from\",\"address\",\"balance\",\"method\",\"params\",\"BigInt\",\"err\",\"getEstimateGasError\"]\n}\n"]