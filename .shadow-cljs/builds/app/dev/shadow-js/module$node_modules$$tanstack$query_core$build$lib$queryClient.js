["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@tanstack/query-core/build/lib/queryClient.js"],"~:js","shadow$provide.module$node_modules$$tanstack$query_core$build$lib$queryClient=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});var utils=require(\"module$node_modules$$tanstack$query_core$build$lib$utils\"),queryCache=require(\"module$node_modules$$tanstack$query_core$build$lib$queryCache\"),mutationCache=require(\"module$node_modules$$tanstack$query_core$build$lib$mutationCache\"),focusManager=require(\"module$node_modules$$tanstack$query_core$build$lib$focusManager\"),\nonlineManager=require(\"module$node_modules$$tanstack$query_core$build$lib$onlineManager\"),notifyManager=require(\"module$node_modules$$tanstack$query_core$build$lib$notifyManager\"),infiniteQueryBehavior=require(\"module$node_modules$$tanstack$query_core$build$lib$infiniteQueryBehavior\"),logger=require(\"module$node_modules$$tanstack$query_core$build$lib$logger\");class QueryClient{constructor(config={}){this.queryCache=config.queryCache||new queryCache.QueryCache;this.mutationCache=config.mutationCache||\nnew mutationCache.MutationCache;this.logger=config.logger||logger.defaultLogger;this.defaultOptions=config.defaultOptions||{};this.queryDefaults=[];this.mutationDefaults=[];this.mountCount=0;config.logger&&this.logger.error(\"Passing a custom logger has been deprecated and will be removed in the next major version.\")}mount(){this.mountCount++;1===this.mountCount&&(this.unsubscribeFocus=focusManager.focusManager.subscribe(()=>{focusManager.focusManager.isFocused()&&(this.resumePausedMutations(),this.queryCache.onFocus())}),\nthis.unsubscribeOnline=onlineManager.onlineManager.subscribe(()=>{onlineManager.onlineManager.isOnline()&&(this.resumePausedMutations(),this.queryCache.onOnline())}))}unmount(){var _this$unsubscribeFocu,_this$unsubscribeOnli;this.mountCount--;0===this.mountCount&&(null==(_this$unsubscribeFocu=this.unsubscribeFocus)?void 0:_this$unsubscribeFocu.call(this),this.unsubscribeFocus=void 0,null==(_this$unsubscribeOnli=this.unsubscribeOnline)?void 0:_this$unsubscribeOnli.call(this),this.unsubscribeOnline=\nvoid 0)}isFetching(arg1,arg2){[arg1]=utils.parseFilterArgs(arg1,arg2);arg1.fetchStatus=\"fetching\";return this.queryCache.findAll(arg1).length}isMutating(filters){return this.mutationCache.findAll({...filters,fetching:!0}).length}getQueryData(queryKey,filters){var _this$queryCache$find;return null==(_this$queryCache$find=this.queryCache.find(queryKey,filters))?void 0:_this$queryCache$find.state.data}ensureQueryData(arg1,arg2,arg3){arg1=utils.parseQueryArgs(arg1,arg2,arg3);return(arg2=this.getQueryData(arg1.queryKey))?\nPromise.resolve(arg2):this.fetchQuery(arg1)}getQueriesData(queryKeyOrFilters){return this.getQueryCache().findAll(queryKeyOrFilters).map(({queryKey,state})=>[queryKey,state.data])}setQueryData(queryKey,updater,options){const query=this.queryCache.find(queryKey);updater=utils.functionalUpdate(updater,null==query?void 0:query.state.data);if(\"undefined\"!==typeof updater)return queryKey=utils.parseQueryArgs(queryKey),queryKey=this.defaultQueryOptions(queryKey),this.queryCache.build(this,queryKey).setData(updater,\n{...options,manual:!0})}setQueriesData(queryKeyOrFilters,updater,options){return notifyManager.notifyManager.batch(()=>this.getQueryCache().findAll(queryKeyOrFilters).map(({queryKey})=>[queryKey,this.setQueryData(queryKey,updater,options)]))}getQueryState(queryKey,filters){var _this$queryCache$find2;return null==(_this$queryCache$find2=this.queryCache.find(queryKey,filters))?void 0:_this$queryCache$find2.state}removeQueries(arg1,arg2){const [filters]=utils.parseFilterArgs(arg1,arg2),queryCache=this.queryCache;\nnotifyManager.notifyManager.batch(()=>{queryCache.findAll(filters).forEach(query=>{queryCache.remove(query)})})}resetQueries(arg1,arg2,arg3){const [filters,options]=utils.parseFilterArgs(arg1,arg2,arg3),queryCache=this.queryCache,refetchFilters={type:\"active\",...filters};return notifyManager.notifyManager.batch(()=>{queryCache.findAll(filters).forEach(query=>{query.reset()});return this.refetchQueries(refetchFilters,options)})}cancelQueries(arg1,arg2,arg3){const [filters,cancelOptions={}]=utils.parseFilterArgs(arg1,\narg2,arg3);\"undefined\"===typeof cancelOptions.revert&&(cancelOptions.revert=!0);arg1=notifyManager.notifyManager.batch(()=>this.queryCache.findAll(filters).map(query=>query.cancel(cancelOptions)));return Promise.all(arg1).then(utils.noop).catch(utils.noop)}invalidateQueries(arg1,arg2,arg3){const [filters,options]=utils.parseFilterArgs(arg1,arg2,arg3);return notifyManager.notifyManager.batch(()=>{var _ref,_filters$refetchType;this.queryCache.findAll(filters).forEach(query=>{query.invalidate()});if(\"none\"===\nfilters.refetchType)return Promise.resolve();const refetchFilters={...filters,type:null!=(_ref=null!=(_filters$refetchType=filters.refetchType)?_filters$refetchType:filters.type)?_ref:\"active\"};return this.refetchQueries(refetchFilters,options)})}refetchQueries(arg1,arg2,arg3){const [filters,options]=utils.parseFilterArgs(arg1,arg2,arg3);arg1=notifyManager.notifyManager.batch(()=>this.queryCache.findAll(filters).filter(query=>!query.isDisabled()).map(query=>{var _options$cancelRefetc;return query.fetch(void 0,\n{...options,cancelRefetch:null!=(_options$cancelRefetc=null==options?void 0:options.cancelRefetch)?_options$cancelRefetc:!0,meta:{refetchPage:filters.refetchPage}})}));arg1=Promise.all(arg1).then(utils.noop);null!=options&&options.throwOnError||(arg1=arg1.catch(utils.noop));return arg1}fetchQuery(arg1,arg2,arg3){arg1=utils.parseQueryArgs(arg1,arg2,arg3);arg1=this.defaultQueryOptions(arg1);\"undefined\"===typeof arg1.retry&&(arg1.retry=!1);arg2=this.queryCache.build(this,arg1);return arg2.isStaleByTime(arg1.staleTime)?\narg2.fetch(arg1):Promise.resolve(arg2.state.data)}prefetchQuery(arg1,arg2,arg3){return this.fetchQuery(arg1,arg2,arg3).then(utils.noop).catch(utils.noop)}fetchInfiniteQuery(arg1,arg2,arg3){arg1=utils.parseQueryArgs(arg1,arg2,arg3);arg1.behavior=infiniteQueryBehavior.infiniteQueryBehavior();return this.fetchQuery(arg1)}prefetchInfiniteQuery(arg1,arg2,arg3){return this.fetchInfiniteQuery(arg1,arg2,arg3).then(utils.noop).catch(utils.noop)}resumePausedMutations(){return this.mutationCache.resumePausedMutations()}getQueryCache(){return this.queryCache}getMutationCache(){return this.mutationCache}getLogger(){return this.logger}getDefaultOptions(){return this.defaultOptions}setDefaultOptions(options){this.defaultOptions=\noptions}setQueryDefaults(queryKey,options){const result=this.queryDefaults.find(x=>utils.hashQueryKey(queryKey)===utils.hashQueryKey(x.queryKey));result?result.defaultOptions=options:this.queryDefaults.push({queryKey,defaultOptions:options})}getQueryDefaults(queryKey){if(queryKey){var firstMatchingDefaults=this.queryDefaults.find(x=>utils.partialMatchKey(queryKey,x.queryKey));1<this.queryDefaults.filter(x=>utils.partialMatchKey(queryKey,x.queryKey)).length&&this.logger.error(\"[QueryClient] Several query defaults match with key '\"+\nJSON.stringify(queryKey)+\"'. The first matching query defaults are used. Please check how query defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetquerydefaults.\");return null==firstMatchingDefaults?void 0:firstMatchingDefaults.defaultOptions}}setMutationDefaults(mutationKey,options){const result=this.mutationDefaults.find(x=>utils.hashQueryKey(mutationKey)===utils.hashQueryKey(x.mutationKey));result?result.defaultOptions=options:\nthis.mutationDefaults.push({mutationKey,defaultOptions:options})}getMutationDefaults(mutationKey){if(mutationKey){var firstMatchingDefaults=this.mutationDefaults.find(x=>utils.partialMatchKey(mutationKey,x.mutationKey));1<this.mutationDefaults.filter(x=>utils.partialMatchKey(mutationKey,x.mutationKey)).length&&this.logger.error(\"[QueryClient] Several mutation defaults match with key '\"+JSON.stringify(mutationKey)+\"'. The first matching mutation defaults are used. Please check how mutation defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetmutationdefaults.\");\nreturn null==firstMatchingDefaults?void 0:firstMatchingDefaults.defaultOptions}}defaultQueryOptions(options){if(null!=options&&options._defaulted)return options;options={...this.defaultOptions.queries,...this.getQueryDefaults(null==options?void 0:options.queryKey),...options,_defaulted:!0};!options.queryHash&&options.queryKey&&(options.queryHash=utils.hashQueryKeyByOptions(options.queryKey,options));\"undefined\"===typeof options.refetchOnReconnect&&(options.refetchOnReconnect=\"always\"!==options.networkMode);\n\"undefined\"===typeof options.useErrorBoundary&&(options.useErrorBoundary=!!options.suspense);return options}defaultMutationOptions(options){return null!=options&&options._defaulted?options:{...this.defaultOptions.mutations,...this.getMutationDefaults(null==options?void 0:options.mutationKey),...options,_defaulted:!0}}clear(){this.queryCache.clear();this.mutationCache.clear()}}exports.QueryClient=QueryClient}","~:source","shadow$provide[\"module$node_modules$$tanstack$query_core$build$lib$queryClient\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar utils = require('./utils.js');\nvar queryCache = require('./queryCache.js');\nvar mutationCache = require('./mutationCache.js');\nvar focusManager = require('./focusManager.js');\nvar onlineManager = require('./onlineManager.js');\nvar notifyManager = require('./notifyManager.js');\nvar infiniteQueryBehavior = require('./infiniteQueryBehavior.js');\nvar logger = require('./logger');\n\n// CLASS\nclass QueryClient {\n  constructor(config = {}) {\n    this.queryCache = config.queryCache || new queryCache.QueryCache();\n    this.mutationCache = config.mutationCache || new mutationCache.MutationCache();\n    this.logger = config.logger || logger.defaultLogger;\n    this.defaultOptions = config.defaultOptions || {};\n    this.queryDefaults = [];\n    this.mutationDefaults = [];\n    this.mountCount = 0;\n\n    if (process.env.NODE_ENV !== 'production' && config.logger) {\n      this.logger.error(\"Passing a custom logger has been deprecated and will be removed in the next major version.\");\n    }\n  }\n\n  mount() {\n    this.mountCount++;\n    if (this.mountCount !== 1) return;\n    this.unsubscribeFocus = focusManager.focusManager.subscribe(() => {\n      if (focusManager.focusManager.isFocused()) {\n        this.resumePausedMutations();\n        this.queryCache.onFocus();\n      }\n    });\n    this.unsubscribeOnline = onlineManager.onlineManager.subscribe(() => {\n      if (onlineManager.onlineManager.isOnline()) {\n        this.resumePausedMutations();\n        this.queryCache.onOnline();\n      }\n    });\n  }\n\n  unmount() {\n    var _this$unsubscribeFocu, _this$unsubscribeOnli;\n\n    this.mountCount--;\n    if (this.mountCount !== 0) return;\n    (_this$unsubscribeFocu = this.unsubscribeFocus) == null ? void 0 : _this$unsubscribeFocu.call(this);\n    this.unsubscribeFocus = undefined;\n    (_this$unsubscribeOnli = this.unsubscribeOnline) == null ? void 0 : _this$unsubscribeOnli.call(this);\n    this.unsubscribeOnline = undefined;\n  }\n\n  isFetching(arg1, arg2) {\n    const [filters] = utils.parseFilterArgs(arg1, arg2);\n    filters.fetchStatus = 'fetching';\n    return this.queryCache.findAll(filters).length;\n  }\n\n  isMutating(filters) {\n    return this.mutationCache.findAll({ ...filters,\n      fetching: true\n    }).length;\n  }\n\n  getQueryData(queryKey, filters) {\n    var _this$queryCache$find;\n\n    return (_this$queryCache$find = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find.state.data;\n  }\n\n  ensureQueryData(arg1, arg2, arg3) {\n    const parsedOptions = utils.parseQueryArgs(arg1, arg2, arg3);\n    const cachedData = this.getQueryData(parsedOptions.queryKey);\n    return cachedData ? Promise.resolve(cachedData) : this.fetchQuery(parsedOptions);\n  }\n\n  getQueriesData(queryKeyOrFilters) {\n    return this.getQueryCache().findAll(queryKeyOrFilters).map(({\n      queryKey,\n      state\n    }) => {\n      const data = state.data;\n      return [queryKey, data];\n    });\n  }\n\n  setQueryData(queryKey, updater, options) {\n    const query = this.queryCache.find(queryKey);\n    const prevData = query == null ? void 0 : query.state.data;\n    const data = utils.functionalUpdate(updater, prevData);\n\n    if (typeof data === 'undefined') {\n      return undefined;\n    }\n\n    const parsedOptions = utils.parseQueryArgs(queryKey);\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions);\n    return this.queryCache.build(this, defaultedOptions).setData(data, { ...options,\n      manual: true\n    });\n  }\n\n  setQueriesData(queryKeyOrFilters, updater, options) {\n    return notifyManager.notifyManager.batch(() => this.getQueryCache().findAll(queryKeyOrFilters).map(({\n      queryKey\n    }) => [queryKey, this.setQueryData(queryKey, updater, options)]));\n  }\n\n  getQueryState(queryKey, filters) {\n    var _this$queryCache$find2;\n\n    return (_this$queryCache$find2 = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find2.state;\n  }\n\n  removeQueries(arg1, arg2) {\n    const [filters] = utils.parseFilterArgs(arg1, arg2);\n    const queryCache = this.queryCache;\n    notifyManager.notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        queryCache.remove(query);\n      });\n    });\n  }\n\n  resetQueries(arg1, arg2, arg3) {\n    const [filters, options] = utils.parseFilterArgs(arg1, arg2, arg3);\n    const queryCache = this.queryCache;\n    const refetchFilters = {\n      type: 'active',\n      ...filters\n    };\n    return notifyManager.notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        query.reset();\n      });\n      return this.refetchQueries(refetchFilters, options);\n    });\n  }\n\n  cancelQueries(arg1, arg2, arg3) {\n    const [filters, cancelOptions = {}] = utils.parseFilterArgs(arg1, arg2, arg3);\n\n    if (typeof cancelOptions.revert === 'undefined') {\n      cancelOptions.revert = true;\n    }\n\n    const promises = notifyManager.notifyManager.batch(() => this.queryCache.findAll(filters).map(query => query.cancel(cancelOptions)));\n    return Promise.all(promises).then(utils.noop).catch(utils.noop);\n  }\n\n  invalidateQueries(arg1, arg2, arg3) {\n    const [filters, options] = utils.parseFilterArgs(arg1, arg2, arg3);\n    return notifyManager.notifyManager.batch(() => {\n      var _ref, _filters$refetchType;\n\n      this.queryCache.findAll(filters).forEach(query => {\n        query.invalidate();\n      });\n\n      if (filters.refetchType === 'none') {\n        return Promise.resolve();\n      }\n\n      const refetchFilters = { ...filters,\n        type: (_ref = (_filters$refetchType = filters.refetchType) != null ? _filters$refetchType : filters.type) != null ? _ref : 'active'\n      };\n      return this.refetchQueries(refetchFilters, options);\n    });\n  }\n\n  refetchQueries(arg1, arg2, arg3) {\n    const [filters, options] = utils.parseFilterArgs(arg1, arg2, arg3);\n    const promises = notifyManager.notifyManager.batch(() => this.queryCache.findAll(filters).filter(query => !query.isDisabled()).map(query => {\n      var _options$cancelRefetc;\n\n      return query.fetch(undefined, { ...options,\n        cancelRefetch: (_options$cancelRefetc = options == null ? void 0 : options.cancelRefetch) != null ? _options$cancelRefetc : true,\n        meta: {\n          refetchPage: filters.refetchPage\n        }\n      });\n    }));\n    let promise = Promise.all(promises).then(utils.noop);\n\n    if (!(options != null && options.throwOnError)) {\n      promise = promise.catch(utils.noop);\n    }\n\n    return promise;\n  }\n\n  fetchQuery(arg1, arg2, arg3) {\n    const parsedOptions = utils.parseQueryArgs(arg1, arg2, arg3);\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions); // https://github.com/tannerlinsley/react-query/issues/652\n\n    if (typeof defaultedOptions.retry === 'undefined') {\n      defaultedOptions.retry = false;\n    }\n\n    const query = this.queryCache.build(this, defaultedOptions);\n    return query.isStaleByTime(defaultedOptions.staleTime) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);\n  }\n\n  prefetchQuery(arg1, arg2, arg3) {\n    return this.fetchQuery(arg1, arg2, arg3).then(utils.noop).catch(utils.noop);\n  }\n\n  fetchInfiniteQuery(arg1, arg2, arg3) {\n    const parsedOptions = utils.parseQueryArgs(arg1, arg2, arg3);\n    parsedOptions.behavior = infiniteQueryBehavior.infiniteQueryBehavior();\n    return this.fetchQuery(parsedOptions);\n  }\n\n  prefetchInfiniteQuery(arg1, arg2, arg3) {\n    return this.fetchInfiniteQuery(arg1, arg2, arg3).then(utils.noop).catch(utils.noop);\n  }\n\n  resumePausedMutations() {\n    return this.mutationCache.resumePausedMutations();\n  }\n\n  getQueryCache() {\n    return this.queryCache;\n  }\n\n  getMutationCache() {\n    return this.mutationCache;\n  }\n\n  getLogger() {\n    return this.logger;\n  }\n\n  getDefaultOptions() {\n    return this.defaultOptions;\n  }\n\n  setDefaultOptions(options) {\n    this.defaultOptions = options;\n  }\n\n  setQueryDefaults(queryKey, options) {\n    const result = this.queryDefaults.find(x => utils.hashQueryKey(queryKey) === utils.hashQueryKey(x.queryKey));\n\n    if (result) {\n      result.defaultOptions = options;\n    } else {\n      this.queryDefaults.push({\n        queryKey,\n        defaultOptions: options\n      });\n    }\n  }\n\n  getQueryDefaults(queryKey) {\n    if (!queryKey) {\n      return undefined;\n    } // Get the first matching defaults\n\n\n    const firstMatchingDefaults = this.queryDefaults.find(x => utils.partialMatchKey(queryKey, x.queryKey)); // Additional checks and error in dev mode\n\n    if (process.env.NODE_ENV !== 'production') {\n      // Retrieve all matching defaults for the given key\n      const matchingDefaults = this.queryDefaults.filter(x => utils.partialMatchKey(queryKey, x.queryKey)); // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n\n      if (matchingDefaults.length > 1) {\n        this.logger.error(\"[QueryClient] Several query defaults match with key '\" + JSON.stringify(queryKey) + \"'. The first matching query defaults are used. Please check how query defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetquerydefaults.\");\n      }\n    }\n\n    return firstMatchingDefaults == null ? void 0 : firstMatchingDefaults.defaultOptions;\n  }\n\n  setMutationDefaults(mutationKey, options) {\n    const result = this.mutationDefaults.find(x => utils.hashQueryKey(mutationKey) === utils.hashQueryKey(x.mutationKey));\n\n    if (result) {\n      result.defaultOptions = options;\n    } else {\n      this.mutationDefaults.push({\n        mutationKey,\n        defaultOptions: options\n      });\n    }\n  }\n\n  getMutationDefaults(mutationKey) {\n    if (!mutationKey) {\n      return undefined;\n    } // Get the first matching defaults\n\n\n    const firstMatchingDefaults = this.mutationDefaults.find(x => utils.partialMatchKey(mutationKey, x.mutationKey)); // Additional checks and error in dev mode\n\n    if (process.env.NODE_ENV !== 'production') {\n      // Retrieve all matching defaults for the given key\n      const matchingDefaults = this.mutationDefaults.filter(x => utils.partialMatchKey(mutationKey, x.mutationKey)); // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n\n      if (matchingDefaults.length > 1) {\n        this.logger.error(\"[QueryClient] Several mutation defaults match with key '\" + JSON.stringify(mutationKey) + \"'. The first matching mutation defaults are used. Please check how mutation defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetmutationdefaults.\");\n      }\n    }\n\n    return firstMatchingDefaults == null ? void 0 : firstMatchingDefaults.defaultOptions;\n  }\n\n  defaultQueryOptions(options) {\n    if (options != null && options._defaulted) {\n      return options;\n    }\n\n    const defaultedOptions = { ...this.defaultOptions.queries,\n      ...this.getQueryDefaults(options == null ? void 0 : options.queryKey),\n      ...options,\n      _defaulted: true\n    };\n\n    if (!defaultedOptions.queryHash && defaultedOptions.queryKey) {\n      defaultedOptions.queryHash = utils.hashQueryKeyByOptions(defaultedOptions.queryKey, defaultedOptions);\n    } // dependent default values\n\n\n    if (typeof defaultedOptions.refetchOnReconnect === 'undefined') {\n      defaultedOptions.refetchOnReconnect = defaultedOptions.networkMode !== 'always';\n    }\n\n    if (typeof defaultedOptions.useErrorBoundary === 'undefined') {\n      defaultedOptions.useErrorBoundary = !!defaultedOptions.suspense;\n    }\n\n    return defaultedOptions;\n  }\n\n  defaultMutationOptions(options) {\n    if (options != null && options._defaulted) {\n      return options;\n    }\n\n    return { ...this.defaultOptions.mutations,\n      ...this.getMutationDefaults(options == null ? void 0 : options.mutationKey),\n      ...options,\n      _defaulted: true\n    };\n  }\n\n  clear() {\n    this.queryCache.clear();\n    this.mutationCache.clear();\n  }\n\n}\n\nexports.QueryClient = QueryClient;\n//# sourceMappingURL=queryClient.js.map\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$$tanstack$query_core$build$lib$focusManager","~$module$node_modules$$tanstack$query_core$build$lib$logger","~$module$node_modules$$tanstack$query_core$build$lib$onlineManager","~$shadow.js","~$module$node_modules$$tanstack$query_core$build$lib$utils","~$module$node_modules$$tanstack$query_core$build$lib$mutationCache","~$module$node_modules$$tanstack$query_core$build$lib$notifyManager","~$module$node_modules$$tanstack$query_core$build$lib$queryCache","~$module$node_modules$$tanstack$query_core$build$lib$infiniteQueryBehavior"]],"~:properties",["^5",["useErrorBoundary","behavior","fetching","queryKey","revert","fetchStatus","retry","defaultOptions","cancelRefetch","mutationCache","__esModule","unsubscribeFocus","queryHash","unsubscribeOnline","refetchOnReconnect","mutationKey","mutationDefaults","refetchPage","value","mountCount","queryCache","logger","queryDefaults","type","meta","manual","_defaulted","QueryClient"]],"~:compiled-at",1695111489937,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$tanstack$query_core$build$lib$queryClient.js\",\n\"lineCount\":17,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/@tanstack/query-core/build/lib/queryClient.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$tanstack$query_core$build$lib$queryClient\\\"] = function(global,require,module,exports) {\\n'use strict';\\n\\nObject.defineProperty(exports, '__esModule', { value: true });\\n\\nvar utils = require('./utils.js');\\nvar queryCache = require('./queryCache.js');\\nvar mutationCache = require('./mutationCache.js');\\nvar focusManager = require('./focusManager.js');\\nvar onlineManager = require('./onlineManager.js');\\nvar notifyManager = require('./notifyManager.js');\\nvar infiniteQueryBehavior = require('./infiniteQueryBehavior.js');\\nvar logger = require('./logger');\\n\\n// CLASS\\nclass QueryClient {\\n  constructor(config = {}) {\\n    this.queryCache = config.queryCache || new queryCache.QueryCache();\\n    this.mutationCache = config.mutationCache || new mutationCache.MutationCache();\\n    this.logger = config.logger || logger.defaultLogger;\\n    this.defaultOptions = config.defaultOptions || {};\\n    this.queryDefaults = [];\\n    this.mutationDefaults = [];\\n    this.mountCount = 0;\\n\\n    if (process.env.NODE_ENV !== 'production' && config.logger) {\\n      this.logger.error(\\\"Passing a custom logger has been deprecated and will be removed in the next major version.\\\");\\n    }\\n  }\\n\\n  mount() {\\n    this.mountCount++;\\n    if (this.mountCount !== 1) return;\\n    this.unsubscribeFocus = focusManager.focusManager.subscribe(() => {\\n      if (focusManager.focusManager.isFocused()) {\\n        this.resumePausedMutations();\\n        this.queryCache.onFocus();\\n      }\\n    });\\n    this.unsubscribeOnline = onlineManager.onlineManager.subscribe(() => {\\n      if (onlineManager.onlineManager.isOnline()) {\\n        this.resumePausedMutations();\\n        this.queryCache.onOnline();\\n      }\\n    });\\n  }\\n\\n  unmount() {\\n    var _this$unsubscribeFocu, _this$unsubscribeOnli;\\n\\n    this.mountCount--;\\n    if (this.mountCount !== 0) return;\\n    (_this$unsubscribeFocu = this.unsubscribeFocus) == null ? void 0 : _this$unsubscribeFocu.call(this);\\n    this.unsubscribeFocus = undefined;\\n    (_this$unsubscribeOnli = this.unsubscribeOnline) == null ? void 0 : _this$unsubscribeOnli.call(this);\\n    this.unsubscribeOnline = undefined;\\n  }\\n\\n  isFetching(arg1, arg2) {\\n    const [filters] = utils.parseFilterArgs(arg1, arg2);\\n    filters.fetchStatus = 'fetching';\\n    return this.queryCache.findAll(filters).length;\\n  }\\n\\n  isMutating(filters) {\\n    return this.mutationCache.findAll({ ...filters,\\n      fetching: true\\n    }).length;\\n  }\\n\\n  getQueryData(queryKey, filters) {\\n    var _this$queryCache$find;\\n\\n    return (_this$queryCache$find = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find.state.data;\\n  }\\n\\n  ensureQueryData(arg1, arg2, arg3) {\\n    const parsedOptions = utils.parseQueryArgs(arg1, arg2, arg3);\\n    const cachedData = this.getQueryData(parsedOptions.queryKey);\\n    return cachedData ? Promise.resolve(cachedData) : this.fetchQuery(parsedOptions);\\n  }\\n\\n  getQueriesData(queryKeyOrFilters) {\\n    return this.getQueryCache().findAll(queryKeyOrFilters).map(({\\n      queryKey,\\n      state\\n    }) => {\\n      const data = state.data;\\n      return [queryKey, data];\\n    });\\n  }\\n\\n  setQueryData(queryKey, updater, options) {\\n    const query = this.queryCache.find(queryKey);\\n    const prevData = query == null ? void 0 : query.state.data;\\n    const data = utils.functionalUpdate(updater, prevData);\\n\\n    if (typeof data === 'undefined') {\\n      return undefined;\\n    }\\n\\n    const parsedOptions = utils.parseQueryArgs(queryKey);\\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions);\\n    return this.queryCache.build(this, defaultedOptions).setData(data, { ...options,\\n      manual: true\\n    });\\n  }\\n\\n  setQueriesData(queryKeyOrFilters, updater, options) {\\n    return notifyManager.notifyManager.batch(() => this.getQueryCache().findAll(queryKeyOrFilters).map(({\\n      queryKey\\n    }) => [queryKey, this.setQueryData(queryKey, updater, options)]));\\n  }\\n\\n  getQueryState(queryKey, filters) {\\n    var _this$queryCache$find2;\\n\\n    return (_this$queryCache$find2 = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find2.state;\\n  }\\n\\n  removeQueries(arg1, arg2) {\\n    const [filters] = utils.parseFilterArgs(arg1, arg2);\\n    const queryCache = this.queryCache;\\n    notifyManager.notifyManager.batch(() => {\\n      queryCache.findAll(filters).forEach(query => {\\n        queryCache.remove(query);\\n      });\\n    });\\n  }\\n\\n  resetQueries(arg1, arg2, arg3) {\\n    const [filters, options] = utils.parseFilterArgs(arg1, arg2, arg3);\\n    const queryCache = this.queryCache;\\n    const refetchFilters = {\\n      type: 'active',\\n      ...filters\\n    };\\n    return notifyManager.notifyManager.batch(() => {\\n      queryCache.findAll(filters).forEach(query => {\\n        query.reset();\\n      });\\n      return this.refetchQueries(refetchFilters, options);\\n    });\\n  }\\n\\n  cancelQueries(arg1, arg2, arg3) {\\n    const [filters, cancelOptions = {}] = utils.parseFilterArgs(arg1, arg2, arg3);\\n\\n    if (typeof cancelOptions.revert === 'undefined') {\\n      cancelOptions.revert = true;\\n    }\\n\\n    const promises = notifyManager.notifyManager.batch(() => this.queryCache.findAll(filters).map(query => query.cancel(cancelOptions)));\\n    return Promise.all(promises).then(utils.noop).catch(utils.noop);\\n  }\\n\\n  invalidateQueries(arg1, arg2, arg3) {\\n    const [filters, options] = utils.parseFilterArgs(arg1, arg2, arg3);\\n    return notifyManager.notifyManager.batch(() => {\\n      var _ref, _filters$refetchType;\\n\\n      this.queryCache.findAll(filters).forEach(query => {\\n        query.invalidate();\\n      });\\n\\n      if (filters.refetchType === 'none') {\\n        return Promise.resolve();\\n      }\\n\\n      const refetchFilters = { ...filters,\\n        type: (_ref = (_filters$refetchType = filters.refetchType) != null ? _filters$refetchType : filters.type) != null ? _ref : 'active'\\n      };\\n      return this.refetchQueries(refetchFilters, options);\\n    });\\n  }\\n\\n  refetchQueries(arg1, arg2, arg3) {\\n    const [filters, options] = utils.parseFilterArgs(arg1, arg2, arg3);\\n    const promises = notifyManager.notifyManager.batch(() => this.queryCache.findAll(filters).filter(query => !query.isDisabled()).map(query => {\\n      var _options$cancelRefetc;\\n\\n      return query.fetch(undefined, { ...options,\\n        cancelRefetch: (_options$cancelRefetc = options == null ? void 0 : options.cancelRefetch) != null ? _options$cancelRefetc : true,\\n        meta: {\\n          refetchPage: filters.refetchPage\\n        }\\n      });\\n    }));\\n    let promise = Promise.all(promises).then(utils.noop);\\n\\n    if (!(options != null && options.throwOnError)) {\\n      promise = promise.catch(utils.noop);\\n    }\\n\\n    return promise;\\n  }\\n\\n  fetchQuery(arg1, arg2, arg3) {\\n    const parsedOptions = utils.parseQueryArgs(arg1, arg2, arg3);\\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions); // https://github.com/tannerlinsley/react-query/issues/652\\n\\n    if (typeof defaultedOptions.retry === 'undefined') {\\n      defaultedOptions.retry = false;\\n    }\\n\\n    const query = this.queryCache.build(this, defaultedOptions);\\n    return query.isStaleByTime(defaultedOptions.staleTime) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);\\n  }\\n\\n  prefetchQuery(arg1, arg2, arg3) {\\n    return this.fetchQuery(arg1, arg2, arg3).then(utils.noop).catch(utils.noop);\\n  }\\n\\n  fetchInfiniteQuery(arg1, arg2, arg3) {\\n    const parsedOptions = utils.parseQueryArgs(arg1, arg2, arg3);\\n    parsedOptions.behavior = infiniteQueryBehavior.infiniteQueryBehavior();\\n    return this.fetchQuery(parsedOptions);\\n  }\\n\\n  prefetchInfiniteQuery(arg1, arg2, arg3) {\\n    return this.fetchInfiniteQuery(arg1, arg2, arg3).then(utils.noop).catch(utils.noop);\\n  }\\n\\n  resumePausedMutations() {\\n    return this.mutationCache.resumePausedMutations();\\n  }\\n\\n  getQueryCache() {\\n    return this.queryCache;\\n  }\\n\\n  getMutationCache() {\\n    return this.mutationCache;\\n  }\\n\\n  getLogger() {\\n    return this.logger;\\n  }\\n\\n  getDefaultOptions() {\\n    return this.defaultOptions;\\n  }\\n\\n  setDefaultOptions(options) {\\n    this.defaultOptions = options;\\n  }\\n\\n  setQueryDefaults(queryKey, options) {\\n    const result = this.queryDefaults.find(x => utils.hashQueryKey(queryKey) === utils.hashQueryKey(x.queryKey));\\n\\n    if (result) {\\n      result.defaultOptions = options;\\n    } else {\\n      this.queryDefaults.push({\\n        queryKey,\\n        defaultOptions: options\\n      });\\n    }\\n  }\\n\\n  getQueryDefaults(queryKey) {\\n    if (!queryKey) {\\n      return undefined;\\n    } // Get the first matching defaults\\n\\n\\n    const firstMatchingDefaults = this.queryDefaults.find(x => utils.partialMatchKey(queryKey, x.queryKey)); // Additional checks and error in dev mode\\n\\n    if (process.env.NODE_ENV !== 'production') {\\n      // Retrieve all matching defaults for the given key\\n      const matchingDefaults = this.queryDefaults.filter(x => utils.partialMatchKey(queryKey, x.queryKey)); // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\\n\\n      if (matchingDefaults.length > 1) {\\n        this.logger.error(\\\"[QueryClient] Several query defaults match with key '\\\" + JSON.stringify(queryKey) + \\\"'. The first matching query defaults are used. Please check how query defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetquerydefaults.\\\");\\n      }\\n    }\\n\\n    return firstMatchingDefaults == null ? void 0 : firstMatchingDefaults.defaultOptions;\\n  }\\n\\n  setMutationDefaults(mutationKey, options) {\\n    const result = this.mutationDefaults.find(x => utils.hashQueryKey(mutationKey) === utils.hashQueryKey(x.mutationKey));\\n\\n    if (result) {\\n      result.defaultOptions = options;\\n    } else {\\n      this.mutationDefaults.push({\\n        mutationKey,\\n        defaultOptions: options\\n      });\\n    }\\n  }\\n\\n  getMutationDefaults(mutationKey) {\\n    if (!mutationKey) {\\n      return undefined;\\n    } // Get the first matching defaults\\n\\n\\n    const firstMatchingDefaults = this.mutationDefaults.find(x => utils.partialMatchKey(mutationKey, x.mutationKey)); // Additional checks and error in dev mode\\n\\n    if (process.env.NODE_ENV !== 'production') {\\n      // Retrieve all matching defaults for the given key\\n      const matchingDefaults = this.mutationDefaults.filter(x => utils.partialMatchKey(mutationKey, x.mutationKey)); // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\\n\\n      if (matchingDefaults.length > 1) {\\n        this.logger.error(\\\"[QueryClient] Several mutation defaults match with key '\\\" + JSON.stringify(mutationKey) + \\\"'. The first matching mutation defaults are used. Please check how mutation defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetmutationdefaults.\\\");\\n      }\\n    }\\n\\n    return firstMatchingDefaults == null ? void 0 : firstMatchingDefaults.defaultOptions;\\n  }\\n\\n  defaultQueryOptions(options) {\\n    if (options != null && options._defaulted) {\\n      return options;\\n    }\\n\\n    const defaultedOptions = { ...this.defaultOptions.queries,\\n      ...this.getQueryDefaults(options == null ? void 0 : options.queryKey),\\n      ...options,\\n      _defaulted: true\\n    };\\n\\n    if (!defaultedOptions.queryHash && defaultedOptions.queryKey) {\\n      defaultedOptions.queryHash = utils.hashQueryKeyByOptions(defaultedOptions.queryKey, defaultedOptions);\\n    } // dependent default values\\n\\n\\n    if (typeof defaultedOptions.refetchOnReconnect === 'undefined') {\\n      defaultedOptions.refetchOnReconnect = defaultedOptions.networkMode !== 'always';\\n    }\\n\\n    if (typeof defaultedOptions.useErrorBoundary === 'undefined') {\\n      defaultedOptions.useErrorBoundary = !!defaultedOptions.suspense;\\n    }\\n\\n    return defaultedOptions;\\n  }\\n\\n  defaultMutationOptions(options) {\\n    if (options != null && options._defaulted) {\\n      return options;\\n    }\\n\\n    return { ...this.defaultOptions.mutations,\\n      ...this.getMutationDefaults(options == null ? void 0 : options.mutationKey),\\n      ...options,\\n      _defaulted: true\\n    };\\n  }\\n\\n  clear() {\\n    this.queryCache.clear();\\n    this.mutationCache.clear();\\n  }\\n\\n}\\n\\nexports.QueryClient = QueryClient;\\n//# sourceMappingURL=queryClient.js.map\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"utils\",\"queryCache\",\"mutationCache\",\"focusManager\",\"onlineManager\",\"notifyManager\",\"infiniteQueryBehavior\",\"logger\",\"QueryClient\",\"constructor\",\"config\",\"QueryCache\",\"MutationCache\",\"defaultLogger\",\"defaultOptions\",\"queryDefaults\",\"mutationDefaults\",\"mountCount\",\"error\",\"mount\",\"unsubscribeFocus\",\"subscribe\",\"isFocused\",\"resumePausedMutations\",\"onFocus\",\"unsubscribeOnline\",\"isOnline\",\"onOnline\",\"unmount\",\"_this$unsubscribeFocu\",\"_this$unsubscribeOnli\",\"call\",\"undefined\",\"isFetching\",\"arg1\",\"arg2\",\"filters\",\"parseFilterArgs\",\"fetchStatus\",\"findAll\",\"length\",\"isMutating\",\"fetching\",\"getQueryData\",\"queryKey\",\"_this$queryCache$find\",\"find\",\"state\",\"data\",\"ensureQueryData\",\"arg3\",\"parsedOptions\",\"parseQueryArgs\",\"cachedData\",\"Promise\",\"resolve\",\"fetchQuery\",\"getQueriesData\",\"queryKeyOrFilters\",\"getQueryCache\",\"map\",\"setQueryData\",\"updater\",\"options\",\"query\",\"functionalUpdate\",\"prevData\",\"defaultedOptions\",\"defaultQueryOptions\",\"build\",\"setData\",\"manual\",\"setQueriesData\",\"batch\",\"getQueryState\",\"_this$queryCache$find2\",\"removeQueries\",\"forEach\",\"remove\",\"resetQueries\",\"refetchFilters\",\"type\",\"reset\",\"refetchQueries\",\"cancelQueries\",\"cancelOptions\",\"revert\",\"promises\",\"cancel\",\"all\",\"then\",\"noop\",\"catch\",\"invalidateQueries\",\"_ref\",\"_filters$refetchType\",\"invalidate\",\"refetchType\",\"filter\",\"isDisabled\",\"_options$cancelRefetc\",\"fetch\",\"cancelRefetch\",\"meta\",\"refetchPage\",\"promise\",\"throwOnError\",\"retry\",\"isStaleByTime\",\"staleTime\",\"prefetchQuery\",\"fetchInfiniteQuery\",\"behavior\",\"prefetchInfiniteQuery\",\"getMutationCache\",\"getLogger\",\"getDefaultOptions\",\"setDefaultOptions\",\"setQueryDefaults\",\"result\",\"x\",\"hashQueryKey\",\"push\",\"getQueryDefaults\",\"firstMatchingDefaults\",\"partialMatchKey\",\"matchingDefaults\",\"JSON\",\"stringify\",\"setMutationDefaults\",\"mutationKey\",\"getMutationDefaults\",\"_defaulted\",\"queries\",\"queryHash\",\"hashQueryKeyByOptions\",\"refetchOnReconnect\",\"networkMode\",\"useErrorBoundary\",\"suspense\",\"defaultMutationOptions\",\"mutations\",\"clear\"]\n}\n"]