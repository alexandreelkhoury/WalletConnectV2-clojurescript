{
"version":3,
"file":"module$node_modules$$tanstack$query_core$build$lib$focusManager.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,+DAAA,CAAoF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG5HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CAEIC,OAAAA,CAAeN,OAAA,CAAQ,iEAAR,CACnB,KAAIO,MAAQP,OAAA,CAAQ,0DAAR,CAEZ,MAAMQ,aAAN,QAA2BF,OAAaG,CAAAA,YAAxC,CACEC,WAAW,EAAG,CACZ,KAAA,EAEA,KAAKC,CAAAA,KAAL,CAAaC,OAAAC,EAAW,CAGtB,GAAI,CAACN,KAAMO,CAAAA,QAAX,EAAuBC,MAAOC,CAAAA,gBAA9B,CAAgD,CAC9C,MAAMC,SAAW,EAAAA,EAAML,OAAA,EAGvBG,OAAOC,CAAAA,gBAAP,CAAwB,kBAAxB;AAA4CC,QAA5C,CAAsD,CAAA,CAAtD,CACAF,OAAOC,CAAAA,gBAAP,CAAwB,OAAxB,CAAiCC,QAAjC,CAA2C,CAAA,CAA3C,CACA,OAAO,EAAA,EAAM,CAEXF,MAAOG,CAAAA,mBAAP,CAA2B,kBAA3B,CAA+CD,QAA/C,CACAF,OAAOG,CAAAA,mBAAP,CAA2B,OAA3B,CAAoCD,QAApC,CAHW,CANiC,CAH1B,CAHZ,CAuBdE,WAAW,EAAG,CACP,IAAKC,CAAAA,OAAV,EACE,IAAKC,CAAAA,gBAAL,CAAsB,IAAKV,CAAAA,KAA3B,CAFU,CAMdW,aAAa,EAAG,CACd,GAAI,CAAC,IAAKC,CAAAA,YAAL,EAAL,CAA0B,CACxB,IAAIC,aAE8B,KAAlC,GAACA,aAAD,CAAiB,IAAKJ,CAAAA,OAAtB,EAAyC,IAAK,EAA9C,CAAkDI,aAAcC,CAAAA,IAAd,CAAmB,IAAnB,CAClD,KAAKL,CAAAA,OAAL,CAAeM,IAAAA,EAJS,CADZ,CAShBL,gBAAgB,CAACV,KAAD,CAAQ,CACtB,IAAIgB,cAEJ,KAAKhB,CAAAA,KAAL,CAAaA,KACsB,KAAnC,GAACgB,cAAD,CAAkB,IAAKP,CAAAA,OAAvB,EAA0C,IAAK,EAA/C,CAAmDO,cAAeF,CAAAA,IAAf,CAAoB,IAApB,CACnD;IAAKL,CAAAA,OAAL,CAAeT,KAAA,CAAMiB,OAAA,EAAW,CAC9B,GAAuB,SAAvB,GAAI,MAAOA,QAAX,CACE,IAAKC,CAAAA,UAAL,CAAgBD,OAAhB,CADF,KAGE,KAAKhB,CAAAA,OAAL,EAJ4B,CAAjB,CALO,CAcxBiB,UAAU,CAACD,OAAD,CAAU,CACF,IAAKA,CAAAA,OAErB,GAFiCA,OAEjC,GACE,IAAKA,CAAAA,OACL,CADeA,OACf,CAAA,IAAKhB,CAAAA,OAAL,EAFF,CAHkB,CASpBA,OAAO,EAAG,CACR,IAAKkB,CAAAA,SAAUC,CAAAA,OAAf,CAAuB,CAAC,CACtBd,QADsB,CAAD,CAAA,EAEjB,CACJA,QAAA,EADI,CAFN,CADQ,CAQVe,SAAS,EAAG,CACV,MAA4B,SAA5B,GAAI,MAAO,KAAKJ,CAAAA,OAAhB,CACS,IAAKA,CAAAA,OADd,CAKwB,WAAxB,GAAI,MAAOK,SAAX,CACS,CAAA,CADT,CAIO,CAACP,IAAAA,EAAD,CAAY,SAAZ,CAAuB,WAAvB,CAAoCQ,CAAAA,QAApC,CAA6CD,QAASE,CAAAA,eAAtD,CAVG,CAtEd,CAoFMC,OAAAA,CAAe,IAAI5B,YAEzBN,QAAQM,CAAAA,YAAR,CAAuBA,YACvBN,QAAQkC,CAAAA,YAAR,CAAuBA,OA/FqG;",
"sources":["node_modules/@tanstack/query-core/build/lib/focusManager.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$tanstack$query_core$build$lib$focusManager\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar subscribable = require('./subscribable.js');\nvar utils = require('./utils.js');\n\nclass FocusManager extends subscribable.Subscribable {\n  constructor() {\n    super();\n\n    this.setup = onFocus => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!utils.isServer && window.addEventListener) {\n        const listener = () => onFocus(); // Listen to visibillitychange and focus\n\n\n        window.addEventListener('visibilitychange', listener, false);\n        window.addEventListener('focus', listener, false);\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('visibilitychange', listener);\n          window.removeEventListener('focus', listener);\n        };\n      }\n\n      return;\n    };\n  }\n\n  onSubscribe() {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup);\n    }\n  }\n\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      var _this$cleanup;\n\n      (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);\n      this.cleanup = undefined;\n    }\n  }\n\n  setEventListener(setup) {\n    var _this$cleanup2;\n\n    this.setup = setup;\n    (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);\n    this.cleanup = setup(focused => {\n      if (typeof focused === 'boolean') {\n        this.setFocused(focused);\n      } else {\n        this.onFocus();\n      }\n    });\n  }\n\n  setFocused(focused) {\n    const changed = this.focused !== focused;\n\n    if (changed) {\n      this.focused = focused;\n      this.onFocus();\n    }\n  }\n\n  onFocus() {\n    this.listeners.forEach(({\n      listener\n    }) => {\n      listener();\n    });\n  }\n\n  isFocused() {\n    if (typeof this.focused === 'boolean') {\n      return this.focused;\n    } // document global can be unavailable in react native\n\n\n    if (typeof document === 'undefined') {\n      return true;\n    }\n\n    return [undefined, 'visible', 'prerender'].includes(document.visibilityState);\n  }\n\n}\nconst focusManager = new FocusManager();\n\nexports.FocusManager = FocusManager;\nexports.focusManager = focusManager;\n//# sourceMappingURL=focusManager.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","subscribable","utils","FocusManager","Subscribable","constructor","setup","onFocus","this.setup","isServer","window","addEventListener","listener","removeEventListener","onSubscribe","cleanup","setEventListener","onUnsubscribe","hasListeners","_this$cleanup","call","undefined","_this$cleanup2","focused","setFocused","listeners","forEach","isFocused","document","includes","visibilityState","focusManager"]
}
