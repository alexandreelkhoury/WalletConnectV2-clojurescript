shadow$provide.module$node_modules$$tanstack$query_core$build$lib$queriesObserver=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});var utils=require("module$node_modules$$tanstack$query_core$build$lib$utils"),notifyManager=require("module$node_modules$$tanstack$query_core$build$lib$notifyManager"),queryObserver=require("module$node_modules$$tanstack$query_core$build$lib$queryObserver");global=require("module$node_modules$$tanstack$query_core$build$lib$subscribable");
class QueriesObserver extends global.Subscribable{constructor(client,queries){super();this.client=client;this.queries=[];this.result=[];this.observers=[];this.observersMap={};queries&&this.setQueries(queries)}onSubscribe(){1===this.listeners.size&&this.observers.forEach(observer=>{observer.subscribe(result=>{this.onUpdate(observer,result)})})}onUnsubscribe(){this.listeners.size||this.destroy()}destroy(){this.listeners=new Set;this.observers.forEach(observer=>{observer.destroy()})}setQueries(queries,
notifyOptions){this.queries=queries;notifyManager.notifyManager.batch(()=>{const prevObservers=this.observers;var newObserverMatches=this.findMatchingObservers(this.queries);newObserverMatches.forEach(match=>match.observer.setOptions(match.defaultedQueryOptions,notifyOptions));newObserverMatches=newObserverMatches.map(match=>match.observer);const newObserversMap=Object.fromEntries(newObserverMatches.map(observer=>[observer.options.queryHash,observer])),newResult=newObserverMatches.map(observer=>observer.getCurrentResult()),
hasIndexChange=newObserverMatches.some((observer,index)=>observer!==prevObservers[index]);if(prevObservers.length!==newObserverMatches.length||hasIndexChange)this.observers=newObserverMatches,this.observersMap=newObserversMap,this.result=newResult,this.hasListeners()&&(utils.difference(prevObservers,newObserverMatches).forEach(observer=>{observer.destroy()}),utils.difference(newObserverMatches,prevObservers).forEach(observer=>{observer.subscribe(result=>{this.onUpdate(observer,result)})}),this.notify())})}getCurrentResult(){return this.result}getQueries(){return this.observers.map(observer=>
observer.getCurrentQuery())}getObservers(){return this.observers}getOptimisticResult(queries){return this.findMatchingObservers(queries).map(match=>match.observer.getOptimisticResult(match.defaultedQueryOptions))}findMatchingObservers(queries){var prevObservers=this.observers;const prevObserversMap=new Map(prevObservers.map(observer=>[observer.options.queryHash,observer])),defaultedQueryOptions=queries.map(options=>this.client.defaultQueryOptions(options));queries=defaultedQueryOptions.flatMap(defaultedOptions=>
{const match=prevObserversMap.get(defaultedOptions.queryHash);return null!=match?[{defaultedQueryOptions:defaultedOptions,observer:match}]:[]});const matchedQueryHashes=new Set(queries.map(match=>match.defaultedQueryOptions.queryHash)),unmatchedQueries=defaultedQueryOptions.filter(defaultedOptions=>!matchedQueryHashes.has(defaultedOptions.queryHash)),matchingObserversSet=new Set(queries.map(match=>match.observer)),unmatchedObservers=prevObservers.filter(prevObserver=>!matchingObserversSet.has(prevObserver)),
getObserver=options=>{options=this.client.defaultQueryOptions(options);const currentObserver=this.observersMap[options.queryHash];return null!=currentObserver?currentObserver:new queryObserver.QueryObserver(this.client,options)};prevObservers=unmatchedQueries.map((options,index)=>options.keepPreviousData&&(index=unmatchedObservers[index],void 0!==index)?{defaultedQueryOptions:options,observer:index}:{defaultedQueryOptions:options,observer:getObserver(options)});return queries.concat(prevObservers).sort((a,
b)=>defaultedQueryOptions.indexOf(a.defaultedQueryOptions)-defaultedQueryOptions.indexOf(b.defaultedQueryOptions))}onUpdate(observer,result){observer=this.observers.indexOf(observer);-1!==observer&&(this.result=utils.replaceAt(this.result,observer,result),this.notify())}notify(){notifyManager.notifyManager.batch(()=>{this.listeners.forEach(({listener})=>{listener(this.result)})})}}exports.QueriesObserver=QueriesObserver}
//# sourceMappingURL=module$node_modules$$tanstack$query_core$build$lib$queriesObserver.js.map
