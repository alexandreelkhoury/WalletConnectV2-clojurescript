shadow$provide.module$node_modules$viem$_cjs$utils$encoding$toHex=function(global,require,module,exports){function boolToHex(value,opts={}){value=`0x${Number(value)}`;return"number"===typeof opts.size?((0,fromHex_js_1.assertSize)(value,{size:opts.size}),(0,pad_js_1.pad)(value,{size:opts.size})):value}function bytesToHex(value,opts={}){let hexString="";for(let i=0;i<value.length;i++)hexString+=hexes[value[i]];value=`0x${hexString}`;return"number"===typeof opts.size?((0,fromHex_js_1.assertSize)(value,
{size:opts.size}),(0,pad_js_1.pad)(value,{dir:"right",size:opts.size})):value}function numberToHex(value_,opts={}){const {signed,size}=opts;var value=BigInt(value_);let maxValue;size?maxValue=signed?(1n<<8n*BigInt(size)-1n)-1n:2n**(8n*BigInt(size))-1n:"number"===typeof value_&&(maxValue=BigInt(Number.MAX_SAFE_INTEGER));opts="bigint"===typeof maxValue&&signed?-maxValue-1n:0;if(maxValue&&value>maxValue||value<opts)throw value="bigint"===typeof value_?"n":"",new encoding_js_1.IntegerOutOfRangeError({max:maxValue?
`${maxValue}${value}`:void 0,min:`${opts}${value}`,signed,size,value:`${value_}${value}`});value_=`0x${(signed&&0>value?(1n<<BigInt(8*size))+BigInt(value):value).toString(16)}`;return size?(0,pad_js_1.pad)(value_,{size}):value_}function stringToHex(value_,opts={}){value_=encoder.encode(value_);return bytesToHex(value_,opts)}Object.defineProperty(exports,"__esModule",{value:!0});exports.stringToHex=exports.numberToHex=exports.bytesToHex=exports.boolToHex=exports.toHex=void 0;const encoding_js_1=require("module$node_modules$viem$_cjs$errors$encoding"),
pad_js_1=require("module$node_modules$viem$_cjs$utils$data$pad"),fromHex_js_1=require("module$node_modules$viem$_cjs$utils$encoding$fromHex"),hexes=Array.from({length:256},(_v,i)=>i.toString(16).padStart(2,"0"));exports.toHex=function(value,opts={}){return"number"===typeof value||"bigint"===typeof value?numberToHex(value,opts):"string"===typeof value?stringToHex(value,opts):"boolean"===typeof value?boolToHex(value,opts):bytesToHex(value,opts)};exports.boolToHex=boolToHex;exports.bytesToHex=bytesToHex;
exports.numberToHex=numberToHex;const encoder=new TextEncoder;exports.stringToHex=stringToHex}
//# sourceMappingURL=module$node_modules$viem$_cjs$utils$encoding$toHex.js.map
