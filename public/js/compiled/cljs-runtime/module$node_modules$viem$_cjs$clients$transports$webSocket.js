shadow$provide.module$node_modules$viem$_cjs$clients$transports$webSocket=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.webSocket=void 0;const request_js_1=require("module$node_modules$viem$_cjs$errors$request"),transport_js_1=require("module$node_modules$viem$_cjs$errors$transport"),rpc_js_1=require("module$node_modules$viem$_cjs$utils$rpc"),createTransport_js_1=require("module$node_modules$viem$_cjs$clients$transports$createTransport");exports.webSocket=
function(url,config={}){const {key="webSocket",name="WebSocket JSON-RPC",retryDelay}=config;return({chain,retryCount:retryCount_,timeout:timeout_})=>{retryCount_=config.retryCount??retryCount_;const timeout=timeout_??config.timeout??1E4,url_=url||chain?.rpcUrls.default.webSocket?.[0];if(!url_)throw new transport_js_1.UrlRequiredError;return(0,createTransport_js_1.createTransport)({key,name,async request({method,params}){method={method,params};params=await (0,rpc_js_1.getSocket)(url_);const {error,
result}=await rpc_js_1.rpc.webSocketAsync(params,{body:method,timeout});if(error)throw new request_js_1.RpcRequestError({body:method,error,url:url_});return result},retryCount:retryCount_,retryDelay,timeout,type:"webSocket"},{getSocket(){return(0,rpc_js_1.getSocket)(url_)},async subscribe({params,onData,onError}){const socket=await (0,rpc_js_1.getSocket)(url_),{result:subscriptionId}=await new Promise((resolve,reject)=>rpc_js_1.rpc.webSocket(socket,{body:{method:"eth_subscribe",params},onResponse(response){response.error?
(reject(response.error),onError?.(response.error)):"number"===typeof response.id?resolve(response):"eth_subscription"===response.method&&onData(response.params)}}));return{subscriptionId,async unsubscribe(){return new Promise(resolve=>rpc_js_1.rpc.webSocket(socket,{body:{method:"eth_unsubscribe",params:[subscriptionId]},onResponse:resolve}))}}}})}}}
//# sourceMappingURL=module$node_modules$viem$_cjs$clients$transports$webSocket.js.map
