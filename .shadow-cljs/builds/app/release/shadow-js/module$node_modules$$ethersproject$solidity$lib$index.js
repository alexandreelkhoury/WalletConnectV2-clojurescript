["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@ethersproject/solidity/lib/index.js"],"~:js","shadow$provide[355]=function(S,A,V,q){function F(t,B,E){switch(t){case \"address\":return E?(0,y.zeroPad)(B,32):(0,y.arrayify)(B);case \"string\":return(0,p.toUtf8Bytes)(B);case \"bytes\":return(0,y.arrayify)(B);case \"bool\":return B=B?\"0x01\":\"0x00\",E?(0,y.zeroPad)(B,32):(0,y.arrayify)(B)}var H=t.match(l);if(H){var D=parseInt(H[2]||\"256\");(H[2]&&String(D)!==H[2]||0!==D%8||0===D||256<D)&&k.throwArgumentError(\"invalid number type\",\"type\",t);E&&(D=256);B=r.BigNumber.from(B).toTwos(D);return(0,y.zeroPad)(B,\nD/8)}if(H=t.match(n))return D=parseInt(H[1]),(String(D)!==H[1]||0===D||32<D)&&k.throwArgumentError(\"invalid bytes type\",\"type\",t),(0,y.arrayify)(B).byteLength!==D&&k.throwArgumentError(\"invalid value for \"+t,\"value\",B),E?(0,y.arrayify)((B+\"0000000000000000000000000000000000000000000000000000000000000000\").substring(0,66)):B;if((H=t.match(h))&&Array.isArray(B)){var C=H[1];parseInt(H[2]||String(B.length))!=B.length&&k.throwArgumentError(\"invalid array length for \"+t,\"value\",B);var I=[];B.forEach(function(M){I.push(F(C,\nM,!0))});return(0,y.concat)(I)}return k.throwArgumentError(\"invalid type\",\"type\",t)}function G(t,B){t.length!=B.length&&k.throwArgumentError(\"wrong number of values; expected ${ types.length }\",\"values\",B);var E=[];t.forEach(function(H,D){E.push(F(H,B[D]))});return(0,y.hexlify)((0,y.concat)(E))}Object.defineProperty(q,\"__esModule\",{value:!0});q.sha256=q.keccak256=q.pack=void 0;var r=A(15),y=A(11),e=A(22),u=A(267),p=A(44),n=RegExp(\"^bytes([0-9]+)$\"),l=RegExp(\"^(u?int)([0-9]*)$\"),h=RegExp(\"^(.*)\\\\[([0-9]*)\\\\]$\");\nS=A(9);A=A(354);var k=new S.Logger(A.version);q.pack=G;q.keccak256=function(t,B){return(0,e.keccak256)(G(t,B))};q.sha256=function(t,B){return(0,u.sha256)(G(t,B))}}","~:source","shadow$provide[355] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sha256 = exports.keccak256 = exports.pack = void 0;\nvar bignumber_1 = require(\"@ethersproject/bignumber\");\nvar bytes_1 = require(\"@ethersproject/bytes\");\nvar keccak256_1 = require(\"@ethersproject/keccak256\");\nvar sha2_1 = require(\"@ethersproject/sha2\");\nvar strings_1 = require(\"@ethersproject/strings\");\nvar regexBytes = new RegExp(\"^bytes([0-9]+)$\");\nvar regexNumber = new RegExp(\"^(u?int)([0-9]*)$\");\nvar regexArray = new RegExp(\"^(.*)\\\\[([0-9]*)\\\\]$\");\nvar Zeros = \"0000000000000000000000000000000000000000000000000000000000000000\";\nvar logger_1 = require(\"@ethersproject/logger\");\nvar _version_1 = require(\"./_version\");\nvar logger = new logger_1.Logger(_version_1.version);\nfunction _pack(type, value, isArray) {\n    switch (type) {\n        case \"address\":\n            if (isArray) {\n                return (0, bytes_1.zeroPad)(value, 32);\n            }\n            return (0, bytes_1.arrayify)(value);\n        case \"string\":\n            return (0, strings_1.toUtf8Bytes)(value);\n        case \"bytes\":\n            return (0, bytes_1.arrayify)(value);\n        case \"bool\":\n            value = (value ? \"0x01\" : \"0x00\");\n            if (isArray) {\n                return (0, bytes_1.zeroPad)(value, 32);\n            }\n            return (0, bytes_1.arrayify)(value);\n    }\n    var match = type.match(regexNumber);\n    if (match) {\n        //let signed = (match[1] === \"int\")\n        var size = parseInt(match[2] || \"256\");\n        if ((match[2] && String(size) !== match[2]) || (size % 8 !== 0) || size === 0 || size > 256) {\n            logger.throwArgumentError(\"invalid number type\", \"type\", type);\n        }\n        if (isArray) {\n            size = 256;\n        }\n        value = bignumber_1.BigNumber.from(value).toTwos(size);\n        return (0, bytes_1.zeroPad)(value, size / 8);\n    }\n    match = type.match(regexBytes);\n    if (match) {\n        var size = parseInt(match[1]);\n        if (String(size) !== match[1] || size === 0 || size > 32) {\n            logger.throwArgumentError(\"invalid bytes type\", \"type\", type);\n        }\n        if ((0, bytes_1.arrayify)(value).byteLength !== size) {\n            logger.throwArgumentError(\"invalid value for \" + type, \"value\", value);\n        }\n        if (isArray) {\n            return (0, bytes_1.arrayify)((value + Zeros).substring(0, 66));\n        }\n        return value;\n    }\n    match = type.match(regexArray);\n    if (match && Array.isArray(value)) {\n        var baseType_1 = match[1];\n        var count = parseInt(match[2] || String(value.length));\n        if (count != value.length) {\n            logger.throwArgumentError(\"invalid array length for \" + type, \"value\", value);\n        }\n        var result_1 = [];\n        value.forEach(function (value) {\n            result_1.push(_pack(baseType_1, value, true));\n        });\n        return (0, bytes_1.concat)(result_1);\n    }\n    return logger.throwArgumentError(\"invalid type\", \"type\", type);\n}\n// @TODO: Array Enum\nfunction pack(types, values) {\n    if (types.length != values.length) {\n        logger.throwArgumentError(\"wrong number of values; expected ${ types.length }\", \"values\", values);\n    }\n    var tight = [];\n    types.forEach(function (type, index) {\n        tight.push(_pack(type, values[index]));\n    });\n    return (0, bytes_1.hexlify)((0, bytes_1.concat)(tight));\n}\nexports.pack = pack;\nfunction keccak256(types, values) {\n    return (0, keccak256_1.keccak256)(pack(types, values));\n}\nexports.keccak256 = keccak256;\nfunction sha256(types, values) {\n    return (0, sha2_1.sha256)(pack(types, values));\n}\nexports.sha256 = sha256;\n//# sourceMappingURL=index.js.map\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$$ethersproject$solidity$lib$_version","~$module$node_modules$$ethersproject$strings$lib$index","~$module$node_modules$$ethersproject$sha2$lib$index","~$shadow.js","~$module$node_modules$$ethersproject$bytes$lib$index","~$module$node_modules$$ethersproject$bignumber$lib$index","~$module$node_modules$$ethersproject$keccak256$lib$index","~$module$node_modules$$ethersproject$logger$lib$index"]],"~:properties",["^5",["pack","__esModule","sha256","value","keccak256"]],"~:compiled-at",1695041440924,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$ethersproject$solidity$lib$index.js\",\n\"lineCount\":4,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/@ethersproject/solidity/lib/index.js\"],\n\"sourcesContent\":[\"shadow$provide[355] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nexports.sha256 = exports.keccak256 = exports.pack = void 0;\\nvar bignumber_1 = require(\\\"@ethersproject/bignumber\\\");\\nvar bytes_1 = require(\\\"@ethersproject/bytes\\\");\\nvar keccak256_1 = require(\\\"@ethersproject/keccak256\\\");\\nvar sha2_1 = require(\\\"@ethersproject/sha2\\\");\\nvar strings_1 = require(\\\"@ethersproject/strings\\\");\\nvar regexBytes = new RegExp(\\\"^bytes([0-9]+)$\\\");\\nvar regexNumber = new RegExp(\\\"^(u?int)([0-9]*)$\\\");\\nvar regexArray = new RegExp(\\\"^(.*)\\\\\\\\[([0-9]*)\\\\\\\\]$\\\");\\nvar Zeros = \\\"0000000000000000000000000000000000000000000000000000000000000000\\\";\\nvar logger_1 = require(\\\"@ethersproject/logger\\\");\\nvar _version_1 = require(\\\"./_version\\\");\\nvar logger = new logger_1.Logger(_version_1.version);\\nfunction _pack(type, value, isArray) {\\n    switch (type) {\\n        case \\\"address\\\":\\n            if (isArray) {\\n                return (0, bytes_1.zeroPad)(value, 32);\\n            }\\n            return (0, bytes_1.arrayify)(value);\\n        case \\\"string\\\":\\n            return (0, strings_1.toUtf8Bytes)(value);\\n        case \\\"bytes\\\":\\n            return (0, bytes_1.arrayify)(value);\\n        case \\\"bool\\\":\\n            value = (value ? \\\"0x01\\\" : \\\"0x00\\\");\\n            if (isArray) {\\n                return (0, bytes_1.zeroPad)(value, 32);\\n            }\\n            return (0, bytes_1.arrayify)(value);\\n    }\\n    var match = type.match(regexNumber);\\n    if (match) {\\n        //let signed = (match[1] === \\\"int\\\")\\n        var size = parseInt(match[2] || \\\"256\\\");\\n        if ((match[2] && String(size) !== match[2]) || (size % 8 !== 0) || size === 0 || size > 256) {\\n            logger.throwArgumentError(\\\"invalid number type\\\", \\\"type\\\", type);\\n        }\\n        if (isArray) {\\n            size = 256;\\n        }\\n        value = bignumber_1.BigNumber.from(value).toTwos(size);\\n        return (0, bytes_1.zeroPad)(value, size / 8);\\n    }\\n    match = type.match(regexBytes);\\n    if (match) {\\n        var size = parseInt(match[1]);\\n        if (String(size) !== match[1] || size === 0 || size > 32) {\\n            logger.throwArgumentError(\\\"invalid bytes type\\\", \\\"type\\\", type);\\n        }\\n        if ((0, bytes_1.arrayify)(value).byteLength !== size) {\\n            logger.throwArgumentError(\\\"invalid value for \\\" + type, \\\"value\\\", value);\\n        }\\n        if (isArray) {\\n            return (0, bytes_1.arrayify)((value + Zeros).substring(0, 66));\\n        }\\n        return value;\\n    }\\n    match = type.match(regexArray);\\n    if (match && Array.isArray(value)) {\\n        var baseType_1 = match[1];\\n        var count = parseInt(match[2] || String(value.length));\\n        if (count != value.length) {\\n            logger.throwArgumentError(\\\"invalid array length for \\\" + type, \\\"value\\\", value);\\n        }\\n        var result_1 = [];\\n        value.forEach(function (value) {\\n            result_1.push(_pack(baseType_1, value, true));\\n        });\\n        return (0, bytes_1.concat)(result_1);\\n    }\\n    return logger.throwArgumentError(\\\"invalid type\\\", \\\"type\\\", type);\\n}\\n// @TODO: Array Enum\\nfunction pack(types, values) {\\n    if (types.length != values.length) {\\n        logger.throwArgumentError(\\\"wrong number of values; expected ${ types.length }\\\", \\\"values\\\", values);\\n    }\\n    var tight = [];\\n    types.forEach(function (type, index) {\\n        tight.push(_pack(type, values[index]));\\n    });\\n    return (0, bytes_1.hexlify)((0, bytes_1.concat)(tight));\\n}\\nexports.pack = pack;\\nfunction keccak256(types, values) {\\n    return (0, keccak256_1.keccak256)(pack(types, values));\\n}\\nexports.keccak256 = keccak256;\\nfunction sha256(types, values) {\\n    return (0, sha2_1.sha256)(pack(types, values));\\n}\\nexports.sha256 = sha256;\\n//# sourceMappingURL=index.js.map\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"_pack\",\"type\",\"value\",\"isArray\",\"bytes_1\",\"zeroPad\",\"arrayify\",\"strings_1\",\"toUtf8Bytes\",\"match\",\"regexNumber\",\"size\",\"parseInt\",\"String\",\"logger\",\"throwArgumentError\",\"bignumber_1\",\"BigNumber\",\"from\",\"toTwos\",\"regexBytes\",\"byteLength\",\"substring\",\"Zeros\",\"regexArray\",\"Array\",\"baseType_1\",\"count\",\"length\",\"result_1\",\"forEach\",\"push\",\"concat\",\"pack\",\"types\",\"values\",\"tight\",\"index\",\"hexlify\",\"Object\",\"defineProperty\",\"sha256\",\"keccak256\",\"keccak256_1\",\"sha2_1\",\"RegExp\",\"logger_1\",\"_version_1\",\"Logger\",\"version\"]\n}\n"]