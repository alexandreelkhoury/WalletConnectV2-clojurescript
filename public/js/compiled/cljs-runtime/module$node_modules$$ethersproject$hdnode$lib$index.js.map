{
"version":3,
"file":"module$node_modules$$ethersproject$hdnode$lib$index.js",
"lineCount":20,
"mappings":"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",
"sources":["node_modules/@ethersproject/hdnode/lib/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$ethersproject$hdnode$lib$index\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getAccountPath = exports.isValidMnemonic = exports.entropyToMnemonic = exports.mnemonicToEntropy = exports.mnemonicToSeed = exports.HDNode = exports.defaultPath = void 0;\nvar basex_1 = require(\"@ethersproject/basex\");\nvar bytes_1 = require(\"@ethersproject/bytes\");\nvar bignumber_1 = require(\"@ethersproject/bignumber\");\nvar strings_1 = require(\"@ethersproject/strings\");\nvar pbkdf2_1 = require(\"@ethersproject/pbkdf2\");\nvar properties_1 = require(\"@ethersproject/properties\");\nvar signing_key_1 = require(\"@ethersproject/signing-key\");\nvar sha2_1 = require(\"@ethersproject/sha2\");\nvar transactions_1 = require(\"@ethersproject/transactions\");\nvar wordlists_1 = require(\"@ethersproject/wordlists\");\nvar logger_1 = require(\"@ethersproject/logger\");\nvar _version_1 = require(\"./_version\");\nvar logger = new logger_1.Logger(_version_1.version);\nvar N = bignumber_1.BigNumber.from(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\");\n// \"Bitcoin seed\"\nvar MasterSecret = (0, strings_1.toUtf8Bytes)(\"Bitcoin seed\");\nvar HardenedBit = 0x80000000;\n// Returns a byte with the MSB bits set\nfunction getUpperMask(bits) {\n    return ((1 << bits) - 1) << (8 - bits);\n}\n// Returns a byte with the LSB bits set\nfunction getLowerMask(bits) {\n    return (1 << bits) - 1;\n}\nfunction bytes32(value) {\n    return (0, bytes_1.hexZeroPad)((0, bytes_1.hexlify)(value), 32);\n}\nfunction base58check(data) {\n    return basex_1.Base58.encode((0, bytes_1.concat)([data, (0, bytes_1.hexDataSlice)((0, sha2_1.sha256)((0, sha2_1.sha256)(data)), 0, 4)]));\n}\nfunction getWordlist(wordlist) {\n    if (wordlist == null) {\n        return wordlists_1.wordlists[\"en\"];\n    }\n    if (typeof (wordlist) === \"string\") {\n        var words = wordlists_1.wordlists[wordlist];\n        if (words == null) {\n            logger.throwArgumentError(\"unknown locale\", \"wordlist\", wordlist);\n        }\n        return words;\n    }\n    return wordlist;\n}\nvar _constructorGuard = {};\nexports.defaultPath = \"m/44'/60'/0'/0/0\";\n;\nvar HDNode = /** @class */ (function () {\n    /**\n     *  This constructor should not be called directly.\n     *\n     *  Please use:\n     *   - fromMnemonic\n     *   - fromSeed\n     */\n    function HDNode(constructorGuard, privateKey, publicKey, parentFingerprint, chainCode, index, depth, mnemonicOrPath) {\n        /* istanbul ignore if */\n        if (constructorGuard !== _constructorGuard) {\n            throw new Error(\"HDNode constructor cannot be called directly\");\n        }\n        if (privateKey) {\n            var signingKey = new signing_key_1.SigningKey(privateKey);\n            (0, properties_1.defineReadOnly)(this, \"privateKey\", signingKey.privateKey);\n            (0, properties_1.defineReadOnly)(this, \"publicKey\", signingKey.compressedPublicKey);\n        }\n        else {\n            (0, properties_1.defineReadOnly)(this, \"privateKey\", null);\n            (0, properties_1.defineReadOnly)(this, \"publicKey\", (0, bytes_1.hexlify)(publicKey));\n        }\n        (0, properties_1.defineReadOnly)(this, \"parentFingerprint\", parentFingerprint);\n        (0, properties_1.defineReadOnly)(this, \"fingerprint\", (0, bytes_1.hexDataSlice)((0, sha2_1.ripemd160)((0, sha2_1.sha256)(this.publicKey)), 0, 4));\n        (0, properties_1.defineReadOnly)(this, \"address\", (0, transactions_1.computeAddress)(this.publicKey));\n        (0, properties_1.defineReadOnly)(this, \"chainCode\", chainCode);\n        (0, properties_1.defineReadOnly)(this, \"index\", index);\n        (0, properties_1.defineReadOnly)(this, \"depth\", depth);\n        if (mnemonicOrPath == null) {\n            // From a source that does not preserve the path (e.g. extended keys)\n            (0, properties_1.defineReadOnly)(this, \"mnemonic\", null);\n            (0, properties_1.defineReadOnly)(this, \"path\", null);\n        }\n        else if (typeof (mnemonicOrPath) === \"string\") {\n            // From a source that does not preserve the mnemonic (e.g. neutered)\n            (0, properties_1.defineReadOnly)(this, \"mnemonic\", null);\n            (0, properties_1.defineReadOnly)(this, \"path\", mnemonicOrPath);\n        }\n        else {\n            // From a fully qualified source\n            (0, properties_1.defineReadOnly)(this, \"mnemonic\", mnemonicOrPath);\n            (0, properties_1.defineReadOnly)(this, \"path\", mnemonicOrPath.path);\n        }\n    }\n    Object.defineProperty(HDNode.prototype, \"extendedKey\", {\n        get: function () {\n            // We only support the mainnet values for now, but if anyone needs\n            // testnet values, let me know. I believe current sentiment is that\n            // we should always use mainnet, and use BIP-44 to derive the network\n            //   - Mainnet: public=0x0488B21E, private=0x0488ADE4\n            //   - Testnet: public=0x043587CF, private=0x04358394\n            if (this.depth >= 256) {\n                throw new Error(\"Depth too large!\");\n            }\n            return base58check((0, bytes_1.concat)([\n                ((this.privateKey != null) ? \"0x0488ADE4\" : \"0x0488B21E\"),\n                (0, bytes_1.hexlify)(this.depth),\n                this.parentFingerprint,\n                (0, bytes_1.hexZeroPad)((0, bytes_1.hexlify)(this.index), 4),\n                this.chainCode,\n                ((this.privateKey != null) ? (0, bytes_1.concat)([\"0x00\", this.privateKey]) : this.publicKey),\n            ]));\n        },\n        enumerable: false,\n        configurable: true\n    });\n    HDNode.prototype.neuter = function () {\n        return new HDNode(_constructorGuard, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, this.path);\n    };\n    HDNode.prototype._derive = function (index) {\n        if (index > 0xffffffff) {\n            throw new Error(\"invalid index - \" + String(index));\n        }\n        // Base path\n        var path = this.path;\n        if (path) {\n            path += \"/\" + (index & ~HardenedBit);\n        }\n        var data = new Uint8Array(37);\n        if (index & HardenedBit) {\n            if (!this.privateKey) {\n                throw new Error(\"cannot derive child of neutered node\");\n            }\n            // Data = 0x00 || ser_256(k_par)\n            data.set((0, bytes_1.arrayify)(this.privateKey), 1);\n            // Hardened path\n            if (path) {\n                path += \"'\";\n            }\n        }\n        else {\n            // Data = ser_p(point(k_par))\n            data.set((0, bytes_1.arrayify)(this.publicKey));\n        }\n        // Data += ser_32(i)\n        for (var i = 24; i >= 0; i -= 8) {\n            data[33 + (i >> 3)] = ((index >> (24 - i)) & 0xff);\n        }\n        var I = (0, bytes_1.arrayify)((0, sha2_1.computeHmac)(sha2_1.SupportedAlgorithm.sha512, this.chainCode, data));\n        var IL = I.slice(0, 32);\n        var IR = I.slice(32);\n        // The private key\n        var ki = null;\n        // The public key\n        var Ki = null;\n        if (this.privateKey) {\n            ki = bytes32(bignumber_1.BigNumber.from(IL).add(this.privateKey).mod(N));\n        }\n        else {\n            var ek = new signing_key_1.SigningKey((0, bytes_1.hexlify)(IL));\n            Ki = ek._addPoint(this.publicKey);\n        }\n        var mnemonicOrPath = path;\n        var srcMnemonic = this.mnemonic;\n        if (srcMnemonic) {\n            mnemonicOrPath = Object.freeze({\n                phrase: srcMnemonic.phrase,\n                path: path,\n                locale: (srcMnemonic.locale || \"en\")\n            });\n        }\n        return new HDNode(_constructorGuard, ki, Ki, this.fingerprint, bytes32(IR), index, this.depth + 1, mnemonicOrPath);\n    };\n    HDNode.prototype.derivePath = function (path) {\n        var components = path.split(\"/\");\n        if (components.length === 0 || (components[0] === \"m\" && this.depth !== 0)) {\n            throw new Error(\"invalid path - \" + path);\n        }\n        if (components[0] === \"m\") {\n            components.shift();\n        }\n        var result = this;\n        for (var i = 0; i < components.length; i++) {\n            var component = components[i];\n            if (component.match(/^[0-9]+'$/)) {\n                var index = parseInt(component.substring(0, component.length - 1));\n                if (index >= HardenedBit) {\n                    throw new Error(\"invalid path index - \" + component);\n                }\n                result = result._derive(HardenedBit + index);\n            }\n            else if (component.match(/^[0-9]+$/)) {\n                var index = parseInt(component);\n                if (index >= HardenedBit) {\n                    throw new Error(\"invalid path index - \" + component);\n                }\n                result = result._derive(index);\n            }\n            else {\n                throw new Error(\"invalid path component - \" + component);\n            }\n        }\n        return result;\n    };\n    HDNode._fromSeed = function (seed, mnemonic) {\n        var seedArray = (0, bytes_1.arrayify)(seed);\n        if (seedArray.length < 16 || seedArray.length > 64) {\n            throw new Error(\"invalid seed\");\n        }\n        var I = (0, bytes_1.arrayify)((0, sha2_1.computeHmac)(sha2_1.SupportedAlgorithm.sha512, MasterSecret, seedArray));\n        return new HDNode(_constructorGuard, bytes32(I.slice(0, 32)), null, \"0x00000000\", bytes32(I.slice(32)), 0, 0, mnemonic);\n    };\n    HDNode.fromMnemonic = function (mnemonic, password, wordlist) {\n        // If a locale name was passed in, find the associated wordlist\n        wordlist = getWordlist(wordlist);\n        // Normalize the case and spacing in the mnemonic (throws if the mnemonic is invalid)\n        mnemonic = entropyToMnemonic(mnemonicToEntropy(mnemonic, wordlist), wordlist);\n        return HDNode._fromSeed(mnemonicToSeed(mnemonic, password), {\n            phrase: mnemonic,\n            path: \"m\",\n            locale: wordlist.locale\n        });\n    };\n    HDNode.fromSeed = function (seed) {\n        return HDNode._fromSeed(seed, null);\n    };\n    HDNode.fromExtendedKey = function (extendedKey) {\n        var bytes = basex_1.Base58.decode(extendedKey);\n        if (bytes.length !== 82 || base58check(bytes.slice(0, 78)) !== extendedKey) {\n            logger.throwArgumentError(\"invalid extended key\", \"extendedKey\", \"[REDACTED]\");\n        }\n        var depth = bytes[4];\n        var parentFingerprint = (0, bytes_1.hexlify)(bytes.slice(5, 9));\n        var index = parseInt((0, bytes_1.hexlify)(bytes.slice(9, 13)).substring(2), 16);\n        var chainCode = (0, bytes_1.hexlify)(bytes.slice(13, 45));\n        var key = bytes.slice(45, 78);\n        switch ((0, bytes_1.hexlify)(bytes.slice(0, 4))) {\n            // Public Key\n            case \"0x0488b21e\":\n            case \"0x043587cf\":\n                return new HDNode(_constructorGuard, null, (0, bytes_1.hexlify)(key), parentFingerprint, chainCode, index, depth, null);\n            // Private Key\n            case \"0x0488ade4\":\n            case \"0x04358394 \":\n                if (key[0] !== 0) {\n                    break;\n                }\n                return new HDNode(_constructorGuard, (0, bytes_1.hexlify)(key.slice(1)), null, parentFingerprint, chainCode, index, depth, null);\n        }\n        return logger.throwArgumentError(\"invalid extended key\", \"extendedKey\", \"[REDACTED]\");\n    };\n    return HDNode;\n}());\nexports.HDNode = HDNode;\nfunction mnemonicToSeed(mnemonic, password) {\n    if (!password) {\n        password = \"\";\n    }\n    var salt = (0, strings_1.toUtf8Bytes)(\"mnemonic\" + password, strings_1.UnicodeNormalizationForm.NFKD);\n    return (0, pbkdf2_1.pbkdf2)((0, strings_1.toUtf8Bytes)(mnemonic, strings_1.UnicodeNormalizationForm.NFKD), salt, 2048, 64, \"sha512\");\n}\nexports.mnemonicToSeed = mnemonicToSeed;\nfunction mnemonicToEntropy(mnemonic, wordlist) {\n    wordlist = getWordlist(wordlist);\n    logger.checkNormalize();\n    var words = wordlist.split(mnemonic);\n    if ((words.length % 3) !== 0) {\n        throw new Error(\"invalid mnemonic\");\n    }\n    var entropy = (0, bytes_1.arrayify)(new Uint8Array(Math.ceil(11 * words.length / 8)));\n    var offset = 0;\n    for (var i = 0; i < words.length; i++) {\n        var index = wordlist.getWordIndex(words[i].normalize(\"NFKD\"));\n        if (index === -1) {\n            throw new Error(\"invalid mnemonic\");\n        }\n        for (var bit = 0; bit < 11; bit++) {\n            if (index & (1 << (10 - bit))) {\n                entropy[offset >> 3] |= (1 << (7 - (offset % 8)));\n            }\n            offset++;\n        }\n    }\n    var entropyBits = 32 * words.length / 3;\n    var checksumBits = words.length / 3;\n    var checksumMask = getUpperMask(checksumBits);\n    var checksum = (0, bytes_1.arrayify)((0, sha2_1.sha256)(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;\n    if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {\n        throw new Error(\"invalid checksum\");\n    }\n    return (0, bytes_1.hexlify)(entropy.slice(0, entropyBits / 8));\n}\nexports.mnemonicToEntropy = mnemonicToEntropy;\nfunction entropyToMnemonic(entropy, wordlist) {\n    wordlist = getWordlist(wordlist);\n    entropy = (0, bytes_1.arrayify)(entropy);\n    if ((entropy.length % 4) !== 0 || entropy.length < 16 || entropy.length > 32) {\n        throw new Error(\"invalid entropy\");\n    }\n    var indices = [0];\n    var remainingBits = 11;\n    for (var i = 0; i < entropy.length; i++) {\n        // Consume the whole byte (with still more to go)\n        if (remainingBits > 8) {\n            indices[indices.length - 1] <<= 8;\n            indices[indices.length - 1] |= entropy[i];\n            remainingBits -= 8;\n            // This byte will complete an 11-bit index\n        }\n        else {\n            indices[indices.length - 1] <<= remainingBits;\n            indices[indices.length - 1] |= entropy[i] >> (8 - remainingBits);\n            // Start the next word\n            indices.push(entropy[i] & getLowerMask(8 - remainingBits));\n            remainingBits += 3;\n        }\n    }\n    // Compute the checksum bits\n    var checksumBits = entropy.length / 4;\n    var checksum = (0, bytes_1.arrayify)((0, sha2_1.sha256)(entropy))[0] & getUpperMask(checksumBits);\n    // Shift the checksum into the word indices\n    indices[indices.length - 1] <<= checksumBits;\n    indices[indices.length - 1] |= (checksum >> (8 - checksumBits));\n    return wordlist.join(indices.map(function (index) { return wordlist.getWord(index); }));\n}\nexports.entropyToMnemonic = entropyToMnemonic;\nfunction isValidMnemonic(mnemonic, wordlist) {\n    try {\n        mnemonicToEntropy(mnemonic, wordlist);\n        return true;\n    }\n    catch (error) { }\n    return false;\n}\nexports.isValidMnemonic = isValidMnemonic;\nfunction getAccountPath(index) {\n    if (typeof (index) !== \"number\" || index < 0 || index >= HardenedBit || index % 1) {\n        logger.throwArgumentError(\"invalid account index\", \"index\", index);\n    }\n    return \"m/44'/60'/\" + index + \"'/0/0\";\n}\nexports.getAccountPath = getAccountPath;\n//# sourceMappingURL=index.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","bytes32","value","bytes_1","hexZeroPad","hexlify","base58check","data","basex_1","Base58","encode","concat","hexDataSlice","sha2_1","sha256","getWordlist","wordlist","wordlists_1","wordlists","words","logger","throwArgumentError","mnemonicToSeed","mnemonic","password","salt","strings_1","toUtf8Bytes","UnicodeNormalizationForm","NFKD","pbkdf2_1","pbkdf2","mnemonicToEntropy","checkNormalize","split","length","Error","entropy","arrayify","Uint8Array","Math","ceil","offset","i","index","getWordIndex","normalize","bit","entropyBits","checksumBits","checksumMask","slice","entropyToMnemonic","indices","remainingBits","push","checksum","join","map","getWord","Object","defineProperty","getAccountPath","isValidMnemonic","HDNode","defaultPath","bignumber_1","properties_1","signing_key_1","transactions_1","logger_1","_version_1","Logger","version","N","BigNumber","from","MasterSecret","_constructorGuard","constructorGuard","privateKey","publicKey","parentFingerprint","chainCode","depth","mnemonicOrPath","signingKey","SigningKey","defineReadOnly","compressedPublicKey","ripemd160","computeAddress","path","prototype","get","enumerable","configurable","neuter","HDNode.prototype.neuter","_derive","HDNode.prototype._derive","String","HardenedBit","set","I","computeHmac","SupportedAlgorithm","sha512","IL","IR","Ki","ki","add","mod","_addPoint","ek","srcMnemonic","freeze","phrase","locale","fingerprint","derivePath","HDNode.prototype.derivePath","components","shift","result","component","match","parseInt","substring","_fromSeed","HDNode._fromSeed","seed","seedArray","fromMnemonic","HDNode.fromMnemonic","fromSeed","HDNode.fromSeed","fromExtendedKey","HDNode.fromExtendedKey","extendedKey","bytes","decode","key","error"]
}
