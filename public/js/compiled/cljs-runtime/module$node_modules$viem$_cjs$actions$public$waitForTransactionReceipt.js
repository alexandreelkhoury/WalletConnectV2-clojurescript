shadow$provide.module$node_modules$viem$_cjs$actions$public$waitForTransactionReceipt=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.waitForTransactionReceipt=void 0;const transaction_js_1=require("module$node_modules$viem$_cjs$errors$transaction"),observe_js_1=require("module$node_modules$viem$_cjs$utils$observe"),withRetry_js_1=require("module$node_modules$viem$_cjs$utils$promise$withRetry"),stringify_js_1=require("module$node_modules$viem$_cjs$utils$stringify"),
getBlock_js_1=require("module$node_modules$viem$_cjs$actions$public$getBlock"),getTransaction_js_1=require("module$node_modules$viem$_cjs$actions$public$getTransaction"),getTransactionReceipt_js_1=require("module$node_modules$viem$_cjs$actions$public$getTransactionReceipt"),watchBlockNumber_js_1=require("module$node_modules$viem$_cjs$actions$public$watchBlockNumber");exports.waitForTransactionReceipt=async function(client,{confirmations=1,hash,onReplaced,pollingInterval=client.pollingInterval,timeout}){const observerId=
(0,stringify_js_1.stringify)(["waitForTransactionReceipt",client.uid,hash]);let transaction,replacedTransaction,receipt,retrying=!1;return new Promise((resolve,reject)=>{timeout&&setTimeout(()=>reject(new transaction_js_1.WaitForTransactionReceiptTimeoutError({hash})),timeout);const _unobserve=(0,observe_js_1.observe)(observerId,{onReplaced,resolve,reject},emit=>{const _unwatch=(0,watchBlockNumber_js_1.watchBlockNumber)(client,{emitMissed:!0,emitOnBegin:!0,poll:!0,pollingInterval,async onBlockNumber(blockNumber_){if(!retrying){var blockNumber=
blockNumber_;blockNumber_=fn=>{_unwatch();fn();_unobserve()};try{receipt||(transaction||(retrying=!0,await (0,withRetry_js_1.withRetry)(async()=>{transaction=await (0,getTransaction_js_1.getTransaction)(client,{hash});transaction.blockNumber&&(blockNumber=transaction.blockNumber)},{delay:({count})=>200*~~(1<<count),retryCount:6}),retrying=!1),receipt=await (0,getTransactionReceipt_js_1.getTransactionReceipt)(client,{hash})),1<confirmations&&(!receipt.blockNumber||blockNumber-receipt.blockNumber+1n<
confirmations)||blockNumber_(()=>emit.resolve(receipt))}catch(err){if(transaction&&(err instanceof transaction_js_1.TransactionNotFoundError||err instanceof transaction_js_1.TransactionReceiptNotFoundError))try{replacedTransaction=transaction;const replacementTransaction=(await (0,getBlock_js_1.getBlock)(client,{blockNumber,includeTransactions:!0})).transactions.find(({from,nonce})=>from===replacedTransaction.from&&nonce===replacedTransaction.nonce);if(replacementTransaction&&(receipt=await (0,getTransactionReceipt_js_1.getTransactionReceipt)(client,
{hash:replacementTransaction.hash}),!(1<confirmations&&(!receipt.blockNumber||blockNumber-receipt.blockNumber+1n<confirmations)))){var reason="replaced";replacementTransaction.to===replacedTransaction.to&&replacementTransaction.value===replacedTransaction.value?reason="repriced":replacementTransaction.from===replacementTransaction.to&&0n===replacementTransaction.value&&(reason="cancelled");blockNumber_(()=>{emit.onReplaced?.({reason,replacedTransaction,transaction:replacementTransaction,transactionReceipt:receipt});
emit.resolve(receipt)})}}catch(err_){blockNumber_(()=>emit.reject(err_))}else blockNumber_(()=>emit.reject(err))}}}})})})}}
//# sourceMappingURL=module$node_modules$viem$_cjs$actions$public$waitForTransactionReceipt.js.map
