["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@tanstack/query-core/build/lib/mutationCache.js"],"~:js","shadow$provide.module$node_modules$$tanstack$query_core$build$lib$mutationCache=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});var notifyManager=require(\"module$node_modules$$tanstack$query_core$build$lib$notifyManager\"),mutation$jscomp$0=require(\"module$node_modules$$tanstack$query_core$build$lib$mutation\"),utils=require(\"module$node_modules$$tanstack$query_core$build$lib$utils\");global=require(\"module$node_modules$$tanstack$query_core$build$lib$subscribable\");\nclass MutationCache extends global.Subscribable{constructor(config){super();this.config=config||{};this.mutations=[];this.mutationId=0}build(client,options,state){client=new mutation$jscomp$0.Mutation({mutationCache:this,logger:client.getLogger(),mutationId:++this.mutationId,options:client.defaultMutationOptions(options),state,defaultOptions:options.mutationKey?client.getMutationDefaults(options.mutationKey):void 0});this.add(client);return client}add(mutation){this.mutations.push(mutation);this.notify({type:\"added\",\nmutation})}remove(mutation){this.mutations=this.mutations.filter(x=>x!==mutation);this.notify({type:\"removed\",mutation})}clear(){notifyManager.notifyManager.batch(()=>{this.mutations.forEach(mutation=>{this.remove(mutation)})})}getAll(){return this.mutations}find(filters){\"undefined\"===typeof filters.exact&&(filters.exact=!0);return this.mutations.find(mutation=>utils.matchMutation(filters,mutation))}findAll(filters){return this.mutations.filter(mutation=>utils.matchMutation(filters,mutation))}notify(event){notifyManager.notifyManager.batch(()=>\n{this.listeners.forEach(({listener})=>{listener(event)})})}resumePausedMutations(){var _this$resuming;return this.resuming=(null!=(_this$resuming=this.resuming)?_this$resuming:Promise.resolve()).then(()=>{const pausedMutations=this.mutations.filter(x=>x.state.isPaused);return notifyManager.notifyManager.batch(()=>pausedMutations.reduce((promise,mutation)=>promise.then(()=>mutation.continue().catch(utils.noop)),Promise.resolve()))}).then(()=>{this.resuming=void 0})}}exports.MutationCache=MutationCache}","~:source","shadow$provide[\"module$node_modules$$tanstack$query_core$build$lib$mutationCache\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar notifyManager = require('./notifyManager.js');\nvar mutation = require('./mutation.js');\nvar utils = require('./utils.js');\nvar subscribable = require('./subscribable.js');\n\n// CLASS\nclass MutationCache extends subscribable.Subscribable {\n  constructor(config) {\n    super();\n    this.config = config || {};\n    this.mutations = [];\n    this.mutationId = 0;\n  }\n\n  build(client, options, state) {\n    const mutation$1 = new mutation.Mutation({\n      mutationCache: this,\n      logger: client.getLogger(),\n      mutationId: ++this.mutationId,\n      options: client.defaultMutationOptions(options),\n      state,\n      defaultOptions: options.mutationKey ? client.getMutationDefaults(options.mutationKey) : undefined\n    });\n    this.add(mutation$1);\n    return mutation$1;\n  }\n\n  add(mutation) {\n    this.mutations.push(mutation);\n    this.notify({\n      type: 'added',\n      mutation\n    });\n  }\n\n  remove(mutation) {\n    this.mutations = this.mutations.filter(x => x !== mutation);\n    this.notify({\n      type: 'removed',\n      mutation\n    });\n  }\n\n  clear() {\n    notifyManager.notifyManager.batch(() => {\n      this.mutations.forEach(mutation => {\n        this.remove(mutation);\n      });\n    });\n  }\n\n  getAll() {\n    return this.mutations;\n  }\n\n  find(filters) {\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true;\n    }\n\n    return this.mutations.find(mutation => utils.matchMutation(filters, mutation));\n  }\n\n  findAll(filters) {\n    return this.mutations.filter(mutation => utils.matchMutation(filters, mutation));\n  }\n\n  notify(event) {\n    notifyManager.notifyManager.batch(() => {\n      this.listeners.forEach(({\n        listener\n      }) => {\n        listener(event);\n      });\n    });\n  }\n\n  resumePausedMutations() {\n    var _this$resuming;\n\n    this.resuming = ((_this$resuming = this.resuming) != null ? _this$resuming : Promise.resolve()).then(() => {\n      const pausedMutations = this.mutations.filter(x => x.state.isPaused);\n      return notifyManager.notifyManager.batch(() => pausedMutations.reduce((promise, mutation) => promise.then(() => mutation.continue().catch(utils.noop)), Promise.resolve()));\n    }).then(() => {\n      this.resuming = undefined;\n    });\n    return this.resuming;\n  }\n\n}\n\nexports.MutationCache = MutationCache;\n//# sourceMappingURL=mutationCache.js.map\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$$tanstack$query_core$build$lib$mutation","~$shadow.js","~$module$node_modules$$tanstack$query_core$build$lib$subscribable","~$module$node_modules$$tanstack$query_core$build$lib$utils","~$module$node_modules$$tanstack$query_core$build$lib$notifyManager"]],"~:properties",["^5",["defaultOptions","config","exact","mutationCache","__esModule","MutationCache","mutation","mutations","value","resuming","logger","type","state","options","mutationId"]],"~:compiled-at",1695111489930,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$tanstack$query_core$build$lib$mutationCache.js\",\n\"lineCount\":4,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/@tanstack/query-core/build/lib/mutationCache.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$tanstack$query_core$build$lib$mutationCache\\\"] = function(global,require,module,exports) {\\n'use strict';\\n\\nObject.defineProperty(exports, '__esModule', { value: true });\\n\\nvar notifyManager = require('./notifyManager.js');\\nvar mutation = require('./mutation.js');\\nvar utils = require('./utils.js');\\nvar subscribable = require('./subscribable.js');\\n\\n// CLASS\\nclass MutationCache extends subscribable.Subscribable {\\n  constructor(config) {\\n    super();\\n    this.config = config || {};\\n    this.mutations = [];\\n    this.mutationId = 0;\\n  }\\n\\n  build(client, options, state) {\\n    const mutation$1 = new mutation.Mutation({\\n      mutationCache: this,\\n      logger: client.getLogger(),\\n      mutationId: ++this.mutationId,\\n      options: client.defaultMutationOptions(options),\\n      state,\\n      defaultOptions: options.mutationKey ? client.getMutationDefaults(options.mutationKey) : undefined\\n    });\\n    this.add(mutation$1);\\n    return mutation$1;\\n  }\\n\\n  add(mutation) {\\n    this.mutations.push(mutation);\\n    this.notify({\\n      type: 'added',\\n      mutation\\n    });\\n  }\\n\\n  remove(mutation) {\\n    this.mutations = this.mutations.filter(x => x !== mutation);\\n    this.notify({\\n      type: 'removed',\\n      mutation\\n    });\\n  }\\n\\n  clear() {\\n    notifyManager.notifyManager.batch(() => {\\n      this.mutations.forEach(mutation => {\\n        this.remove(mutation);\\n      });\\n    });\\n  }\\n\\n  getAll() {\\n    return this.mutations;\\n  }\\n\\n  find(filters) {\\n    if (typeof filters.exact === 'undefined') {\\n      filters.exact = true;\\n    }\\n\\n    return this.mutations.find(mutation => utils.matchMutation(filters, mutation));\\n  }\\n\\n  findAll(filters) {\\n    return this.mutations.filter(mutation => utils.matchMutation(filters, mutation));\\n  }\\n\\n  notify(event) {\\n    notifyManager.notifyManager.batch(() => {\\n      this.listeners.forEach(({\\n        listener\\n      }) => {\\n        listener(event);\\n      });\\n    });\\n  }\\n\\n  resumePausedMutations() {\\n    var _this$resuming;\\n\\n    this.resuming = ((_this$resuming = this.resuming) != null ? _this$resuming : Promise.resolve()).then(() => {\\n      const pausedMutations = this.mutations.filter(x => x.state.isPaused);\\n      return notifyManager.notifyManager.batch(() => pausedMutations.reduce((promise, mutation) => promise.then(() => mutation.continue().catch(utils.noop)), Promise.resolve()));\\n    }).then(() => {\\n      this.resuming = undefined;\\n    });\\n    return this.resuming;\\n  }\\n\\n}\\n\\nexports.MutationCache = MutationCache;\\n//# sourceMappingURL=mutationCache.js.map\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"notifyManager\",\"mutation\",\"utils\",\"subscribable\",\"MutationCache\",\"Subscribable\",\"constructor\",\"config\",\"mutations\",\"mutationId\",\"build\",\"client\",\"options\",\"state\",\"mutation$1\",\"Mutation\",\"mutationCache\",\"logger\",\"getLogger\",\"defaultMutationOptions\",\"defaultOptions\",\"mutationKey\",\"getMutationDefaults\",\"undefined\",\"add\",\"push\",\"notify\",\"type\",\"remove\",\"filter\",\"x\",\"clear\",\"batch\",\"forEach\",\"getAll\",\"find\",\"filters\",\"exact\",\"matchMutation\",\"findAll\",\"event\",\"listeners\",\"listener\",\"resumePausedMutations\",\"_this$resuming\",\"resuming\",\"then\",\"Promise\",\"resolve\",\"pausedMutations\",\"isPaused\",\"reduce\",\"promise\",\"continue\",\"catch\",\"noop\"]\n}\n"]