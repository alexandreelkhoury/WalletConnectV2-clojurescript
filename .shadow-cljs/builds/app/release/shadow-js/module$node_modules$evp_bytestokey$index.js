["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/evp_bytestokey/index.js"],"~:js","shadow$provide[197]=function(S,A,V,q){var F=A(111).Buffer,G=A(132);V.exports=function(r,y,e,u){F.isBuffer(r)||(r=F.from(r,\"binary\"));if(y&&(F.isBuffer(y)||(y=F.from(y,\"binary\")),8!==y.length))throw new RangeError(\"salt should be Buffer with 8 byte length\");e/=8;for(var p=F.alloc(e),n=F.alloc(u||0),l=F.alloc(0);0<e||0<u;){var h=new G;h.update(l);h.update(r);y&&h.update(y);l=h.digest();h=0;if(0<e){var k=p.length-e;h=Math.min(e,l.length);l.copy(p,k,0,h);e-=h}h<l.length&&0<u&&(k=Math.min(u,l.length-h),\nl.copy(n,n.length-u,h,h+k),u-=k)}l.fill(0);return{key:p,iv:n}}}","~:source","shadow$provide[197] = function(global,require,module,exports) {\nvar Buffer = require('safe-buffer').Buffer\nvar MD5 = require('md5.js')\n\n/* eslint-disable camelcase */\nfunction EVP_BytesToKey (password, salt, keyBits, ivLen) {\n  if (!Buffer.isBuffer(password)) password = Buffer.from(password, 'binary')\n  if (salt) {\n    if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, 'binary')\n    if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length')\n  }\n\n  var keyLen = keyBits / 8\n  var key = Buffer.alloc(keyLen)\n  var iv = Buffer.alloc(ivLen || 0)\n  var tmp = Buffer.alloc(0)\n\n  while (keyLen > 0 || ivLen > 0) {\n    var hash = new MD5()\n    hash.update(tmp)\n    hash.update(password)\n    if (salt) hash.update(salt)\n    tmp = hash.digest()\n\n    var used = 0\n\n    if (keyLen > 0) {\n      var keyStart = key.length - keyLen\n      used = Math.min(keyLen, tmp.length)\n      tmp.copy(key, keyStart, 0, used)\n      keyLen -= used\n    }\n\n    if (used < tmp.length && ivLen > 0) {\n      var ivStart = iv.length - ivLen\n      var length = Math.min(ivLen, tmp.length - used)\n      tmp.copy(iv, ivStart, used, used + length)\n      ivLen -= length\n    }\n  }\n\n  tmp.fill(0)\n  return { key: key, iv: iv }\n}\n\nmodule.exports = EVP_BytesToKey\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$md5_DOT_js$index","~$shadow.js","~$module$node_modules$safe_buffer$index"]],"~:properties",["^5",["iv","key"]],"~:compiled-at",1695041440827,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$evp_bytestokey$index.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAC9D,IAAIC,EAASH,CAAA,CAAQ,GAAR,CAAuBG,CAAAA,MAApC,CACIC,EAAMJ,CAAA,CAAQ,GAAR,CA2CVC,EAAOC,CAAAA,OAAP,CAxCAG,QAAwB,CAACC,CAAD,CAAWC,CAAX,CAAiBC,CAAjB,CAA0BC,CAA1B,CAAiC,CAClDN,CAAOO,CAAAA,QAAP,CAAgBJ,CAAhB,CAAL,GAAgCA,CAAhC,CAA2CH,CAAOQ,CAAAA,IAAP,CAAYL,CAAZ,CAAsB,QAAtB,CAA3C,CACA,IAAIC,CAAJ,GACOJ,CAAOO,CAAAA,QAAP,CAAgBH,CAAhB,CACD,GADwBA,CACxB,CAD+BJ,CAAOQ,CAAAA,IAAP,CAAYJ,CAAZ,CAAkB,QAAlB,CAC/B,EAAgB,CAAhB,GAAAA,CAAKK,CAAAA,MAFX,EAEyB,KAAM,KAAIC,UAAJ,CAAe,0CAAf,CAAN,CAGZL,CAATM,EAAmB,CAKvB,KAJA,IAAIC,EAAMZ,CAAOa,CAAAA,KAAP,CAAaF,CAAb,CAAV,CACIG,EAAKd,CAAOa,CAAAA,KAAP,CAAaP,CAAb,EAAsB,CAAtB,CADT,CAEIS,EAAMf,CAAOa,CAAAA,KAAP,CAAa,CAAb,CAEV,CAAgB,CAAhB,CAAOF,CAAP,EAA6B,CAA7B,CAAqBL,CAArB,CAAA,CAAgC,CAC9B,IAAIU,EAAO,IAAIf,CACfe,EAAKC,CAAAA,MAAL,CAAYF,CAAZ,CACAC,EAAKC,CAAAA,MAAL,CAAYd,CAAZ,CACIC,EAAJ,EAAUY,CAAKC,CAAAA,MAAL,CAAYb,CAAZ,CACVW,EAAA,CAAMC,CAAKE,CAAAA,MAAL,EAEFC,EAAAA,CAAO,CAEX,IAAa,CAAb,CAAIR,CAAJ,CAAgB,CACd,IAAIS,EAAWR,CAAIH,CAAAA,MAAfW,CAAwBT,CAC5BQ,EAAA,CAAOE,IAAKC,CAAAA,GAAL,CAASX,CAAT,CAAiBI,CAAIN,CAAAA,MAArB,CACPM,EAAIQ,CAAAA,IAAJ,CAASX,CAAT,CAAcQ,CAAd,CAAwB,CAAxB,CAA2BD,CAA3B,CACAR,EAAA,EAAUQ,CAJI,CAOZA,CAAJ,CAAWJ,CAAIN,CAAAA,MAAf,EAAiC,CAAjC,CAAyBH,CAAzB,GAEMG,CAEJ,CAFaY,IAAKC,CAAAA,GAAL,CAAShB,CAAT,CAAgBS,CAAIN,CAAAA,MAApB,CAA6BU,CAA7B,CAEb;AADAJ,CAAIQ,CAAAA,IAAJ,CAAST,CAAT,CAFcA,CAAGL,CAAAA,MAEjB,CAF0BH,CAE1B,CAAsBa,CAAtB,CAA4BA,CAA5B,CAAmCV,CAAnC,CACA,CAAAH,CAAA,EAASG,CAJX,CAhB8B,CAwBhCM,CAAIS,CAAAA,IAAJ,CAAS,CAAT,CACA,OAAO,CAAEZ,IAAKA,CAAP,CAAYE,GAAIA,CAAhB,CArCgD,CALK;\",\n\"sources\":[\"node_modules/evp_bytestokey/index.js\"],\n\"sourcesContent\":[\"shadow$provide[197] = function(global,require,module,exports) {\\nvar Buffer = require('safe-buffer').Buffer\\nvar MD5 = require('md5.js')\\n\\n/* eslint-disable camelcase */\\nfunction EVP_BytesToKey (password, salt, keyBits, ivLen) {\\n  if (!Buffer.isBuffer(password)) password = Buffer.from(password, 'binary')\\n  if (salt) {\\n    if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, 'binary')\\n    if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length')\\n  }\\n\\n  var keyLen = keyBits / 8\\n  var key = Buffer.alloc(keyLen)\\n  var iv = Buffer.alloc(ivLen || 0)\\n  var tmp = Buffer.alloc(0)\\n\\n  while (keyLen > 0 || ivLen > 0) {\\n    var hash = new MD5()\\n    hash.update(tmp)\\n    hash.update(password)\\n    if (salt) hash.update(salt)\\n    tmp = hash.digest()\\n\\n    var used = 0\\n\\n    if (keyLen > 0) {\\n      var keyStart = key.length - keyLen\\n      used = Math.min(keyLen, tmp.length)\\n      tmp.copy(key, keyStart, 0, used)\\n      keyLen -= used\\n    }\\n\\n    if (used < tmp.length && ivLen > 0) {\\n      var ivStart = iv.length - ivLen\\n      var length = Math.min(ivLen, tmp.length - used)\\n      tmp.copy(iv, ivStart, used, used + length)\\n      ivLen -= length\\n    }\\n  }\\n\\n  tmp.fill(0)\\n  return { key: key, iv: iv }\\n}\\n\\nmodule.exports = EVP_BytesToKey\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Buffer\",\"MD5\",\"EVP_BytesToKey\",\"password\",\"salt\",\"keyBits\",\"ivLen\",\"isBuffer\",\"from\",\"length\",\"RangeError\",\"keyLen\",\"key\",\"alloc\",\"iv\",\"tmp\",\"hash\",\"update\",\"digest\",\"used\",\"keyStart\",\"Math\",\"min\",\"copy\",\"fill\"]\n}\n"]