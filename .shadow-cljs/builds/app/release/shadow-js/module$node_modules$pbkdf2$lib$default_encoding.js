["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/pbkdf2/lib/default-encoding.js"],"~:js","shadow$provide[170]=function(S,A,V,q){A=A(1);S=S.process&&S.process.browser?\"utf-8\":S.process&&S.process.version?6<=parseInt(A.version.split(\".\")[0].slice(1),10)?\"utf-8\":\"binary\":\"utf-8\";V.exports=S}","~:source","shadow$provide[170] = function(global,require,module,exports) {\nvar process = require('process');\nvar defaultEncoding\n/* istanbul ignore next */\nif (global.process && global.process.browser) {\n  defaultEncoding = 'utf-8'\n} else if (global.process && global.process.version) {\n  var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10)\n\n  defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary'\n} else {\n  defaultEncoding = 'utf-8'\n}\nmodule.exports = defaultEncoding\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$process$browser","~$shadow.js"]],"~:properties",["^5",[]],"~:compiled-at",1695041440819,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$pbkdf2$lib$default_encoding.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAC1DC,CAAAA,CAAUH,CAAA,CAAQ,CAAR,CAIZI,EAAA,CADEL,CAAOI,CAAAA,OAAX,EAAsBJ,CAAOI,CAAAA,OAAQE,CAAAA,OAArC,CACoB,OADpB,CAEWN,CAAOI,CAAAA,OAAX,EAAsBJ,CAAOI,CAAAA,OAAQG,CAAAA,OAArC,CAG8B,CAAjB,EAFEC,QAAAC,CAASL,CAAQG,CAAAA,OAAQG,CAAAA,KAAhB,CAAsB,GAAtB,CAAA,CAA2B,CAA3B,CAA8BC,CAAAA,KAA9B,CAAoC,CAApC,CAATF,CAAiD,EAAjDA,CAEF,CAAqB,OAArB,CAA+B,QAH5C,CAKa,OAEpBP,EAAOC,CAAAA,OAAP,CAAiBE,CAb6C;\",\n\"sources\":[\"node_modules/pbkdf2/lib/default-encoding.js\"],\n\"sourcesContent\":[\"shadow$provide[170] = function(global,require,module,exports) {\\nvar process = require('process');\\nvar defaultEncoding\\n/* istanbul ignore next */\\nif (global.process && global.process.browser) {\\n  defaultEncoding = 'utf-8'\\n} else if (global.process && global.process.version) {\\n  var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10)\\n\\n  defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary'\\n} else {\\n  defaultEncoding = 'utf-8'\\n}\\nmodule.exports = defaultEncoding\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"process\",\"defaultEncoding\",\"browser\",\"version\",\"parseInt\",\"pVersionMajor\",\"split\",\"slice\"]\n}\n"]