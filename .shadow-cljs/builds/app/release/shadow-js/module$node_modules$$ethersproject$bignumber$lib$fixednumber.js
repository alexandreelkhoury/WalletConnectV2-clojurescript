["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@ethersproject/bignumber/lib/fixednumber.js"],"~:js","shadow$provide[14]=function(S,A,V,q){function F(D,C,I,M){C={fault:C,operation:I};void 0!==M&&(C.value=M);return p.throwError(D,u.Logger.errors.NUMERIC_FAULT,C)}function G(D){if(\"number\"!==typeof D)try{D=n.BigNumber.from(D).toNumber()}catch(C){}return\"number\"===typeof D&&0<=D&&256>=D&&!(D%1)?\"1\"+t.substring(0,D):p.throwArgumentError(\"invalid decimal size\",\"decimals\",D)}function r(D,C){null==C&&(C=0);C=G(C);D=n.BigNumber.from(D);var I=D.lt(h);I&&(D=D.mul(k));for(var M=D.mod(C).toString();M.length<C.length-\n1;)M=\"0\"+M;M=M.match(/^([0-9]*[1-9]|0)(0*)/)[1];D=D.div(C).toString();D=1===C.length?D:D+\".\"+M;I&&(D=\"-\"+D);return D}function y(D,C){null==C&&(C=0);var I=G(C);\"string\"===typeof D&&D.match(/^-?[0-9.]+$/)||p.throwArgumentError(\"invalid decimal value\",\"value\",D);(C=\"-\"===D.substring(0,1))&&(D=D.substring(1));\".\"===D&&p.throwArgumentError(\"missing value\",\"value\",D);var M=D.split(\".\");2<M.length&&p.throwArgumentError(\"too many decimal points\",\"value\",D);D=M[0];M=M[1];D||(D=\"0\");for(M||(M=\"0\");\"0\"===M[M.length-\n1];)M=M.substring(0,M.length-1);M.length>I.length-1&&F(\"fractional component exceeds decimals\",\"underflow\",\"parseFixed\");for(\"\"===M&&(M=\"0\");M.length<I.length-1;)M+=\"0\";D=n.BigNumber.from(D);M=n.BigNumber.from(M);I=D.mul(I).add(M);C&&(I=I.mul(k));return I}Object.defineProperty(q,\"__esModule\",{value:!0});q.FixedNumber=q.FixedFormat=q.parseFixed=q.formatFixed=void 0;var e=A(11),u=A(9);S=A(12);for(var p=new u.Logger(S.version),n=A(13),l={},h=n.BigNumber.from(0),k=n.BigNumber.from(-1),t=\"0\";256>t.length;)t+=\nt;q.formatFixed=r;q.parseFixed=y;var B=function(){function D(C,I,M,P){C!==l&&p.throwError(\"cannot use FixedFormat constructor; use FixedFormat.from\",u.Logger.errors.UNSUPPORTED_OPERATION,{operation:\"new FixedFormat\"});this.signed=I;this.width=M;this.decimals=P;this.name=(I?\"\":\"u\")+\"fixed\"+String(M)+\"x\"+String(P);this._multiplier=G(P);Object.freeze(this)}D.from=function(C){if(C instanceof D)return C;\"number\"===typeof C&&(C=\"fixed128x\"+C);var I=!0,M=128,P=18;if(\"string\"===typeof C)\"fixed\"!==C&&(\"ufixed\"===\nC?I=!1:((P=C.match(/^(u?)fixed([0-9]+)x([0-9]+)$/))||p.throwArgumentError(\"invalid fixed format\",\"format\",C),I=\"u\"!==P[1],M=parseInt(P[2]),P=parseInt(P[3])));else if(C){var J=function(T,N,a){if(null==C[T])return a;typeof C[T]!==N&&p.throwArgumentError(\"invalid fixed format (\"+T+\" not \"+N+\")\",\"format.\"+T,C[T]);return C[T]};I=J(\"signed\",\"boolean\",I);M=J(\"width\",\"number\",M);P=J(\"decimals\",\"number\",P)}M%8&&p.throwArgumentError(\"invalid fixed format width (not byte aligned)\",\"format.width\",M);80<P&&p.throwArgumentError(\"invalid fixed format (decimals too large)\",\n\"format.decimals\",P);return new D(l,I,M,P)};return D}();q.FixedFormat=B;A=function(){function D(C,I,M,P){C!==l&&p.throwError(\"cannot use FixedNumber constructor; use FixedNumber.from\",u.Logger.errors.UNSUPPORTED_OPERATION,{operation:\"new FixedFormat\"});this.format=P;this._hex=I;this._value=M;this._isFixedNumber=!0;Object.freeze(this)}D.prototype._checkFormat=function(C){this.format.name!==C.format.name&&p.throwArgumentError(\"incompatible format; use fixedNumber.toFormat\",\"other\",C)};D.prototype.addUnsafe=\nfunction(C){this._checkFormat(C);var I=y(this._value,this.format.decimals);C=y(C._value,C.format.decimals);return D.fromValue(I.add(C),this.format.decimals,this.format)};D.prototype.subUnsafe=function(C){this._checkFormat(C);var I=y(this._value,this.format.decimals);C=y(C._value,C.format.decimals);return D.fromValue(I.sub(C),this.format.decimals,this.format)};D.prototype.mulUnsafe=function(C){this._checkFormat(C);var I=y(this._value,this.format.decimals);C=y(C._value,C.format.decimals);return D.fromValue(I.mul(C).div(this.format._multiplier),\nthis.format.decimals,this.format)};D.prototype.divUnsafe=function(C){this._checkFormat(C);var I=y(this._value,this.format.decimals);C=y(C._value,C.format.decimals);return D.fromValue(I.mul(this.format._multiplier).div(C),this.format.decimals,this.format)};D.prototype.floor=function(){var C=this.toString().split(\".\");1===C.length&&C.push(\"0\");var I=D.from(C[0],this.format);C=!C[1].match(/^(0*)$/);this.isNegative()&&C&&(I=I.subUnsafe(E.toFormat(I.format)));return I};D.prototype.ceiling=function(){var C=\nthis.toString().split(\".\");1===C.length&&C.push(\"0\");var I=D.from(C[0],this.format);C=!C[1].match(/^(0*)$/);!this.isNegative()&&C&&(I=I.addUnsafe(E.toFormat(I.format)));return I};D.prototype.round=function(C){null==C&&(C=0);var I=this.toString().split(\".\");1===I.length&&I.push(\"0\");(0>C||80<C||C%1)&&p.throwArgumentError(\"invalid decimal count\",\"decimals\",C);if(I[1].length<=C)return this;C=D.from(\"1\"+t.substring(0,C),this.format);I=H.toFormat(this.format);return this.mulUnsafe(C).addUnsafe(I).floor().divUnsafe(C)};\nD.prototype.isZero=function(){return\"0.0\"===this._value||\"0\"===this._value};D.prototype.isNegative=function(){return\"-\"===this._value[0]};D.prototype.toString=function(){return this._value};D.prototype.toHexString=function(C){if(null==C)return this._hex;C%8&&p.throwArgumentError(\"invalid byte width\",\"width\",C);var I=n.BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(C).toHexString();return(0,e.hexZeroPad)(I,C/8)};D.prototype.toUnsafeFloat=function(){return parseFloat(this.toString())};\nD.prototype.toFormat=function(C){return D.fromString(this._value,C)};D.fromValue=function(C,I,M){null!=M||null==I||(0,n.isBigNumberish)(I)||(M=I,I=null);null==I&&(I=0);null==M&&(M=\"fixed\");return D.fromString(r(C,I),B.from(M))};D.fromString=function(C,I){null==I&&(I=\"fixed\");I=B.from(I);var M=y(C,I.decimals);!I.signed&&M.lt(h)&&F(\"unsigned value cannot be negative\",\"overflow\",\"value\",C);I.signed?C=M.toTwos(I.width).toHexString():(C=M.toHexString(),C=(0,e.hexZeroPad)(C,I.width/8));M=r(M,I.decimals);\nreturn new D(l,C,M,I)};D.fromBytes=function(C,I){null==I&&(I=\"fixed\");I=B.from(I);if((0,e.arrayify)(C).length>I.width/8)throw Error(\"overflow\");var M=n.BigNumber.from(C);I.signed&&(M=M.fromTwos(I.width));C=M.toTwos((I.signed?0:1)+I.width).toHexString();M=r(M,I.decimals);return new D(l,C,M,I)};D.from=function(C,I){if(\"string\"===typeof C)return D.fromString(C,I);if((0,e.isBytes)(C))return D.fromBytes(C,I);try{return D.fromValue(C,0,I)}catch(M){if(M.code!==u.Logger.errors.INVALID_ARGUMENT)throw M;}return p.throwArgumentError(\"invalid FixedNumber value\",\n\"value\",C)};D.isFixedNumber=function(C){return!(!C||!C._isFixedNumber)};return D}();q.FixedNumber=A;var E=A.from(1),H=A.from(\"0.5\")}","~:source","shadow$provide[14] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FixedNumber = exports.FixedFormat = exports.parseFixed = exports.formatFixed = void 0;\nvar bytes_1 = require(\"@ethersproject/bytes\");\nvar logger_1 = require(\"@ethersproject/logger\");\nvar _version_1 = require(\"./_version\");\nvar logger = new logger_1.Logger(_version_1.version);\nvar bignumber_1 = require(\"./bignumber\");\nvar _constructorGuard = {};\nvar Zero = bignumber_1.BigNumber.from(0);\nvar NegativeOne = bignumber_1.BigNumber.from(-1);\nfunction throwFault(message, fault, operation, value) {\n    var params = { fault: fault, operation: operation };\n    if (value !== undefined) {\n        params.value = value;\n    }\n    return logger.throwError(message, logger_1.Logger.errors.NUMERIC_FAULT, params);\n}\n// Constant to pull zeros from for multipliers\nvar zeros = \"0\";\nwhile (zeros.length < 256) {\n    zeros += zeros;\n}\n// Returns a string \"1\" followed by decimal \"0\"s\nfunction getMultiplier(decimals) {\n    if (typeof (decimals) !== \"number\") {\n        try {\n            decimals = bignumber_1.BigNumber.from(decimals).toNumber();\n        }\n        catch (e) { }\n    }\n    if (typeof (decimals) === \"number\" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {\n        return (\"1\" + zeros.substring(0, decimals));\n    }\n    return logger.throwArgumentError(\"invalid decimal size\", \"decimals\", decimals);\n}\nfunction formatFixed(value, decimals) {\n    if (decimals == null) {\n        decimals = 0;\n    }\n    var multiplier = getMultiplier(decimals);\n    // Make sure wei is a big number (convert as necessary)\n    value = bignumber_1.BigNumber.from(value);\n    var negative = value.lt(Zero);\n    if (negative) {\n        value = value.mul(NegativeOne);\n    }\n    var fraction = value.mod(multiplier).toString();\n    while (fraction.length < multiplier.length - 1) {\n        fraction = \"0\" + fraction;\n    }\n    // Strip training 0\n    fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];\n    var whole = value.div(multiplier).toString();\n    if (multiplier.length === 1) {\n        value = whole;\n    }\n    else {\n        value = whole + \".\" + fraction;\n    }\n    if (negative) {\n        value = \"-\" + value;\n    }\n    return value;\n}\nexports.formatFixed = formatFixed;\nfunction parseFixed(value, decimals) {\n    if (decimals == null) {\n        decimals = 0;\n    }\n    var multiplier = getMultiplier(decimals);\n    if (typeof (value) !== \"string\" || !value.match(/^-?[0-9.]+$/)) {\n        logger.throwArgumentError(\"invalid decimal value\", \"value\", value);\n    }\n    // Is it negative?\n    var negative = (value.substring(0, 1) === \"-\");\n    if (negative) {\n        value = value.substring(1);\n    }\n    if (value === \".\") {\n        logger.throwArgumentError(\"missing value\", \"value\", value);\n    }\n    // Split it into a whole and fractional part\n    var comps = value.split(\".\");\n    if (comps.length > 2) {\n        logger.throwArgumentError(\"too many decimal points\", \"value\", value);\n    }\n    var whole = comps[0], fraction = comps[1];\n    if (!whole) {\n        whole = \"0\";\n    }\n    if (!fraction) {\n        fraction = \"0\";\n    }\n    // Trim trailing zeros\n    while (fraction[fraction.length - 1] === \"0\") {\n        fraction = fraction.substring(0, fraction.length - 1);\n    }\n    // Check the fraction doesn't exceed our decimals size\n    if (fraction.length > multiplier.length - 1) {\n        throwFault(\"fractional component exceeds decimals\", \"underflow\", \"parseFixed\");\n    }\n    // If decimals is 0, we have an empty string for fraction\n    if (fraction === \"\") {\n        fraction = \"0\";\n    }\n    // Fully pad the string with zeros to get to wei\n    while (fraction.length < multiplier.length - 1) {\n        fraction += \"0\";\n    }\n    var wholeValue = bignumber_1.BigNumber.from(whole);\n    var fractionValue = bignumber_1.BigNumber.from(fraction);\n    var wei = (wholeValue.mul(multiplier)).add(fractionValue);\n    if (negative) {\n        wei = wei.mul(NegativeOne);\n    }\n    return wei;\n}\nexports.parseFixed = parseFixed;\nvar FixedFormat = /** @class */ (function () {\n    function FixedFormat(constructorGuard, signed, width, decimals) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"cannot use FixedFormat constructor; use FixedFormat.from\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new FixedFormat\"\n            });\n        }\n        this.signed = signed;\n        this.width = width;\n        this.decimals = decimals;\n        this.name = (signed ? \"\" : \"u\") + \"fixed\" + String(width) + \"x\" + String(decimals);\n        this._multiplier = getMultiplier(decimals);\n        Object.freeze(this);\n    }\n    FixedFormat.from = function (value) {\n        if (value instanceof FixedFormat) {\n            return value;\n        }\n        if (typeof (value) === \"number\") {\n            value = \"fixed128x\" + value;\n        }\n        var signed = true;\n        var width = 128;\n        var decimals = 18;\n        if (typeof (value) === \"string\") {\n            if (value === \"fixed\") {\n                // defaults...\n            }\n            else if (value === \"ufixed\") {\n                signed = false;\n            }\n            else {\n                var match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);\n                if (!match) {\n                    logger.throwArgumentError(\"invalid fixed format\", \"format\", value);\n                }\n                signed = (match[1] !== \"u\");\n                width = parseInt(match[2]);\n                decimals = parseInt(match[3]);\n            }\n        }\n        else if (value) {\n            var check = function (key, type, defaultValue) {\n                if (value[key] == null) {\n                    return defaultValue;\n                }\n                if (typeof (value[key]) !== type) {\n                    logger.throwArgumentError(\"invalid fixed format (\" + key + \" not \" + type + \")\", \"format.\" + key, value[key]);\n                }\n                return value[key];\n            };\n            signed = check(\"signed\", \"boolean\", signed);\n            width = check(\"width\", \"number\", width);\n            decimals = check(\"decimals\", \"number\", decimals);\n        }\n        if (width % 8) {\n            logger.throwArgumentError(\"invalid fixed format width (not byte aligned)\", \"format.width\", width);\n        }\n        if (decimals > 80) {\n            logger.throwArgumentError(\"invalid fixed format (decimals too large)\", \"format.decimals\", decimals);\n        }\n        return new FixedFormat(_constructorGuard, signed, width, decimals);\n    };\n    return FixedFormat;\n}());\nexports.FixedFormat = FixedFormat;\nvar FixedNumber = /** @class */ (function () {\n    function FixedNumber(constructorGuard, hex, value, format) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"cannot use FixedNumber constructor; use FixedNumber.from\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new FixedFormat\"\n            });\n        }\n        this.format = format;\n        this._hex = hex;\n        this._value = value;\n        this._isFixedNumber = true;\n        Object.freeze(this);\n    }\n    FixedNumber.prototype._checkFormat = function (other) {\n        if (this.format.name !== other.format.name) {\n            logger.throwArgumentError(\"incompatible format; use fixedNumber.toFormat\", \"other\", other);\n        }\n    };\n    FixedNumber.prototype.addUnsafe = function (other) {\n        this._checkFormat(other);\n        var a = parseFixed(this._value, this.format.decimals);\n        var b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.add(b), this.format.decimals, this.format);\n    };\n    FixedNumber.prototype.subUnsafe = function (other) {\n        this._checkFormat(other);\n        var a = parseFixed(this._value, this.format.decimals);\n        var b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.sub(b), this.format.decimals, this.format);\n    };\n    FixedNumber.prototype.mulUnsafe = function (other) {\n        this._checkFormat(other);\n        var a = parseFixed(this._value, this.format.decimals);\n        var b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);\n    };\n    FixedNumber.prototype.divUnsafe = function (other) {\n        this._checkFormat(other);\n        var a = parseFixed(this._value, this.format.decimals);\n        var b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);\n    };\n    FixedNumber.prototype.floor = function () {\n        var comps = this.toString().split(\".\");\n        if (comps.length === 1) {\n            comps.push(\"0\");\n        }\n        var result = FixedNumber.from(comps[0], this.format);\n        var hasFraction = !comps[1].match(/^(0*)$/);\n        if (this.isNegative() && hasFraction) {\n            result = result.subUnsafe(ONE.toFormat(result.format));\n        }\n        return result;\n    };\n    FixedNumber.prototype.ceiling = function () {\n        var comps = this.toString().split(\".\");\n        if (comps.length === 1) {\n            comps.push(\"0\");\n        }\n        var result = FixedNumber.from(comps[0], this.format);\n        var hasFraction = !comps[1].match(/^(0*)$/);\n        if (!this.isNegative() && hasFraction) {\n            result = result.addUnsafe(ONE.toFormat(result.format));\n        }\n        return result;\n    };\n    // @TODO: Support other rounding algorithms\n    FixedNumber.prototype.round = function (decimals) {\n        if (decimals == null) {\n            decimals = 0;\n        }\n        // If we are already in range, we're done\n        var comps = this.toString().split(\".\");\n        if (comps.length === 1) {\n            comps.push(\"0\");\n        }\n        if (decimals < 0 || decimals > 80 || (decimals % 1)) {\n            logger.throwArgumentError(\"invalid decimal count\", \"decimals\", decimals);\n        }\n        if (comps[1].length <= decimals) {\n            return this;\n        }\n        var factor = FixedNumber.from(\"1\" + zeros.substring(0, decimals), this.format);\n        var bump = BUMP.toFormat(this.format);\n        return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);\n    };\n    FixedNumber.prototype.isZero = function () {\n        return (this._value === \"0.0\" || this._value === \"0\");\n    };\n    FixedNumber.prototype.isNegative = function () {\n        return (this._value[0] === \"-\");\n    };\n    FixedNumber.prototype.toString = function () { return this._value; };\n    FixedNumber.prototype.toHexString = function (width) {\n        if (width == null) {\n            return this._hex;\n        }\n        if (width % 8) {\n            logger.throwArgumentError(\"invalid byte width\", \"width\", width);\n        }\n        var hex = bignumber_1.BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();\n        return (0, bytes_1.hexZeroPad)(hex, width / 8);\n    };\n    FixedNumber.prototype.toUnsafeFloat = function () { return parseFloat(this.toString()); };\n    FixedNumber.prototype.toFormat = function (format) {\n        return FixedNumber.fromString(this._value, format);\n    };\n    FixedNumber.fromValue = function (value, decimals, format) {\n        // If decimals looks more like a format, and there is no format, shift the parameters\n        if (format == null && decimals != null && !(0, bignumber_1.isBigNumberish)(decimals)) {\n            format = decimals;\n            decimals = null;\n        }\n        if (decimals == null) {\n            decimals = 0;\n        }\n        if (format == null) {\n            format = \"fixed\";\n        }\n        return FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));\n    };\n    FixedNumber.fromString = function (value, format) {\n        if (format == null) {\n            format = \"fixed\";\n        }\n        var fixedFormat = FixedFormat.from(format);\n        var numeric = parseFixed(value, fixedFormat.decimals);\n        if (!fixedFormat.signed && numeric.lt(Zero)) {\n            throwFault(\"unsigned value cannot be negative\", \"overflow\", \"value\", value);\n        }\n        var hex = null;\n        if (fixedFormat.signed) {\n            hex = numeric.toTwos(fixedFormat.width).toHexString();\n        }\n        else {\n            hex = numeric.toHexString();\n            hex = (0, bytes_1.hexZeroPad)(hex, fixedFormat.width / 8);\n        }\n        var decimal = formatFixed(numeric, fixedFormat.decimals);\n        return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);\n    };\n    FixedNumber.fromBytes = function (value, format) {\n        if (format == null) {\n            format = \"fixed\";\n        }\n        var fixedFormat = FixedFormat.from(format);\n        if ((0, bytes_1.arrayify)(value).length > fixedFormat.width / 8) {\n            throw new Error(\"overflow\");\n        }\n        var numeric = bignumber_1.BigNumber.from(value);\n        if (fixedFormat.signed) {\n            numeric = numeric.fromTwos(fixedFormat.width);\n        }\n        var hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();\n        var decimal = formatFixed(numeric, fixedFormat.decimals);\n        return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);\n    };\n    FixedNumber.from = function (value, format) {\n        if (typeof (value) === \"string\") {\n            return FixedNumber.fromString(value, format);\n        }\n        if ((0, bytes_1.isBytes)(value)) {\n            return FixedNumber.fromBytes(value, format);\n        }\n        try {\n            return FixedNumber.fromValue(value, 0, format);\n        }\n        catch (error) {\n            // Allow NUMERIC_FAULT to bubble up\n            if (error.code !== logger_1.Logger.errors.INVALID_ARGUMENT) {\n                throw error;\n            }\n        }\n        return logger.throwArgumentError(\"invalid FixedNumber value\", \"value\", value);\n    };\n    FixedNumber.isFixedNumber = function (value) {\n        return !!(value && value._isFixedNumber);\n    };\n    return FixedNumber;\n}());\nexports.FixedNumber = FixedNumber;\nvar ONE = FixedNumber.from(1);\nvar BUMP = FixedNumber.from(\"0.5\");\n//# sourceMappingURL=fixednumber.js.map\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$$ethersproject$bytes$lib$index","~$module$node_modules$$ethersproject$bignumber$lib$bignumber","~$module$node_modules$$ethersproject$logger$lib$index","~$module$node_modules$$ethersproject$bignumber$lib$_version"]],"~:properties",["^5",["floor","fromBytes","width","_multiplier","toHexString","isNegative","isZero","_value","fromString","_checkFormat","signed","__esModule","toString","toUnsafeFloat","formatFixed","name","mulUnsafe","value","FixedFormat","operation","_hex","addUnsafe","fromValue","from","subUnsafe","_isFixedNumber","FixedNumber","parseFixed","decimals","isFixedNumber","ceiling","round","divUnsafe","fault","format","toFormat"]],"~:compiled-at",1695041440676,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$ethersproject$bignumber$lib$fixednumber.js\",\n\"lineCount\":13,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/@ethersproject/bignumber/lib/fixednumber.js\"],\n\"sourcesContent\":[\"shadow$provide[14] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nexports.FixedNumber = exports.FixedFormat = exports.parseFixed = exports.formatFixed = void 0;\\nvar bytes_1 = require(\\\"@ethersproject/bytes\\\");\\nvar logger_1 = require(\\\"@ethersproject/logger\\\");\\nvar _version_1 = require(\\\"./_version\\\");\\nvar logger = new logger_1.Logger(_version_1.version);\\nvar bignumber_1 = require(\\\"./bignumber\\\");\\nvar _constructorGuard = {};\\nvar Zero = bignumber_1.BigNumber.from(0);\\nvar NegativeOne = bignumber_1.BigNumber.from(-1);\\nfunction throwFault(message, fault, operation, value) {\\n    var params = { fault: fault, operation: operation };\\n    if (value !== undefined) {\\n        params.value = value;\\n    }\\n    return logger.throwError(message, logger_1.Logger.errors.NUMERIC_FAULT, params);\\n}\\n// Constant to pull zeros from for multipliers\\nvar zeros = \\\"0\\\";\\nwhile (zeros.length < 256) {\\n    zeros += zeros;\\n}\\n// Returns a string \\\"1\\\" followed by decimal \\\"0\\\"s\\nfunction getMultiplier(decimals) {\\n    if (typeof (decimals) !== \\\"number\\\") {\\n        try {\\n            decimals = bignumber_1.BigNumber.from(decimals).toNumber();\\n        }\\n        catch (e) { }\\n    }\\n    if (typeof (decimals) === \\\"number\\\" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {\\n        return (\\\"1\\\" + zeros.substring(0, decimals));\\n    }\\n    return logger.throwArgumentError(\\\"invalid decimal size\\\", \\\"decimals\\\", decimals);\\n}\\nfunction formatFixed(value, decimals) {\\n    if (decimals == null) {\\n        decimals = 0;\\n    }\\n    var multiplier = getMultiplier(decimals);\\n    // Make sure wei is a big number (convert as necessary)\\n    value = bignumber_1.BigNumber.from(value);\\n    var negative = value.lt(Zero);\\n    if (negative) {\\n        value = value.mul(NegativeOne);\\n    }\\n    var fraction = value.mod(multiplier).toString();\\n    while (fraction.length < multiplier.length - 1) {\\n        fraction = \\\"0\\\" + fraction;\\n    }\\n    // Strip training 0\\n    fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];\\n    var whole = value.div(multiplier).toString();\\n    if (multiplier.length === 1) {\\n        value = whole;\\n    }\\n    else {\\n        value = whole + \\\".\\\" + fraction;\\n    }\\n    if (negative) {\\n        value = \\\"-\\\" + value;\\n    }\\n    return value;\\n}\\nexports.formatFixed = formatFixed;\\nfunction parseFixed(value, decimals) {\\n    if (decimals == null) {\\n        decimals = 0;\\n    }\\n    var multiplier = getMultiplier(decimals);\\n    if (typeof (value) !== \\\"string\\\" || !value.match(/^-?[0-9.]+$/)) {\\n        logger.throwArgumentError(\\\"invalid decimal value\\\", \\\"value\\\", value);\\n    }\\n    // Is it negative?\\n    var negative = (value.substring(0, 1) === \\\"-\\\");\\n    if (negative) {\\n        value = value.substring(1);\\n    }\\n    if (value === \\\".\\\") {\\n        logger.throwArgumentError(\\\"missing value\\\", \\\"value\\\", value);\\n    }\\n    // Split it into a whole and fractional part\\n    var comps = value.split(\\\".\\\");\\n    if (comps.length > 2) {\\n        logger.throwArgumentError(\\\"too many decimal points\\\", \\\"value\\\", value);\\n    }\\n    var whole = comps[0], fraction = comps[1];\\n    if (!whole) {\\n        whole = \\\"0\\\";\\n    }\\n    if (!fraction) {\\n        fraction = \\\"0\\\";\\n    }\\n    // Trim trailing zeros\\n    while (fraction[fraction.length - 1] === \\\"0\\\") {\\n        fraction = fraction.substring(0, fraction.length - 1);\\n    }\\n    // Check the fraction doesn't exceed our decimals size\\n    if (fraction.length > multiplier.length - 1) {\\n        throwFault(\\\"fractional component exceeds decimals\\\", \\\"underflow\\\", \\\"parseFixed\\\");\\n    }\\n    // If decimals is 0, we have an empty string for fraction\\n    if (fraction === \\\"\\\") {\\n        fraction = \\\"0\\\";\\n    }\\n    // Fully pad the string with zeros to get to wei\\n    while (fraction.length < multiplier.length - 1) {\\n        fraction += \\\"0\\\";\\n    }\\n    var wholeValue = bignumber_1.BigNumber.from(whole);\\n    var fractionValue = bignumber_1.BigNumber.from(fraction);\\n    var wei = (wholeValue.mul(multiplier)).add(fractionValue);\\n    if (negative) {\\n        wei = wei.mul(NegativeOne);\\n    }\\n    return wei;\\n}\\nexports.parseFixed = parseFixed;\\nvar FixedFormat = /** @class */ (function () {\\n    function FixedFormat(constructorGuard, signed, width, decimals) {\\n        if (constructorGuard !== _constructorGuard) {\\n            logger.throwError(\\\"cannot use FixedFormat constructor; use FixedFormat.from\\\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {\\n                operation: \\\"new FixedFormat\\\"\\n            });\\n        }\\n        this.signed = signed;\\n        this.width = width;\\n        this.decimals = decimals;\\n        this.name = (signed ? \\\"\\\" : \\\"u\\\") + \\\"fixed\\\" + String(width) + \\\"x\\\" + String(decimals);\\n        this._multiplier = getMultiplier(decimals);\\n        Object.freeze(this);\\n    }\\n    FixedFormat.from = function (value) {\\n        if (value instanceof FixedFormat) {\\n            return value;\\n        }\\n        if (typeof (value) === \\\"number\\\") {\\n            value = \\\"fixed128x\\\" + value;\\n        }\\n        var signed = true;\\n        var width = 128;\\n        var decimals = 18;\\n        if (typeof (value) === \\\"string\\\") {\\n            if (value === \\\"fixed\\\") {\\n                // defaults...\\n            }\\n            else if (value === \\\"ufixed\\\") {\\n                signed = false;\\n            }\\n            else {\\n                var match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);\\n                if (!match) {\\n                    logger.throwArgumentError(\\\"invalid fixed format\\\", \\\"format\\\", value);\\n                }\\n                signed = (match[1] !== \\\"u\\\");\\n                width = parseInt(match[2]);\\n                decimals = parseInt(match[3]);\\n            }\\n        }\\n        else if (value) {\\n            var check = function (key, type, defaultValue) {\\n                if (value[key] == null) {\\n                    return defaultValue;\\n                }\\n                if (typeof (value[key]) !== type) {\\n                    logger.throwArgumentError(\\\"invalid fixed format (\\\" + key + \\\" not \\\" + type + \\\")\\\", \\\"format.\\\" + key, value[key]);\\n                }\\n                return value[key];\\n            };\\n            signed = check(\\\"signed\\\", \\\"boolean\\\", signed);\\n            width = check(\\\"width\\\", \\\"number\\\", width);\\n            decimals = check(\\\"decimals\\\", \\\"number\\\", decimals);\\n        }\\n        if (width % 8) {\\n            logger.throwArgumentError(\\\"invalid fixed format width (not byte aligned)\\\", \\\"format.width\\\", width);\\n        }\\n        if (decimals > 80) {\\n            logger.throwArgumentError(\\\"invalid fixed format (decimals too large)\\\", \\\"format.decimals\\\", decimals);\\n        }\\n        return new FixedFormat(_constructorGuard, signed, width, decimals);\\n    };\\n    return FixedFormat;\\n}());\\nexports.FixedFormat = FixedFormat;\\nvar FixedNumber = /** @class */ (function () {\\n    function FixedNumber(constructorGuard, hex, value, format) {\\n        if (constructorGuard !== _constructorGuard) {\\n            logger.throwError(\\\"cannot use FixedNumber constructor; use FixedNumber.from\\\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {\\n                operation: \\\"new FixedFormat\\\"\\n            });\\n        }\\n        this.format = format;\\n        this._hex = hex;\\n        this._value = value;\\n        this._isFixedNumber = true;\\n        Object.freeze(this);\\n    }\\n    FixedNumber.prototype._checkFormat = function (other) {\\n        if (this.format.name !== other.format.name) {\\n            logger.throwArgumentError(\\\"incompatible format; use fixedNumber.toFormat\\\", \\\"other\\\", other);\\n        }\\n    };\\n    FixedNumber.prototype.addUnsafe = function (other) {\\n        this._checkFormat(other);\\n        var a = parseFixed(this._value, this.format.decimals);\\n        var b = parseFixed(other._value, other.format.decimals);\\n        return FixedNumber.fromValue(a.add(b), this.format.decimals, this.format);\\n    };\\n    FixedNumber.prototype.subUnsafe = function (other) {\\n        this._checkFormat(other);\\n        var a = parseFixed(this._value, this.format.decimals);\\n        var b = parseFixed(other._value, other.format.decimals);\\n        return FixedNumber.fromValue(a.sub(b), this.format.decimals, this.format);\\n    };\\n    FixedNumber.prototype.mulUnsafe = function (other) {\\n        this._checkFormat(other);\\n        var a = parseFixed(this._value, this.format.decimals);\\n        var b = parseFixed(other._value, other.format.decimals);\\n        return FixedNumber.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);\\n    };\\n    FixedNumber.prototype.divUnsafe = function (other) {\\n        this._checkFormat(other);\\n        var a = parseFixed(this._value, this.format.decimals);\\n        var b = parseFixed(other._value, other.format.decimals);\\n        return FixedNumber.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);\\n    };\\n    FixedNumber.prototype.floor = function () {\\n        var comps = this.toString().split(\\\".\\\");\\n        if (comps.length === 1) {\\n            comps.push(\\\"0\\\");\\n        }\\n        var result = FixedNumber.from(comps[0], this.format);\\n        var hasFraction = !comps[1].match(/^(0*)$/);\\n        if (this.isNegative() && hasFraction) {\\n            result = result.subUnsafe(ONE.toFormat(result.format));\\n        }\\n        return result;\\n    };\\n    FixedNumber.prototype.ceiling = function () {\\n        var comps = this.toString().split(\\\".\\\");\\n        if (comps.length === 1) {\\n            comps.push(\\\"0\\\");\\n        }\\n        var result = FixedNumber.from(comps[0], this.format);\\n        var hasFraction = !comps[1].match(/^(0*)$/);\\n        if (!this.isNegative() && hasFraction) {\\n            result = result.addUnsafe(ONE.toFormat(result.format));\\n        }\\n        return result;\\n    };\\n    // @TODO: Support other rounding algorithms\\n    FixedNumber.prototype.round = function (decimals) {\\n        if (decimals == null) {\\n            decimals = 0;\\n        }\\n        // If we are already in range, we're done\\n        var comps = this.toString().split(\\\".\\\");\\n        if (comps.length === 1) {\\n            comps.push(\\\"0\\\");\\n        }\\n        if (decimals < 0 || decimals > 80 || (decimals % 1)) {\\n            logger.throwArgumentError(\\\"invalid decimal count\\\", \\\"decimals\\\", decimals);\\n        }\\n        if (comps[1].length <= decimals) {\\n            return this;\\n        }\\n        var factor = FixedNumber.from(\\\"1\\\" + zeros.substring(0, decimals), this.format);\\n        var bump = BUMP.toFormat(this.format);\\n        return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);\\n    };\\n    FixedNumber.prototype.isZero = function () {\\n        return (this._value === \\\"0.0\\\" || this._value === \\\"0\\\");\\n    };\\n    FixedNumber.prototype.isNegative = function () {\\n        return (this._value[0] === \\\"-\\\");\\n    };\\n    FixedNumber.prototype.toString = function () { return this._value; };\\n    FixedNumber.prototype.toHexString = function (width) {\\n        if (width == null) {\\n            return this._hex;\\n        }\\n        if (width % 8) {\\n            logger.throwArgumentError(\\\"invalid byte width\\\", \\\"width\\\", width);\\n        }\\n        var hex = bignumber_1.BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();\\n        return (0, bytes_1.hexZeroPad)(hex, width / 8);\\n    };\\n    FixedNumber.prototype.toUnsafeFloat = function () { return parseFloat(this.toString()); };\\n    FixedNumber.prototype.toFormat = function (format) {\\n        return FixedNumber.fromString(this._value, format);\\n    };\\n    FixedNumber.fromValue = function (value, decimals, format) {\\n        // If decimals looks more like a format, and there is no format, shift the parameters\\n        if (format == null && decimals != null && !(0, bignumber_1.isBigNumberish)(decimals)) {\\n            format = decimals;\\n            decimals = null;\\n        }\\n        if (decimals == null) {\\n            decimals = 0;\\n        }\\n        if (format == null) {\\n            format = \\\"fixed\\\";\\n        }\\n        return FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));\\n    };\\n    FixedNumber.fromString = function (value, format) {\\n        if (format == null) {\\n            format = \\\"fixed\\\";\\n        }\\n        var fixedFormat = FixedFormat.from(format);\\n        var numeric = parseFixed(value, fixedFormat.decimals);\\n        if (!fixedFormat.signed && numeric.lt(Zero)) {\\n            throwFault(\\\"unsigned value cannot be negative\\\", \\\"overflow\\\", \\\"value\\\", value);\\n        }\\n        var hex = null;\\n        if (fixedFormat.signed) {\\n            hex = numeric.toTwos(fixedFormat.width).toHexString();\\n        }\\n        else {\\n            hex = numeric.toHexString();\\n            hex = (0, bytes_1.hexZeroPad)(hex, fixedFormat.width / 8);\\n        }\\n        var decimal = formatFixed(numeric, fixedFormat.decimals);\\n        return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);\\n    };\\n    FixedNumber.fromBytes = function (value, format) {\\n        if (format == null) {\\n            format = \\\"fixed\\\";\\n        }\\n        var fixedFormat = FixedFormat.from(format);\\n        if ((0, bytes_1.arrayify)(value).length > fixedFormat.width / 8) {\\n            throw new Error(\\\"overflow\\\");\\n        }\\n        var numeric = bignumber_1.BigNumber.from(value);\\n        if (fixedFormat.signed) {\\n            numeric = numeric.fromTwos(fixedFormat.width);\\n        }\\n        var hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();\\n        var decimal = formatFixed(numeric, fixedFormat.decimals);\\n        return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);\\n    };\\n    FixedNumber.from = function (value, format) {\\n        if (typeof (value) === \\\"string\\\") {\\n            return FixedNumber.fromString(value, format);\\n        }\\n        if ((0, bytes_1.isBytes)(value)) {\\n            return FixedNumber.fromBytes(value, format);\\n        }\\n        try {\\n            return FixedNumber.fromValue(value, 0, format);\\n        }\\n        catch (error) {\\n            // Allow NUMERIC_FAULT to bubble up\\n            if (error.code !== logger_1.Logger.errors.INVALID_ARGUMENT) {\\n                throw error;\\n            }\\n        }\\n        return logger.throwArgumentError(\\\"invalid FixedNumber value\\\", \\\"value\\\", value);\\n    };\\n    FixedNumber.isFixedNumber = function (value) {\\n        return !!(value && value._isFixedNumber);\\n    };\\n    return FixedNumber;\\n}());\\nexports.FixedNumber = FixedNumber;\\nvar ONE = FixedNumber.from(1);\\nvar BUMP = FixedNumber.from(\\\"0.5\\\");\\n//# sourceMappingURL=fixednumber.js.map\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"throwFault\",\"message\",\"fault\",\"operation\",\"value\",\"params\",\"undefined\",\"logger\",\"throwError\",\"logger_1\",\"Logger\",\"errors\",\"NUMERIC_FAULT\",\"getMultiplier\",\"decimals\",\"bignumber_1\",\"BigNumber\",\"from\",\"toNumber\",\"e\",\"zeros\",\"substring\",\"throwArgumentError\",\"formatFixed\",\"multiplier\",\"negative\",\"lt\",\"Zero\",\"mul\",\"NegativeOne\",\"fraction\",\"mod\",\"toString\",\"length\",\"match\",\"whole\",\"div\",\"parseFixed\",\"comps\",\"split\",\"wholeValue\",\"fractionValue\",\"wei\",\"add\",\"Object\",\"defineProperty\",\"FixedNumber\",\"FixedFormat\",\"bytes_1\",\"_version_1\",\"version\",\"_constructorGuard\",\"constructorGuard\",\"signed\",\"width\",\"UNSUPPORTED_OPERATION\",\"name\",\"String\",\"_multiplier\",\"freeze\",\"FixedFormat.from\",\"parseInt\",\"check\",\"key\",\"type\",\"defaultValue\",\"hex\",\"format\",\"_hex\",\"_value\",\"_isFixedNumber\",\"prototype\",\"_checkFormat\",\"FixedNumber.prototype._checkFormat\",\"other\",\"addUnsafe\",\"FixedNumber.prototype.addUnsafe\",\"a\",\"b\",\"fromValue\",\"subUnsafe\",\"FixedNumber.prototype.subUnsafe\",\"sub\",\"mulUnsafe\",\"FixedNumber.prototype.mulUnsafe\",\"divUnsafe\",\"FixedNumber.prototype.divUnsafe\",\"floor\",\"FixedNumber.prototype.floor\",\"push\",\"result\",\"hasFraction\",\"isNegative\",\"ONE\",\"toFormat\",\"ceiling\",\"FixedNumber.prototype.ceiling\",\"round\",\"FixedNumber.prototype.round\",\"factor\",\"bump\",\"BUMP\",\"isZero\",\"FixedNumber.prototype.isZero\",\"FixedNumber.prototype.isNegative\",\"FixedNumber.prototype.toString\",\"toHexString\",\"FixedNumber.prototype.toHexString\",\"fromTwos\",\"toTwos\",\"hexZeroPad\",\"toUnsafeFloat\",\"FixedNumber.prototype.toUnsafeFloat\",\"parseFloat\",\"FixedNumber.prototype.toFormat\",\"fromString\",\"FixedNumber.fromValue\",\"isBigNumberish\",\"FixedNumber.fromString\",\"fixedFormat\",\"numeric\",\"decimal\",\"fromBytes\",\"FixedNumber.fromBytes\",\"arrayify\",\"Error\",\"FixedNumber.from\",\"isBytes\",\"error\",\"code\",\"INVALID_ARGUMENT\",\"isFixedNumber\",\"FixedNumber.isFixedNumber\"]\n}\n"]