["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/viem/_cjs/utils/observe.js"],"~:js","shadow$provide.module$node_modules$viem$_cjs$utils$observe=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.observe=exports.cleanupCache=exports.listenersCache=void 0;exports.listenersCache=new Map;exports.cleanupCache=new Map;let callbackCount=0;exports.observe=function(observerId,callbacks,fn){const callbackId=++callbackCount,unsubscribe=()=>{const listeners=exports.listenersCache.get(observerId)||[];exports.listenersCache.set(observerId,listeners.filter(cb=>\ncb.id!==callbackId))},unwatch=()=>{const cleanup=exports.cleanupCache.get(observerId);1===(exports.listenersCache.get(observerId)||[]).length&&cleanup&&cleanup();unsubscribe()};var listeners$jscomp$0=exports.listenersCache.get(observerId)||[];exports.listenersCache.set(observerId,[...listeners$jscomp$0,{id:callbackId,fns:callbacks}]);if(listeners$jscomp$0&&0<listeners$jscomp$0.length)return unwatch;listeners$jscomp$0={};for(const key in callbacks)listeners$jscomp$0[key]=(...args)=>{const listeners=\nexports.listenersCache.get(observerId)||[];0!==listeners.length&&listeners.forEach(listener=>listener.fns[key]?.(...args))};callbacks=fn(listeners$jscomp$0);\"function\"===typeof callbacks&&exports.cleanupCache.set(observerId,callbacks);return unwatch}}","~:source","shadow$provide[\"module$node_modules$viem$_cjs$utils$observe\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.observe = exports.cleanupCache = exports.listenersCache = void 0;\nexports.listenersCache = new Map();\nexports.cleanupCache = new Map();\nlet callbackCount = 0;\nfunction observe(observerId, callbacks, fn) {\n    const callbackId = ++callbackCount;\n    const getListeners = () => exports.listenersCache.get(observerId) || [];\n    const unsubscribe = () => {\n        const listeners = getListeners();\n        exports.listenersCache.set(observerId, listeners.filter((cb) => cb.id !== callbackId));\n    };\n    const unwatch = () => {\n        const cleanup = exports.cleanupCache.get(observerId);\n        if (getListeners().length === 1 && cleanup)\n            cleanup();\n        unsubscribe();\n    };\n    const listeners = getListeners();\n    exports.listenersCache.set(observerId, [\n        ...listeners,\n        { id: callbackId, fns: callbacks },\n    ]);\n    if (listeners && listeners.length > 0)\n        return unwatch;\n    const emit = {};\n    for (const key in callbacks) {\n        emit[key] = ((...args) => {\n            const listeners = getListeners();\n            if (listeners.length === 0)\n                return;\n            listeners.forEach((listener) => listener.fns[key]?.(...args));\n        });\n    }\n    const cleanup = fn(emit);\n    if (typeof cleanup === 'function')\n        exports.cleanupCache.set(observerId, cleanup);\n    return unwatch;\n}\nexports.observe = observe;\n//# sourceMappingURL=observe.js.map\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["observe","__esModule","id","cleanupCache","fns","value","listenersCache"]],"~:compiled-at",1695111490266,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$viem$_cjs$utils$observe.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAA,2CAAA,CAAgE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAExGC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CACAH,QAAQI,CAAAA,OAAR,CAAkBJ,OAAQK,CAAAA,YAA1B,CAAyCL,OAAQM,CAAAA,cAAjD,CAAkE,IAAK,EACvEN,QAAQM,CAAAA,cAAR,CAAyB,IAAIC,GAC7BP,QAAQK,CAAAA,YAAR,CAAuB,IAAIE,GAC3B,KAAIC,cAAgB,CAmCpBR,QAAQI,CAAAA,OAAR,CAlCAA,QAAgB,CAACK,UAAD,CAAaC,SAAb,CAAwBC,EAAxB,CAA4B,CACxC,MAAMC,WAAa,EAAEJ,aAArB,CAEMK,YAAc,EAAAA,EAAM,CACtB,MAAMC,UAFiBd,OAAQM,CAAAA,cAAeS,CAAAA,GAAvB,CAA2BN,UAA3B,CAEjBK,EAF2D,EAGjEd,QAAQM,CAAAA,cAAeU,CAAAA,GAAvB,CAA2BP,UAA3B,CAAuCK,SAAUG,CAAAA,MAAV,CAAkBC,EAAD;AAAQA,EAAGC,CAAAA,EAAX,GAAkBP,UAAnC,CAAvC,CAFsB,CAF1B,CAMMQ,QAAU,EAAAA,EAAM,CAClB,MAAMC,QAAUrB,OAAQK,CAAAA,YAAaU,CAAAA,GAArB,CAAyBN,UAAzB,CACc,EAA9B,GAAmBa,CAPItB,OAAQM,CAAAA,cAAeS,CAAAA,GAAvB,CAA2BN,UAA3B,CAOJa,EAP8C,EAO9CA,EAAAA,MAAnB,EAAmCD,OAAnC,EACIA,OAAA,EACJR,YAAA,EAJkB,CAMtB,KAAMC,mBAXqBd,OAAQM,CAAAA,cAAeS,CAAAA,GAAvB,CAA2BN,UAA3B,CAWrBK,EAX+D,EAYrEd,QAAQM,CAAAA,cAAeU,CAAAA,GAAvB,CAA2BP,UAA3B,CAAuC,CACnC,GAAGK,kBADgC,CAEnC,CAAEK,GAAIP,UAAN,CAAkBW,IAAKb,SAAvB,CAFmC,CAAvC,CAIA,IAAII,kBAAJ,EAAoC,CAApC,CAAiBA,kBAAUQ,CAAAA,MAA3B,CACI,MAAOF,QACLI,mBAAAA,CAAO,EACb,KAAK,MAAMC,GAAX,GAAkBf,UAAlB,CACIc,kBAAA,CAAKC,GAAL,CAAA,CAAa,CAAC,GAAGC,IAAJ,CAAA,EAAa,CACtB,MAAMZ;AArBad,OAAQM,CAAAA,cAAeS,CAAAA,GAAvB,CAA2BN,UAA3B,CAqBbK,EArBuD,EAsBpC,EAAzB,GAAIA,SAAUQ,CAAAA,MAAd,EAEAR,SAAUa,CAAAA,OAAV,CAAmBC,QAAD,EAAcA,QAASL,CAAAA,GAAT,CAAaE,GAAb,CAAA,GAAoB,GAAGC,IAAvB,CAAhC,CAJsB,CAOxBL,UAAAA,CAAUV,EAAA,CAAGa,kBAAH,CACO,WAAvB,GAAI,MAAOH,UAAX,EACIrB,OAAQK,CAAAA,YAAaW,CAAAA,GAArB,CAAyBP,UAAzB,CAAqCY,SAArC,CACJ,OAAOD,QAhCiC,CAP4D;\",\n\"sources\":[\"node_modules/viem/_cjs/utils/observe.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$viem$_cjs$utils$observe\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nexports.observe = exports.cleanupCache = exports.listenersCache = void 0;\\nexports.listenersCache = new Map();\\nexports.cleanupCache = new Map();\\nlet callbackCount = 0;\\nfunction observe(observerId, callbacks, fn) {\\n    const callbackId = ++callbackCount;\\n    const getListeners = () => exports.listenersCache.get(observerId) || [];\\n    const unsubscribe = () => {\\n        const listeners = getListeners();\\n        exports.listenersCache.set(observerId, listeners.filter((cb) => cb.id !== callbackId));\\n    };\\n    const unwatch = () => {\\n        const cleanup = exports.cleanupCache.get(observerId);\\n        if (getListeners().length === 1 && cleanup)\\n            cleanup();\\n        unsubscribe();\\n    };\\n    const listeners = getListeners();\\n    exports.listenersCache.set(observerId, [\\n        ...listeners,\\n        { id: callbackId, fns: callbacks },\\n    ]);\\n    if (listeners && listeners.length > 0)\\n        return unwatch;\\n    const emit = {};\\n    for (const key in callbacks) {\\n        emit[key] = ((...args) => {\\n            const listeners = getListeners();\\n            if (listeners.length === 0)\\n                return;\\n            listeners.forEach((listener) => listener.fns[key]?.(...args));\\n        });\\n    }\\n    const cleanup = fn(emit);\\n    if (typeof cleanup === 'function')\\n        exports.cleanupCache.set(observerId, cleanup);\\n    return unwatch;\\n}\\nexports.observe = observe;\\n//# sourceMappingURL=observe.js.map\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"observe\",\"cleanupCache\",\"listenersCache\",\"Map\",\"callbackCount\",\"observerId\",\"callbacks\",\"fn\",\"callbackId\",\"unsubscribe\",\"listeners\",\"get\",\"set\",\"filter\",\"cb\",\"id\",\"unwatch\",\"cleanup\",\"length\",\"fns\",\"emit\",\"key\",\"args\",\"forEach\",\"listener\"]\n}\n"]