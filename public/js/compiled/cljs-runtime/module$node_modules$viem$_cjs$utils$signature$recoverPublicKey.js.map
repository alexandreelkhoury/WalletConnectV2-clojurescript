{
"version":3,
"file":"module$node_modules$viem$_cjs$utils$signature$recoverPublicKey.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,8DAAA,CAAmF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAE3HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CACAH,QAAQI,CAAAA,gBAAR,CAA2B,IAAK,EAChC,OAAMC,WAAaP,OAAA,CAAQ,gDAAR,CAAnB,CACMQ,aAAeR,OAAA,CAAQ,sDAAR,CADrB,CAEMS,WAAaT,OAAA,CAAQ,oDAAR,CAcnBE,QAAQI,CAAAA,gBAAR,CAbAA,cAA+B,CAAC,CAAEI,IAAF,CAAQC,SAAR,CAAD,CAAuB,CAC5CC,SAAAA,CAAe,GAAIL,UAAWM,CAAAA,KAAf,EAAsBF,SAAtB,CAAA;AAAmCA,SAAnC,CAA+C,GAAIF,UAAWK,CAAAA,KAAf,EAAsBH,SAAtB,CAC9DI,KAAAA,CAAU,GAAIR,UAAWM,CAAAA,KAAf,EAAsBH,IAAtB,CAAA,CAA8BA,IAA9B,CAAqC,GAAID,UAAWK,CAAAA,KAAf,EAAsBJ,IAAtB,CACrD,KAAIM,EAAI,GAAIR,YAAaS,CAAAA,WAAjB,EAA+B,KAAIL,SAAaM,CAAAA,KAAb,CAAmB,GAAnB,CAAJ,EAA/B,CACR,IAAU,CAAV,GAAIF,CAAJ,EAAqB,CAArB,GAAeA,CAAf,CACIA,CAAA,EAAK,EACT,OAAM,CAAEG,SAAF,CAAA,CAAgB,MAAMC,OAAQC,CAAAA,OAAR,EAAkBC,CAAAA,IAAlB,CAAuB,EAAA,EAAMtB,OAAA,CAAQ,6CAAR,CAA7B,CAK5B,OAAQ,KAJUmB,SAAUI,CAAAA,SAAUC,CAAAA,WAApB,CAAgCZ,SAAaa,CAAAA,SAAb,CAAuB,CAAvB,CAA0B,GAA1B,CAAhC,CACbC,CAAAA,cADa,CACEV,CADF,CACM,EADN,CAEbV,CAAAA,gBAFa,CAEIS,IAAQU,CAAAA,SAAR,CAAkB,CAAlB,CAFJ,CAGbX,CAAAA,KAHaa,CAGP,CAAA,CAHOA,CAIV,EAX0C,CAPqE;",
"sources":["node_modules/viem/_cjs/utils/signature/recoverPublicKey.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$viem$_cjs$utils$signature$recoverPublicKey\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.recoverPublicKey = void 0;\nconst isHex_js_1 = require(\"../data/isHex.js\");\nconst fromHex_js_1 = require(\"../encoding/fromHex.js\");\nconst toHex_js_1 = require(\"../encoding/toHex.js\");\nasync function recoverPublicKey({ hash, signature, }) {\n    const signatureHex = (0, isHex_js_1.isHex)(signature) ? signature : (0, toHex_js_1.toHex)(signature);\n    const hashHex = (0, isHex_js_1.isHex)(hash) ? hash : (0, toHex_js_1.toHex)(hash);\n    let v = (0, fromHex_js_1.hexToNumber)(`0x${signatureHex.slice(130)}`);\n    if (v === 0 || v === 1)\n        v += 27;\n    const { secp256k1 } = await Promise.resolve().then(() => require('@noble/curves/secp256k1'));\n    const publicKey = secp256k1.Signature.fromCompact(signatureHex.substring(2, 130))\n        .addRecoveryBit(v - 27)\n        .recoverPublicKey(hashHex.substring(2))\n        .toHex(false);\n    return `0x${publicKey}`;\n}\nexports.recoverPublicKey = recoverPublicKey;\n//# sourceMappingURL=recoverPublicKey.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","recoverPublicKey","isHex_js_1","fromHex_js_1","toHex_js_1","hash","signature","signatureHex","isHex","toHex","hashHex","v","hexToNumber","slice","secp256k1","Promise","resolve","then","Signature","fromCompact","substring","addRecoveryBit","publicKey"]
}
