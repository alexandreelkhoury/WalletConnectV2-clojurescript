["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/viem/_cjs/actions/ens/getEnsResolver.js"],"~:js","shadow$provide.module$node_modules$viem$_cjs$actions$ens$getEnsResolver=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.getEnsResolver=void 0;const chain_js_1=require(\"module$node_modules$viem$_cjs$utils$chain\"),toHex_js_1=require(\"module$node_modules$viem$_cjs$utils$encoding$toHex\"),packetToBytes_js_1=require(\"module$node_modules$viem$_cjs$utils$ens$packetToBytes\"),readContract_js_1=require(\"module$node_modules$viem$_cjs$actions$public$readContract\");\nexports.getEnsResolver=async function(client,{blockNumber,blockTag,name,universalResolverAddress:universalResolverAddress_}){if(!universalResolverAddress_){if(!client.chain)throw Error(\"client chain not configured. universalResolverAddress is required.\");universalResolverAddress_=(0,chain_js_1.getChainContractAddress)({blockNumber,chain:client.chain,contract:\"ensUniversalResolver\"})}[client]=await (0,readContract_js_1.readContract)(client,{address:universalResolverAddress_,abi:[{inputs:[{type:\"bytes\"}],\nname:\"findResolver\",outputs:[{type:\"address\"},{type:\"bytes32\"}],stateMutability:\"view\",type:\"function\"}],functionName:\"findResolver\",args:[(0,toHex_js_1.toHex)((0,packetToBytes_js_1.packetToBytes)(name))],blockNumber,blockTag});return client}}","~:source","shadow$provide[\"module$node_modules$viem$_cjs$actions$ens$getEnsResolver\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getEnsResolver = void 0;\nconst chain_js_1 = require(\"../../utils/chain.js\");\nconst toHex_js_1 = require(\"../../utils/encoding/toHex.js\");\nconst packetToBytes_js_1 = require(\"../../utils/ens/packetToBytes.js\");\nconst readContract_js_1 = require(\"../public/readContract.js\");\nasync function getEnsResolver(client, { blockNumber, blockTag, name, universalResolverAddress: universalResolverAddress_, }) {\n    let universalResolverAddress = universalResolverAddress_;\n    if (!universalResolverAddress) {\n        if (!client.chain)\n            throw new Error('client chain not configured. universalResolverAddress is required.');\n        universalResolverAddress = (0, chain_js_1.getChainContractAddress)({\n            blockNumber,\n            chain: client.chain,\n            contract: 'ensUniversalResolver',\n        });\n    }\n    const [resolverAddress] = await (0, readContract_js_1.readContract)(client, {\n        address: universalResolverAddress,\n        abi: [\n            {\n                inputs: [{ type: 'bytes' }],\n                name: 'findResolver',\n                outputs: [{ type: 'address' }, { type: 'bytes32' }],\n                stateMutability: 'view',\n                type: 'function',\n            },\n        ],\n        functionName: 'findResolver',\n        args: [(0, toHex_js_1.toHex)((0, packetToBytes_js_1.packetToBytes)(name))],\n        blockNumber,\n        blockTag,\n    });\n    return resolverAddress;\n}\nexports.getEnsResolver = getEnsResolver;\n//# sourceMappingURL=getEnsResolver.js.map\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$viem$_cjs$utils$chain","~$module$node_modules$viem$_cjs$utils$encoding$toHex","~$module$node_modules$viem$_cjs$actions$public$readContract","~$module$node_modules$viem$_cjs$utils$ens$packetToBytes"]],"~:properties",["^5",["abi","args","__esModule","blockNumber","getEnsResolver","name","stateMutability","value","outputs","address","type","contract","inputs","blockTag","functionName","chain"]],"~:compiled-at",1695111490295,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$viem$_cjs$actions$ens$getEnsResolver.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAA,wDAAA,CAA6E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAErHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CACAH,QAAQI,CAAAA,cAAR,CAAyB,IAAK,EAC9B,OAAMC,WAAaP,OAAA,CAAQ,2CAAR,CAAnB,CACMQ,WAAaR,OAAA,CAAQ,oDAAR,CADnB,CAEMS,mBAAqBT,OAAA,CAAQ,uDAAR,CAF3B,CAGMU,kBAAoBV,OAAA,CAAQ,2DAAR,CA8B1BE;OAAQI,CAAAA,cAAR,CA7BAA,cAA6B,CAACK,MAAD,CAAS,CAAEC,WAAF,CAAeC,QAAf,CAAyBC,IAAzB,CAA+B,yBAA0BC,yBAAzD,CAAT,CAAgG,CAEzH,GAAI,CAACC,yBAAL,CAA+B,CAC3B,GAAI,CAACL,MAAOM,CAAAA,KAAZ,CACI,KAAUC,MAAJ,CAAU,oEAAV,CAAN,CACJF,yBAAA,CAA2B,GAAIT,UAAWY,CAAAA,uBAAf,EAAwC,CAC/DP,WAD+D,CAE/DK,MAAON,MAAOM,CAAAA,KAFiD,CAG/DG,SAAU,sBAHqD,CAAxC,CAHA,CASzB,CAACC,MAAD,CAAN,CAA0B,MAAM,GAAIX,iBAAkBY,CAAAA,YAAtB,EAAoCX,MAApC,CAA4C,CACxEY,QAASP,yBAD+D,CAExEQ,IAAK,CACD,CACIC,OAAQ,CAAC,CAAEC,KAAM,OAAR,CAAD,CADZ;AAEIZ,KAAM,cAFV,CAGIa,QAAS,CAAC,CAAED,KAAM,SAAR,CAAD,CAAsB,CAAEA,KAAM,SAAR,CAAtB,CAHb,CAIIE,gBAAiB,MAJrB,CAKIF,KAAM,UALV,CADC,CAFmE,CAWxEG,aAAc,cAX0D,CAYxEC,KAAM,CAAC,GAAItB,UAAWuB,CAAAA,KAAf,EAAsB,GAAItB,kBAAmBuB,CAAAA,aAAvB,EAAsClB,IAAtC,CAAtB,CAAD,CAZkE,CAaxEF,WAbwE,CAcxEC,QAdwE,CAA5C,CAgBhC,OAAOQ,OA3BkH,CARR;\",\n\"sources\":[\"node_modules/viem/_cjs/actions/ens/getEnsResolver.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$viem$_cjs$actions$ens$getEnsResolver\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nexports.getEnsResolver = void 0;\\nconst chain_js_1 = require(\\\"../../utils/chain.js\\\");\\nconst toHex_js_1 = require(\\\"../../utils/encoding/toHex.js\\\");\\nconst packetToBytes_js_1 = require(\\\"../../utils/ens/packetToBytes.js\\\");\\nconst readContract_js_1 = require(\\\"../public/readContract.js\\\");\\nasync function getEnsResolver(client, { blockNumber, blockTag, name, universalResolverAddress: universalResolverAddress_, }) {\\n    let universalResolverAddress = universalResolverAddress_;\\n    if (!universalResolverAddress) {\\n        if (!client.chain)\\n            throw new Error('client chain not configured. universalResolverAddress is required.');\\n        universalResolverAddress = (0, chain_js_1.getChainContractAddress)({\\n            blockNumber,\\n            chain: client.chain,\\n            contract: 'ensUniversalResolver',\\n        });\\n    }\\n    const [resolverAddress] = await (0, readContract_js_1.readContract)(client, {\\n        address: universalResolverAddress,\\n        abi: [\\n            {\\n                inputs: [{ type: 'bytes' }],\\n                name: 'findResolver',\\n                outputs: [{ type: 'address' }, { type: 'bytes32' }],\\n                stateMutability: 'view',\\n                type: 'function',\\n            },\\n        ],\\n        functionName: 'findResolver',\\n        args: [(0, toHex_js_1.toHex)((0, packetToBytes_js_1.packetToBytes)(name))],\\n        blockNumber,\\n        blockTag,\\n    });\\n    return resolverAddress;\\n}\\nexports.getEnsResolver = getEnsResolver;\\n//# sourceMappingURL=getEnsResolver.js.map\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"getEnsResolver\",\"chain_js_1\",\"toHex_js_1\",\"packetToBytes_js_1\",\"readContract_js_1\",\"client\",\"blockNumber\",\"blockTag\",\"name\",\"universalResolverAddress_\",\"universalResolverAddress\",\"chain\",\"Error\",\"getChainContractAddress\",\"contract\",\"resolverAddress\",\"readContract\",\"address\",\"abi\",\"inputs\",\"type\",\"outputs\",\"stateMutability\",\"functionName\",\"args\",\"toHex\",\"packetToBytes\"]\n}\n"]