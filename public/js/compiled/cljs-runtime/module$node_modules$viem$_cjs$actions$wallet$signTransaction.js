shadow$provide.module$node_modules$viem$_cjs$actions$wallet$signTransaction=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.signTransaction=void 0;const parseAccount_js_1=require("module$node_modules$viem$_cjs$accounts$utils$parseAccount"),account_js_1=require("module$node_modules$viem$_cjs$errors$account"),chain_js_1=require("module$node_modules$viem$_cjs$utils$chain"),transactionRequest_js_1=require("module$node_modules$viem$_cjs$utils$formatters$transactionRequest"),
index_js_1=require("module$node_modules$viem$_cjs$utils$index"),assertRequest_js_1=require("module$node_modules$viem$_cjs$utils$transaction$assertRequest"),getChainId_js_1=require("module$node_modules$viem$_cjs$actions$public$getChainId");exports.signTransaction=async function(client,args){const {account:account_=client.account,chain=client.chain,...transaction}=args;if(!account_)throw new account_js_1.AccountNotFoundError({docsPath:"/docs/actions/wallet/signTransaction"});const account=(0,parseAccount_js_1.parseAccount)(account_);
(0,assertRequest_js_1.assertRequest)({account,...args});args=await (0,getChainId_js_1.getChainId)(client);null!==chain&&(0,chain_js_1.assertCurrentChain)({currentChainId:args,chain});const format=(chain?.formatters||client.chain?.formatters)?.transactionRequest?.format||transactionRequest_js_1.formatTransactionRequest;return"local"===account.type?account.signTransaction({chainId:args,...transaction},{serializer:client.chain?.serializers?.transaction}):await client.request({method:"eth_signTransaction",
params:[{...format(transaction),chainId:(0,index_js_1.numberToHex)(args),from:account.address}]})}}
//# sourceMappingURL=module$node_modules$viem$_cjs$actions$wallet$signTransaction.js.map
