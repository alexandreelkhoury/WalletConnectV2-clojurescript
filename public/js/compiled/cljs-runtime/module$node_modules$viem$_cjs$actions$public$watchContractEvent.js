shadow$provide.module$node_modules$viem$_cjs$actions$public$watchContractEvent=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.watchContractEvent=void 0;const getAbiItem_js_1=require("module$node_modules$viem$_cjs$utils$abi$getAbiItem"),observe_js_1=require("module$node_modules$viem$_cjs$utils$observe"),poll_js_1=require("module$node_modules$viem$_cjs$utils$poll"),stringify_js_1=require("module$node_modules$viem$_cjs$utils$stringify"),abi_js_1=
require("module$node_modules$viem$_cjs$errors$abi"),rpc_js_1=require("module$node_modules$viem$_cjs$errors$rpc"),decodeEventLog_js_1=require("module$node_modules$viem$_cjs$utils$abi$decodeEventLog"),encodeEventTopics_js_1=require("module$node_modules$viem$_cjs$utils$abi$encodeEventTopics"),log_js_1=require("module$node_modules$viem$_cjs$utils$formatters$log"),createContractEventFilter_js_1=require("module$node_modules$viem$_cjs$actions$public$createContractEventFilter"),getBlockNumber_js_1=require("module$node_modules$viem$_cjs$actions$public$getBlockNumber"),
getFilterChanges_js_1=require("module$node_modules$viem$_cjs$actions$public$getFilterChanges"),getLogs_js_1=require("module$node_modules$viem$_cjs$actions$public$getLogs"),uninstallFilter_js_1=require("module$node_modules$viem$_cjs$actions$public$uninstallFilter");exports.watchContractEvent=function(client,{abi,address,args:args$jscomp$0,batch=!0,eventName:eventName$jscomp$0,onError,onLogs,poll:poll_,pollingInterval=client.pollingInterval,strict:strict_}){const pollContractEvent=()=>{const observerId=
(0,stringify_js_1.stringify)(["watchContractEvent",address,args$jscomp$0,batch,client.uid,eventName$jscomp$0,pollingInterval]),strict=strict_??!1;return(0,observe_js_1.observe)(observerId,{onLogs,onError},emit=>{let previousBlockNumber,filter,initialized=!1;const unwatch=(0,poll_js_1.poll)(async()=>{if(initialized)try{let logs;if(filter)logs=await (0,getFilterChanges_js_1.getFilterChanges)(client,{filter});else{const blockNumber=await (0,getBlockNumber_js_1.getBlockNumber)(client);logs=previousBlockNumber&&
previousBlockNumber!==blockNumber?await (0,getLogs_js_1.getLogs)(client,{address,args:args$jscomp$0,fromBlock:previousBlockNumber+1n,toBlock:blockNumber,event:(0,getAbiItem_js_1.getAbiItem)({abi,name:eventName$jscomp$0})}):[];previousBlockNumber=blockNumber}if(0!==logs.length)if(batch)emit.onLogs(logs);else logs.forEach(log=>emit.onLogs([log]))}catch(err){filter&&err instanceof rpc_js_1.InvalidInputRpcError&&(initialized=!1),emit.onError?.(err)}else{try{filter=await (0,createContractEventFilter_js_1.createContractEventFilter)(client,
{abi,address,args:args$jscomp$0,eventName:eventName$jscomp$0,strict})}catch{}initialized=!0}},{emitOnBegin:!0,interval:pollingInterval});return async()=>{filter&&await (0,uninstallFilter_js_1.uninstallFilter)(client,{filter});unwatch()}})},subscribeContractEvent=()=>{let active=!0,unsubscribe=()=>active=!1;(async()=>{try{const topics=eventName$jscomp$0?(0,encodeEventTopics_js_1.encodeEventTopics)({abi,eventName:eventName$jscomp$0,args:args$jscomp$0}):[],{unsubscribe:unsubscribe_}=await client.transport.subscribe({params:["logs",
{address,topics}],onData(data){if(active){data=data.result;try{const {eventName,args}=(0,decodeEventLog_js_1.decodeEventLog)({abi,data:data.data,topics:data.topics,strict:strict_});var formatted=(0,log_js_1.formatLog)(data,{args,eventName});onLogs([formatted])}catch(err){let eventName,isUnnamed;if(err instanceof abi_js_1.DecodeLogDataMismatch||err instanceof abi_js_1.DecodeLogTopicsMismatch){if(strict_)return;eventName=err.abiItem.name;isUnnamed=err.abiItem.inputs?.some(x=>!("name"in x&&x.name))}formatted=
(0,log_js_1.formatLog)(data,{args:isUnnamed?[]:{},eventName});onLogs([formatted])}}},onError(error){onError?.(error)}});unsubscribe=unsubscribe_;active||unsubscribe()}catch(err){onError?.(err)}})();return unsubscribe};return("undefined"!==typeof poll_?poll_:"webSocket"!==client.transport.type)?pollContractEvent():subscribeContractEvent()}}
//# sourceMappingURL=module$node_modules$viem$_cjs$actions$public$watchContractEvent.js.map
