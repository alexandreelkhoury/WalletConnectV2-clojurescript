["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/hmac-drbg/lib/hmac-drbg.js"],"~:js","shadow$provide[95]=function(S,A,V,q){function F(e){if(!(this instanceof F))return new F(e);this.hash=e.hash;this.predResist=!!e.predResist;this.outLen=this.hash.outSize;this.minEntropy=e.minEntropy||this.hash.hmacStrength;this.V=this.K=this.reseedInterval=this._reseed=null;var u=r.toArray(e.entropy,e.entropyEnc||\"hex\"),p=r.toArray(e.nonce,e.nonceEnc||\"hex\");e=r.toArray(e.pers,e.persEnc||\"hex\");y(u.length>=this.minEntropy/8,\"Not enough entropy. Minimum is: \"+this.minEntropy+\" bits\");this._init(u,p,\ne)}var G=A(92),r=A(72),y=A(71);V.exports=F;F.prototype._init=function(e,u,p){e=e.concat(u).concat(p);this.K=Array(this.outLen/8);this.V=Array(this.outLen/8);for(u=0;u<this.V.length;u++)this.K[u]=0,this.V[u]=1;this._update(e);this._reseed=1;this.reseedInterval=281474976710656};F.prototype._hmac=function(){return new G.hmac(this.hash,this.K)};F.prototype._update=function(e){var u=this._hmac().update(this.V).update([0]);e&&(u=u.update(e));this.K=u.digest();this.V=this._hmac().update(this.V).digest();\ne&&(this.K=this._hmac().update(this.V).update([1]).update(e).digest(),this.V=this._hmac().update(this.V).digest())};F.prototype.reseed=function(e,u,p,n){\"string\"!==typeof u&&(n=p,p=u,u=null);e=r.toArray(e,u);p=r.toArray(p,n);y(e.length>=this.minEntropy/8,\"Not enough entropy. Minimum is: \"+this.minEntropy+\" bits\");this._update(e.concat(p||[]));this._reseed=1};F.prototype.generate=function(e,u,p,n){if(this._reseed>this.reseedInterval)throw Error(\"Reseed is required\");\"string\"!==typeof u&&(n=p,p=u,u=\nnull);p&&(p=r.toArray(p,n||\"hex\"),this._update(p));for(n=[];n.length<e;)this.V=this._hmac().update(this.V).digest(),n=n.concat(this.V);e=n.slice(0,e);this._update(p);this._reseed++;return r.encode(e,u)}}","~:source","shadow$provide[95] = function(global,require,module,exports) {\n'use strict';\n\nvar hash = require('hash.js');\nvar utils = require('minimalistic-crypto-utils');\nvar assert = require('minimalistic-assert');\n\nfunction HmacDRBG(options) {\n  if (!(this instanceof HmacDRBG))\n    return new HmacDRBG(options);\n  this.hash = options.hash;\n  this.predResist = !!options.predResist;\n\n  this.outLen = this.hash.outSize;\n  this.minEntropy = options.minEntropy || this.hash.hmacStrength;\n\n  this._reseed = null;\n  this.reseedInterval = null;\n  this.K = null;\n  this.V = null;\n\n  var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');\n  var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');\n  var pers = utils.toArray(options.pers, options.persEnc || 'hex');\n  assert(entropy.length >= (this.minEntropy / 8),\n         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');\n  this._init(entropy, nonce, pers);\n}\nmodule.exports = HmacDRBG;\n\nHmacDRBG.prototype._init = function init(entropy, nonce, pers) {\n  var seed = entropy.concat(nonce).concat(pers);\n\n  this.K = new Array(this.outLen / 8);\n  this.V = new Array(this.outLen / 8);\n  for (var i = 0; i < this.V.length; i++) {\n    this.K[i] = 0x00;\n    this.V[i] = 0x01;\n  }\n\n  this._update(seed);\n  this._reseed = 1;\n  this.reseedInterval = 0x1000000000000;  // 2^48\n};\n\nHmacDRBG.prototype._hmac = function hmac() {\n  return new hash.hmac(this.hash, this.K);\n};\n\nHmacDRBG.prototype._update = function update(seed) {\n  var kmac = this._hmac()\n                 .update(this.V)\n                 .update([ 0x00 ]);\n  if (seed)\n    kmac = kmac.update(seed);\n  this.K = kmac.digest();\n  this.V = this._hmac().update(this.V).digest();\n  if (!seed)\n    return;\n\n  this.K = this._hmac()\n               .update(this.V)\n               .update([ 0x01 ])\n               .update(seed)\n               .digest();\n  this.V = this._hmac().update(this.V).digest();\n};\n\nHmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {\n  // Optional entropy enc\n  if (typeof entropyEnc !== 'string') {\n    addEnc = add;\n    add = entropyEnc;\n    entropyEnc = null;\n  }\n\n  entropy = utils.toArray(entropy, entropyEnc);\n  add = utils.toArray(add, addEnc);\n\n  assert(entropy.length >= (this.minEntropy / 8),\n         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');\n\n  this._update(entropy.concat(add || []));\n  this._reseed = 1;\n};\n\nHmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {\n  if (this._reseed > this.reseedInterval)\n    throw new Error('Reseed is required');\n\n  // Optional encoding\n  if (typeof enc !== 'string') {\n    addEnc = add;\n    add = enc;\n    enc = null;\n  }\n\n  // Optional additional data\n  if (add) {\n    add = utils.toArray(add, addEnc || 'hex');\n    this._update(add);\n  }\n\n  var temp = [];\n  while (temp.length < len) {\n    this.V = this._hmac().update(this.V).digest();\n    temp = temp.concat(this.V);\n  }\n\n  var res = temp.slice(0, len);\n  this._update(add);\n  this._reseed++;\n  return utils.encode(res, enc);\n};\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$minimalistic_assert$index","~$module$node_modules$hash_DOT_js$lib$hash","~$module$node_modules$minimalistic_crypto_utils$lib$utils"]],"~:properties",["^5",["K","_reseed","reseed","hash","generate","_hmac","predResist","_init","outLen","V","minEntropy","reseedInterval","_update"]],"~:compiled-at",1695041440753,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$hmac_drbg$lib$hmac_drbg.js\",\n\"lineCount\":4,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/hmac-drbg/lib/hmac-drbg.js\"],\n\"sourcesContent\":[\"shadow$provide[95] = function(global,require,module,exports) {\\n'use strict';\\n\\nvar hash = require('hash.js');\\nvar utils = require('minimalistic-crypto-utils');\\nvar assert = require('minimalistic-assert');\\n\\nfunction HmacDRBG(options) {\\n  if (!(this instanceof HmacDRBG))\\n    return new HmacDRBG(options);\\n  this.hash = options.hash;\\n  this.predResist = !!options.predResist;\\n\\n  this.outLen = this.hash.outSize;\\n  this.minEntropy = options.minEntropy || this.hash.hmacStrength;\\n\\n  this._reseed = null;\\n  this.reseedInterval = null;\\n  this.K = null;\\n  this.V = null;\\n\\n  var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');\\n  var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');\\n  var pers = utils.toArray(options.pers, options.persEnc || 'hex');\\n  assert(entropy.length >= (this.minEntropy / 8),\\n         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');\\n  this._init(entropy, nonce, pers);\\n}\\nmodule.exports = HmacDRBG;\\n\\nHmacDRBG.prototype._init = function init(entropy, nonce, pers) {\\n  var seed = entropy.concat(nonce).concat(pers);\\n\\n  this.K = new Array(this.outLen / 8);\\n  this.V = new Array(this.outLen / 8);\\n  for (var i = 0; i < this.V.length; i++) {\\n    this.K[i] = 0x00;\\n    this.V[i] = 0x01;\\n  }\\n\\n  this._update(seed);\\n  this._reseed = 1;\\n  this.reseedInterval = 0x1000000000000;  // 2^48\\n};\\n\\nHmacDRBG.prototype._hmac = function hmac() {\\n  return new hash.hmac(this.hash, this.K);\\n};\\n\\nHmacDRBG.prototype._update = function update(seed) {\\n  var kmac = this._hmac()\\n                 .update(this.V)\\n                 .update([ 0x00 ]);\\n  if (seed)\\n    kmac = kmac.update(seed);\\n  this.K = kmac.digest();\\n  this.V = this._hmac().update(this.V).digest();\\n  if (!seed)\\n    return;\\n\\n  this.K = this._hmac()\\n               .update(this.V)\\n               .update([ 0x01 ])\\n               .update(seed)\\n               .digest();\\n  this.V = this._hmac().update(this.V).digest();\\n};\\n\\nHmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {\\n  // Optional entropy enc\\n  if (typeof entropyEnc !== 'string') {\\n    addEnc = add;\\n    add = entropyEnc;\\n    entropyEnc = null;\\n  }\\n\\n  entropy = utils.toArray(entropy, entropyEnc);\\n  add = utils.toArray(add, addEnc);\\n\\n  assert(entropy.length >= (this.minEntropy / 8),\\n         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');\\n\\n  this._update(entropy.concat(add || []));\\n  this._reseed = 1;\\n};\\n\\nHmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {\\n  if (this._reseed > this.reseedInterval)\\n    throw new Error('Reseed is required');\\n\\n  // Optional encoding\\n  if (typeof enc !== 'string') {\\n    addEnc = add;\\n    add = enc;\\n    enc = null;\\n  }\\n\\n  // Optional additional data\\n  if (add) {\\n    add = utils.toArray(add, addEnc || 'hex');\\n    this._update(add);\\n  }\\n\\n  var temp = [];\\n  while (temp.length < len) {\\n    this.V = this._hmac().update(this.V).digest();\\n    temp = temp.concat(this.V);\\n  }\\n\\n  var res = temp.slice(0, len);\\n  this._update(add);\\n  this._reseed++;\\n  return utils.encode(res, enc);\\n};\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"HmacDRBG\",\"options\",\"hash\",\"predResist\",\"outLen\",\"outSize\",\"minEntropy\",\"hmacStrength\",\"V\",\"K\",\"reseedInterval\",\"_reseed\",\"entropy\",\"utils\",\"toArray\",\"entropyEnc\",\"nonce\",\"nonceEnc\",\"pers\",\"persEnc\",\"assert\",\"length\",\"_init\",\"prototype\",\"HmacDRBG.prototype._init\",\"seed\",\"concat\",\"Array\",\"i\",\"_update\",\"_hmac\",\"HmacDRBG.prototype._hmac\",\"hmac\",\"HmacDRBG.prototype._update\",\"kmac\",\"update\",\"digest\",\"reseed\",\"HmacDRBG.prototype.reseed\",\"add\",\"addEnc\",\"generate\",\"HmacDRBG.prototype.generate\",\"len\",\"enc\",\"Error\",\"temp\",\"res\",\"slice\",\"encode\"]\n}\n"]