{
"version":3,
"file":"module$node_modules$$tanstack$react_query$build$lib$useQueries.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/@tanstack/react-query/build/lib/useQueries.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$tanstack$react_query$build$lib$useQueries\"] = function(global,require,module,exports) {\n'use client';\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar React = require('react');\nvar queryCore = require('@tanstack/query-core');\nvar useSyncExternalStore = require('./useSyncExternalStore');\nvar QueryClientProvider = require('./QueryClientProvider.js');\nvar isRestoring = require('./isRestoring.js');\nvar QueryErrorResetBoundary = require('./QueryErrorResetBoundary.js');\nvar errorBoundaryUtils = require('./errorBoundaryUtils.js');\nvar suspense = require('./suspense.js');\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () { return e[k]; }\n        });\n      }\n    });\n  }\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\n\nvar React__namespace = /*#__PURE__*/_interopNamespace(React);\n\nfunction useQueries({\n  queries,\n  context\n}) {\n  const queryClient = QueryClientProvider.useQueryClient({\n    context\n  });\n  const isRestoring$1 = isRestoring.useIsRestoring();\n  const errorResetBoundary = QueryErrorResetBoundary.useQueryErrorResetBoundary();\n  const defaultedQueries = React__namespace.useMemo(() => queries.map(options => {\n    const defaultedOptions = queryClient.defaultQueryOptions(options); // Make sure the results are already in fetching state before subscribing or updating options\n\n    defaultedOptions._optimisticResults = isRestoring$1 ? 'isRestoring' : 'optimistic';\n    return defaultedOptions;\n  }), [queries, queryClient, isRestoring$1]);\n  defaultedQueries.forEach(query => {\n    suspense.ensureStaleTime(query);\n    errorBoundaryUtils.ensurePreventErrorBoundaryRetry(query, errorResetBoundary);\n  });\n  errorBoundaryUtils.useClearResetErrorBoundary(errorResetBoundary);\n  const [observer] = React__namespace.useState(() => new queryCore.QueriesObserver(queryClient, defaultedQueries));\n  const optimisticResult = observer.getOptimisticResult(defaultedQueries);\n  useSyncExternalStore.useSyncExternalStore(React__namespace.useCallback(onStoreChange => isRestoring$1 ? () => undefined : observer.subscribe(queryCore.notifyManager.batchCalls(onStoreChange)), [observer, isRestoring$1]), () => observer.getCurrentResult(), () => observer.getCurrentResult());\n  React__namespace.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setQueries(defaultedQueries, {\n      listeners: false\n    });\n  }, [defaultedQueries, observer]);\n  const shouldAtLeastOneSuspend = optimisticResult.some((result, index) => suspense.shouldSuspend(defaultedQueries[index], result, isRestoring$1));\n  const suspensePromises = shouldAtLeastOneSuspend ? optimisticResult.flatMap((result, index) => {\n    const options = defaultedQueries[index];\n    const queryObserver = observer.getObservers()[index];\n\n    if (options && queryObserver) {\n      if (suspense.shouldSuspend(options, result, isRestoring$1)) {\n        return suspense.fetchOptimistic(options, queryObserver, errorResetBoundary);\n      } else if (suspense.willFetch(result, isRestoring$1)) {\n        void suspense.fetchOptimistic(options, queryObserver, errorResetBoundary);\n      }\n    }\n\n    return [];\n  }) : [];\n\n  if (suspensePromises.length > 0) {\n    throw Promise.all(suspensePromises);\n  }\n\n  const observerQueries = observer.getQueries();\n  const firstSingleResultWhichShouldThrow = optimisticResult.find((result, index) => {\n    var _defaultedQueries$ind, _defaultedQueries$ind2;\n\n    return errorBoundaryUtils.getHasError({\n      result,\n      errorResetBoundary,\n      useErrorBoundary: (_defaultedQueries$ind = (_defaultedQueries$ind2 = defaultedQueries[index]) == null ? void 0 : _defaultedQueries$ind2.useErrorBoundary) != null ? _defaultedQueries$ind : false,\n      query: observerQueries[index]\n    });\n  });\n\n  if (firstSingleResultWhichShouldThrow != null && firstSingleResultWhichShouldThrow.error) {\n    throw firstSingleResultWhichShouldThrow.error;\n  }\n\n  return optimisticResult;\n}\n\nexports.useQueries = useQueries;\n//# sourceMappingURL=useQueries.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","React","queryCore","useSyncExternalStore","QueryClientProvider","isRestoring","QueryErrorResetBoundary","errorBoundaryUtils","suspense","React__namespace","_interopNamespace","e","__esModule","n","create","keys","forEach","k","d","getOwnPropertyDescriptor","get","enumerable","freeze","useQueries","queries","context","queryClient","useQueryClient","isRestoring$1","useIsRestoring","errorResetBoundary","useQueryErrorResetBoundary","defaultedQueries","useMemo","map","options","defaultedOptions","defaultQueryOptions","_optimisticResults","query","ensureStaleTime","ensurePreventErrorBoundaryRetry","useClearResetErrorBoundary","observer","useState","QueriesObserver","optimisticResult","getOptimisticResult","useCallback","onStoreChange","undefined","subscribe","notifyManager","batchCalls","getCurrentResult","useEffect","setQueries","listeners","suspensePromises","some","shouldAtLeastOneSuspend","result","index","shouldSuspend","flatMap","queryObserver","getObservers","fetchOptimistic","willFetch","length","Promise","all","observerQueries","getQueries","firstSingleResultWhichShouldThrow","find","_defaultedQueries$ind","_defaultedQueries$ind2","getHasError","useErrorBoundary","error"]
}
