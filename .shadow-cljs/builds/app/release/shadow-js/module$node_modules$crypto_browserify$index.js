["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/crypto-browserify/index.js"],"~:js","shadow$provide[261]=function(S,A,V,q){q.randomBytes=q.rng=q.pseudoRandomBytes=q.prng=A(112);q.createHash=q.Hash=A(163);q.createHmac=q.Hmac=A(166);S=A(168);S=Object.keys(S);var F=\"sha1 sha224 sha256 sha384 sha512 md5 rmd160\".split(\" \").concat(S);q.getHashes=function(){return F};S=A(174);q.pbkdf2=S.pbkdf2;q.pbkdf2Sync=S.pbkdf2Sync;S=A(202);q.Cipher=S.Cipher;q.createCipher=S.createCipher;q.Cipheriv=S.Cipheriv;q.createCipheriv=S.createCipheriv;q.Decipher=S.Decipher;q.createDecipher=S.createDecipher;q.Decipheriv=\nS.Decipheriv;q.createDecipheriv=S.createDecipheriv;q.getCiphers=S.getCiphers;q.listCiphers=S.listCiphers;S=A(209);q.DiffieHellmanGroup=S.DiffieHellmanGroup;q.createDiffieHellmanGroup=S.createDiffieHellmanGroup;q.getDiffieHellman=S.getDiffieHellman;q.createDiffieHellman=S.createDiffieHellman;q.DiffieHellman=S.DiffieHellman;S=A(250);q.createSign=S.createSign;q.Sign=S.Sign;q.createVerify=S.createVerify;q.Verify=S.Verify;q.createECDH=A(252);S=A(259);q.publicEncrypt=S.publicEncrypt;q.privateEncrypt=S.privateEncrypt;\nq.publicDecrypt=S.publicDecrypt;q.privateDecrypt=S.privateDecrypt;A=A(260);q.randomFill=A.randomFill;q.randomFillSync=A.randomFillSync;q.createCredentials=function(){throw Error(\"sorry, createCredentials is not implemented yet\\nwe accept pull requests\\nhttps://github.com/crypto-browserify/crypto-browserify\");};q.constants={DH_CHECK_P_NOT_SAFE_PRIME:2,DH_CHECK_P_NOT_PRIME:1,DH_UNABLE_TO_CHECK_GENERATOR:4,DH_NOT_SUITABLE_GENERATOR:8,NPN_ENABLED:1,ALPN_ENABLED:1,RSA_PKCS1_PADDING:1,RSA_SSLV23_PADDING:2,\nRSA_NO_PADDING:3,RSA_PKCS1_OAEP_PADDING:4,RSA_X931_PADDING:5,RSA_PKCS1_PSS_PADDING:6,POINT_CONVERSION_COMPRESSED:2,POINT_CONVERSION_UNCOMPRESSED:4,POINT_CONVERSION_HYBRID:6}}","~:source","shadow$provide[261] = function(global,require,module,exports) {\n'use strict'\n\nexports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes')\nexports.createHash = exports.Hash = require('create-hash')\nexports.createHmac = exports.Hmac = require('create-hmac')\n\nvar algos = require('browserify-sign/algos')\nvar algoKeys = Object.keys(algos)\nvar hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys)\nexports.getHashes = function () {\n  return hashes\n}\n\nvar p = require('pbkdf2')\nexports.pbkdf2 = p.pbkdf2\nexports.pbkdf2Sync = p.pbkdf2Sync\n\nvar aes = require('browserify-cipher')\n\nexports.Cipher = aes.Cipher\nexports.createCipher = aes.createCipher\nexports.Cipheriv = aes.Cipheriv\nexports.createCipheriv = aes.createCipheriv\nexports.Decipher = aes.Decipher\nexports.createDecipher = aes.createDecipher\nexports.Decipheriv = aes.Decipheriv\nexports.createDecipheriv = aes.createDecipheriv\nexports.getCiphers = aes.getCiphers\nexports.listCiphers = aes.listCiphers\n\nvar dh = require('diffie-hellman')\n\nexports.DiffieHellmanGroup = dh.DiffieHellmanGroup\nexports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup\nexports.getDiffieHellman = dh.getDiffieHellman\nexports.createDiffieHellman = dh.createDiffieHellman\nexports.DiffieHellman = dh.DiffieHellman\n\nvar sign = require('browserify-sign')\n\nexports.createSign = sign.createSign\nexports.Sign = sign.Sign\nexports.createVerify = sign.createVerify\nexports.Verify = sign.Verify\n\nexports.createECDH = require('create-ecdh')\n\nvar publicEncrypt = require('public-encrypt')\n\nexports.publicEncrypt = publicEncrypt.publicEncrypt\nexports.privateEncrypt = publicEncrypt.privateEncrypt\nexports.publicDecrypt = publicEncrypt.publicDecrypt\nexports.privateDecrypt = publicEncrypt.privateDecrypt\n\n// the least I can do is make error messages for the rest of the node.js/crypto api.\n// ;[\n//   'createCredentials'\n// ].forEach(function (name) {\n//   exports[name] = function () {\n//     throw new Error([\n//       'sorry, ' + name + ' is not implemented yet',\n//       'we accept pull requests',\n//       'https://github.com/crypto-browserify/crypto-browserify'\n//     ].join('\\n'))\n//   }\n// })\n\nvar rf = require('randomfill')\n\nexports.randomFill = rf.randomFill\nexports.randomFillSync = rf.randomFillSync\n\nexports.createCredentials = function () {\n  throw new Error([\n    'sorry, createCredentials is not implemented yet',\n    'we accept pull requests',\n    'https://github.com/crypto-browserify/crypto-browserify'\n  ].join('\\n'))\n}\n\nexports.constants = {\n  'DH_CHECK_P_NOT_SAFE_PRIME': 2,\n  'DH_CHECK_P_NOT_PRIME': 1,\n  'DH_UNABLE_TO_CHECK_GENERATOR': 4,\n  'DH_NOT_SUITABLE_GENERATOR': 8,\n  'NPN_ENABLED': 1,\n  'ALPN_ENABLED': 1,\n  'RSA_PKCS1_PADDING': 1,\n  'RSA_SSLV23_PADDING': 2,\n  'RSA_NO_PADDING': 3,\n  'RSA_PKCS1_OAEP_PADDING': 4,\n  'RSA_X931_PADDING': 5,\n  'RSA_PKCS1_PSS_PADDING': 6,\n  'POINT_CONVERSION_COMPRESSED': 2,\n  'POINT_CONVERSION_UNCOMPRESSED': 4,\n  'POINT_CONVERSION_HYBRID': 6\n}\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$public_encrypt$browser","~$module$node_modules$browserify_cipher$browser","~$module$node_modules$create_hmac$browser","~$module$node_modules$browserify_sign$algos","~$module$node_modules$create_hash$browser","~$module$node_modules$pbkdf2$browser","~$shadow.js","~$module$node_modules$randombytes$browser","~$module$node_modules$diffie_hellman$browser","~$module$node_modules$browserify_sign$browser$index","~$module$node_modules$create_ecdh$browser","~$module$node_modules$randomfill$browser"]],"~:properties",["^5",["constants","createCipheriv","privateDecrypt","createCredentials","privateEncrypt","pseudoRandomBytes","Hmac","listCiphers","createHmac","Cipher","createECDH","prng","randomFillSync","Cipheriv","publicEncrypt","getDiffieHellman","Hash","rng","createDiffieHellman","createDecipher","createCipher","createVerify","Sign","DiffieHellman","DiffieHellmanGroup","Verify","getHashes","Decipher","publicDecrypt","Decipheriv","createSign","pbkdf2","randomFill","randomBytes","createDecipheriv","pbkdf2Sync","createDiffieHellmanGroup","getCiphers","createHash"]],"~:compiled-at",1695041440877,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$crypto_browserify$index.js\",\n\"lineCount\":4,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/crypto-browserify/index.js\"],\n\"sourcesContent\":[\"shadow$provide[261] = function(global,require,module,exports) {\\n'use strict'\\n\\nexports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes')\\nexports.createHash = exports.Hash = require('create-hash')\\nexports.createHmac = exports.Hmac = require('create-hmac')\\n\\nvar algos = require('browserify-sign/algos')\\nvar algoKeys = Object.keys(algos)\\nvar hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys)\\nexports.getHashes = function () {\\n  return hashes\\n}\\n\\nvar p = require('pbkdf2')\\nexports.pbkdf2 = p.pbkdf2\\nexports.pbkdf2Sync = p.pbkdf2Sync\\n\\nvar aes = require('browserify-cipher')\\n\\nexports.Cipher = aes.Cipher\\nexports.createCipher = aes.createCipher\\nexports.Cipheriv = aes.Cipheriv\\nexports.createCipheriv = aes.createCipheriv\\nexports.Decipher = aes.Decipher\\nexports.createDecipher = aes.createDecipher\\nexports.Decipheriv = aes.Decipheriv\\nexports.createDecipheriv = aes.createDecipheriv\\nexports.getCiphers = aes.getCiphers\\nexports.listCiphers = aes.listCiphers\\n\\nvar dh = require('diffie-hellman')\\n\\nexports.DiffieHellmanGroup = dh.DiffieHellmanGroup\\nexports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup\\nexports.getDiffieHellman = dh.getDiffieHellman\\nexports.createDiffieHellman = dh.createDiffieHellman\\nexports.DiffieHellman = dh.DiffieHellman\\n\\nvar sign = require('browserify-sign')\\n\\nexports.createSign = sign.createSign\\nexports.Sign = sign.Sign\\nexports.createVerify = sign.createVerify\\nexports.Verify = sign.Verify\\n\\nexports.createECDH = require('create-ecdh')\\n\\nvar publicEncrypt = require('public-encrypt')\\n\\nexports.publicEncrypt = publicEncrypt.publicEncrypt\\nexports.privateEncrypt = publicEncrypt.privateEncrypt\\nexports.publicDecrypt = publicEncrypt.publicDecrypt\\nexports.privateDecrypt = publicEncrypt.privateDecrypt\\n\\n// the least I can do is make error messages for the rest of the node.js/crypto api.\\n// ;[\\n//   'createCredentials'\\n// ].forEach(function (name) {\\n//   exports[name] = function () {\\n//     throw new Error([\\n//       'sorry, ' + name + ' is not implemented yet',\\n//       'we accept pull requests',\\n//       'https://github.com/crypto-browserify/crypto-browserify'\\n//     ].join('\\\\n'))\\n//   }\\n// })\\n\\nvar rf = require('randomfill')\\n\\nexports.randomFill = rf.randomFill\\nexports.randomFillSync = rf.randomFillSync\\n\\nexports.createCredentials = function () {\\n  throw new Error([\\n    'sorry, createCredentials is not implemented yet',\\n    'we accept pull requests',\\n    'https://github.com/crypto-browserify/crypto-browserify'\\n  ].join('\\\\n'))\\n}\\n\\nexports.constants = {\\n  'DH_CHECK_P_NOT_SAFE_PRIME': 2,\\n  'DH_CHECK_P_NOT_PRIME': 1,\\n  'DH_UNABLE_TO_CHECK_GENERATOR': 4,\\n  'DH_NOT_SUITABLE_GENERATOR': 8,\\n  'NPN_ENABLED': 1,\\n  'ALPN_ENABLED': 1,\\n  'RSA_PKCS1_PADDING': 1,\\n  'RSA_SSLV23_PADDING': 2,\\n  'RSA_NO_PADDING': 3,\\n  'RSA_PKCS1_OAEP_PADDING': 4,\\n  'RSA_X931_PADDING': 5,\\n  'RSA_PKCS1_PSS_PADDING': 6,\\n  'POINT_CONVERSION_COMPRESSED': 2,\\n  'POINT_CONVERSION_UNCOMPRESSED': 4,\\n  'POINT_CONVERSION_HYBRID': 6\\n}\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"randomBytes\",\"rng\",\"pseudoRandomBytes\",\"prng\",\"createHash\",\"Hash\",\"createHmac\",\"Hmac\",\"algos\",\"algoKeys\",\"Object\",\"keys\",\"hashes\",\"concat\",\"getHashes\",\"exports.getHashes\",\"p\",\"pbkdf2\",\"pbkdf2Sync\",\"aes\",\"Cipher\",\"createCipher\",\"Cipheriv\",\"createCipheriv\",\"Decipher\",\"createDecipher\",\"Decipheriv\",\"createDecipheriv\",\"getCiphers\",\"listCiphers\",\"dh\",\"DiffieHellmanGroup\",\"createDiffieHellmanGroup\",\"getDiffieHellman\",\"createDiffieHellman\",\"DiffieHellman\",\"sign\",\"createSign\",\"Sign\",\"createVerify\",\"Verify\",\"createECDH\",\"publicEncrypt\",\"privateEncrypt\",\"publicDecrypt\",\"privateDecrypt\",\"rf\",\"randomFill\",\"randomFillSync\",\"createCredentials\",\"exports.createCredentials\",\"Error\",\"constants\"]\n}\n"]