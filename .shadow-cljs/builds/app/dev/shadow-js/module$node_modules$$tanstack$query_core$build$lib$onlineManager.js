["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@tanstack/query-core/build/lib/onlineManager.js"],"~:js","shadow$provide.module$node_modules$$tanstack$query_core$build$lib$onlineManager=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});global=require(\"module$node_modules$$tanstack$query_core$build$lib$subscribable\");var utils=require(\"module$node_modules$$tanstack$query_core$build$lib$utils\");const onlineEvents=[\"online\",\"offline\"];class OnlineManager extends global.Subscribable{constructor(){super();this.setup=onOnline=>{if(!utils.isServer&&window.addEventListener){const listener=\n()=>onOnline();onlineEvents.forEach(event=>{window.addEventListener(event,listener,!1)});return()=>{onlineEvents.forEach(event=>{window.removeEventListener(event,listener)})}}}}onSubscribe(){this.cleanup||this.setEventListener(this.setup)}onUnsubscribe(){if(!this.hasListeners()){var _this$cleanup;null==(_this$cleanup=this.cleanup)?void 0:_this$cleanup.call(this);this.cleanup=void 0}}setEventListener(setup){var _this$cleanup2;this.setup=setup;null==(_this$cleanup2=this.cleanup)?void 0:_this$cleanup2.call(this);\nthis.cleanup=setup(online=>{if(\"boolean\"===typeof online)this.setOnline(online);else this.onOnline()})}setOnline(online){this.online!==online&&(this.online=online,this.onOnline())}onOnline(){this.listeners.forEach(({listener})=>{listener()})}isOnline(){return\"boolean\"===typeof this.online?this.online:\"undefined\"===typeof navigator||\"undefined\"===typeof navigator.onLine?!0:navigator.onLine}}require=new OnlineManager;exports.OnlineManager=OnlineManager;exports.onlineManager=require}","~:source","shadow$provide[\"module$node_modules$$tanstack$query_core$build$lib$onlineManager\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar subscribable = require('./subscribable.js');\nvar utils = require('./utils.js');\n\nconst onlineEvents = ['online', 'offline'];\nclass OnlineManager extends subscribable.Subscribable {\n  constructor() {\n    super();\n\n    this.setup = onOnline => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!utils.isServer && window.addEventListener) {\n        const listener = () => onOnline(); // Listen to online\n\n\n        onlineEvents.forEach(event => {\n          window.addEventListener(event, listener, false);\n        });\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          onlineEvents.forEach(event => {\n            window.removeEventListener(event, listener);\n          });\n        };\n      }\n\n      return;\n    };\n  }\n\n  onSubscribe() {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup);\n    }\n  }\n\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      var _this$cleanup;\n\n      (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);\n      this.cleanup = undefined;\n    }\n  }\n\n  setEventListener(setup) {\n    var _this$cleanup2;\n\n    this.setup = setup;\n    (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);\n    this.cleanup = setup(online => {\n      if (typeof online === 'boolean') {\n        this.setOnline(online);\n      } else {\n        this.onOnline();\n      }\n    });\n  }\n\n  setOnline(online) {\n    const changed = this.online !== online;\n\n    if (changed) {\n      this.online = online;\n      this.onOnline();\n    }\n  }\n\n  onOnline() {\n    this.listeners.forEach(({\n      listener\n    }) => {\n      listener();\n    });\n  }\n\n  isOnline() {\n    if (typeof this.online === 'boolean') {\n      return this.online;\n    }\n\n    if (typeof navigator === 'undefined' || typeof navigator.onLine === 'undefined') {\n      return true;\n    }\n\n    return navigator.onLine;\n  }\n\n}\nconst onlineManager = new OnlineManager();\n\nexports.OnlineManager = OnlineManager;\nexports.onlineManager = onlineManager;\n//# sourceMappingURL=onlineManager.js.map\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$$tanstack$query_core$build$lib$subscribable","~$module$node_modules$$tanstack$query_core$build$lib$utils"]],"~:properties",["^5",["cleanup","online","__esModule","value","setup","onlineManager","OnlineManager"]],"~:compiled-at",1695111489919,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$tanstack$query_core$build$lib$onlineManager.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAA,gEAAA,CAAqF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG7HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CAEIC,OAAAA,CAAeN,OAAA,CAAQ,iEAAR,CACnB,KAAIO,MAAQP,OAAA,CAAQ,0DAAR,CAEZ,OAAMQ,aAAe,CAAC,QAAD,CAAW,SAAX,CACrB,MAAMC,cAAN,QAA4BH,OAAaI,CAAAA,YAAzC,CACEC,WAAW,EAAG,CACZ,KAAA,EAEA,KAAKC,CAAAA,KAAL,CAAaC,QAAAC,EAAY,CAGvB,GAAI,CAACP,KAAMQ,CAAAA,QAAX,EAAuBC,MAAOC,CAAAA,gBAA9B,CAAgD,CAC9C,MAAMC;AAAW,EAAAA,EAAML,QAAA,EAGvBL,aAAaW,CAAAA,OAAb,CAAqBC,KAAA,EAAS,CAC5BJ,MAAOC,CAAAA,gBAAP,CAAwBG,KAAxB,CAA+BF,QAA/B,CAAyC,CAAA,CAAzC,CAD4B,CAA9B,CAGA,OAAO,EAAA,EAAM,CAEXV,YAAaW,CAAAA,OAAb,CAAqBC,KAAA,EAAS,CAC5BJ,MAAOK,CAAAA,mBAAP,CAA2BD,KAA3B,CAAkCF,QAAlC,CAD4B,CAA9B,CAFW,CAPiC,CAHzB,CAHb,CAyBdI,WAAW,EAAG,CACP,IAAKC,CAAAA,OAAV,EACE,IAAKC,CAAAA,gBAAL,CAAsB,IAAKZ,CAAAA,KAA3B,CAFU,CAMda,aAAa,EAAG,CACd,GAAI,CAAC,IAAKC,CAAAA,YAAL,EAAL,CAA0B,CACxB,IAAIC,aAE8B,KAAlC,GAACA,aAAD,CAAiB,IAAKJ,CAAAA,OAAtB,EAAyC,IAAK,EAA9C,CAAkDI,aAAcC,CAAAA,IAAd,CAAmB,IAAnB,CAClD,KAAKL,CAAAA,OAAL,CAAeM,IAAAA,EAJS,CADZ,CAShBL,gBAAgB,CAACZ,KAAD,CAAQ,CACtB,IAAIkB,cAEJ,KAAKlB,CAAAA,KAAL,CAAaA,KACsB,KAAnC,GAACkB,cAAD,CAAkB,IAAKP,CAAAA,OAAvB,EAA0C,IAAK,EAA/C,CAAmDO,cAAeF,CAAAA,IAAf,CAAoB,IAApB,CACnD;IAAKL,CAAAA,OAAL,CAAeX,KAAA,CAAMmB,MAAA,EAAU,CAC7B,GAAsB,SAAtB,GAAI,MAAOA,OAAX,CACE,IAAKC,CAAAA,SAAL,CAAeD,MAAf,CADF,KAGE,KAAKlB,CAAAA,QAAL,EAJ2B,CAAhB,CALO,CAcxBmB,SAAS,CAACD,MAAD,CAAS,CACA,IAAKA,CAAAA,MAErB,GAFgCA,MAEhC,GACE,IAAKA,CAAAA,MACL,CADcA,MACd,CAAA,IAAKlB,CAAAA,QAAL,EAFF,CAHgB,CASlBA,QAAQ,EAAG,CACT,IAAKoB,CAAAA,SAAUd,CAAAA,OAAf,CAAuB,CAAC,CACtBD,QADsB,CAAD,CAAA,EAEjB,CACJA,QAAA,EADI,CAFN,CADS,CAQXgB,QAAQ,EAAG,CACT,MAA2B,SAA3B,GAAI,MAAO,KAAKH,CAAAA,MAAhB,CACS,IAAKA,CAAAA,MADd,CAIyB,WAAzB,GAAI,MAAOI,UAAX,EAAoE,WAApE,GAAwC,MAAOA,UAAUC,CAAAA,MAAzD,CACS,CAAA,CADT,CAIOD,SAAUC,CAAAA,MATR,CAxEb,CAqFMC,OAAAA,CAAgB,IAAI5B,aAE1BP,QAAQO,CAAAA,aAAR,CAAwBA,aACxBP,QAAQmC,CAAAA,aAAR,CAAwBA,OAjGqG;\",\n\"sources\":[\"node_modules/@tanstack/query-core/build/lib/onlineManager.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$tanstack$query_core$build$lib$onlineManager\\\"] = function(global,require,module,exports) {\\n'use strict';\\n\\nObject.defineProperty(exports, '__esModule', { value: true });\\n\\nvar subscribable = require('./subscribable.js');\\nvar utils = require('./utils.js');\\n\\nconst onlineEvents = ['online', 'offline'];\\nclass OnlineManager extends subscribable.Subscribable {\\n  constructor() {\\n    super();\\n\\n    this.setup = onOnline => {\\n      // addEventListener does not exist in React Native, but window does\\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\\n      if (!utils.isServer && window.addEventListener) {\\n        const listener = () => onOnline(); // Listen to online\\n\\n\\n        onlineEvents.forEach(event => {\\n          window.addEventListener(event, listener, false);\\n        });\\n        return () => {\\n          // Be sure to unsubscribe if a new handler is set\\n          onlineEvents.forEach(event => {\\n            window.removeEventListener(event, listener);\\n          });\\n        };\\n      }\\n\\n      return;\\n    };\\n  }\\n\\n  onSubscribe() {\\n    if (!this.cleanup) {\\n      this.setEventListener(this.setup);\\n    }\\n  }\\n\\n  onUnsubscribe() {\\n    if (!this.hasListeners()) {\\n      var _this$cleanup;\\n\\n      (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);\\n      this.cleanup = undefined;\\n    }\\n  }\\n\\n  setEventListener(setup) {\\n    var _this$cleanup2;\\n\\n    this.setup = setup;\\n    (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);\\n    this.cleanup = setup(online => {\\n      if (typeof online === 'boolean') {\\n        this.setOnline(online);\\n      } else {\\n        this.onOnline();\\n      }\\n    });\\n  }\\n\\n  setOnline(online) {\\n    const changed = this.online !== online;\\n\\n    if (changed) {\\n      this.online = online;\\n      this.onOnline();\\n    }\\n  }\\n\\n  onOnline() {\\n    this.listeners.forEach(({\\n      listener\\n    }) => {\\n      listener();\\n    });\\n  }\\n\\n  isOnline() {\\n    if (typeof this.online === 'boolean') {\\n      return this.online;\\n    }\\n\\n    if (typeof navigator === 'undefined' || typeof navigator.onLine === 'undefined') {\\n      return true;\\n    }\\n\\n    return navigator.onLine;\\n  }\\n\\n}\\nconst onlineManager = new OnlineManager();\\n\\nexports.OnlineManager = OnlineManager;\\nexports.onlineManager = onlineManager;\\n//# sourceMappingURL=onlineManager.js.map\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"subscribable\",\"utils\",\"onlineEvents\",\"OnlineManager\",\"Subscribable\",\"constructor\",\"setup\",\"onOnline\",\"this.setup\",\"isServer\",\"window\",\"addEventListener\",\"listener\",\"forEach\",\"event\",\"removeEventListener\",\"onSubscribe\",\"cleanup\",\"setEventListener\",\"onUnsubscribe\",\"hasListeners\",\"_this$cleanup\",\"call\",\"undefined\",\"_this$cleanup2\",\"online\",\"setOnline\",\"listeners\",\"isOnline\",\"navigator\",\"onLine\",\"onlineManager\"]\n}\n"]