{
"version":3,
"file":"module$node_modules$viem$_cjs$actions$public$waitForTransactionReceipt.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/viem/_cjs/actions/public/waitForTransactionReceipt.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$viem$_cjs$actions$public$waitForTransactionReceipt\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.waitForTransactionReceipt = void 0;\nconst transaction_js_1 = require(\"../../errors/transaction.js\");\nconst observe_js_1 = require(\"../../utils/observe.js\");\nconst withRetry_js_1 = require(\"../../utils/promise/withRetry.js\");\nconst stringify_js_1 = require(\"../../utils/stringify.js\");\nconst getBlock_js_1 = require(\"./getBlock.js\");\nconst getTransaction_js_1 = require(\"./getTransaction.js\");\nconst getTransactionReceipt_js_1 = require(\"./getTransactionReceipt.js\");\nconst watchBlockNumber_js_1 = require(\"./watchBlockNumber.js\");\nasync function waitForTransactionReceipt(client, { confirmations = 1, hash, onReplaced, pollingInterval = client.pollingInterval, timeout, }) {\n    const observerId = (0, stringify_js_1.stringify)(['waitForTransactionReceipt', client.uid, hash]);\n    let transaction;\n    let replacedTransaction;\n    let receipt;\n    let retrying = false;\n    return new Promise((resolve, reject) => {\n        if (timeout)\n            setTimeout(() => reject(new transaction_js_1.WaitForTransactionReceiptTimeoutError({ hash })), timeout);\n        const _unobserve = (0, observe_js_1.observe)(observerId, { onReplaced, resolve, reject }, (emit) => {\n            const _unwatch = (0, watchBlockNumber_js_1.watchBlockNumber)(client, {\n                emitMissed: true,\n                emitOnBegin: true,\n                poll: true,\n                pollingInterval,\n                async onBlockNumber(blockNumber_) {\n                    if (retrying)\n                        return;\n                    let blockNumber = blockNumber_;\n                    const done = (fn) => {\n                        _unwatch();\n                        fn();\n                        _unobserve();\n                    };\n                    try {\n                        if (receipt) {\n                            if (confirmations > 1 &&\n                                (!receipt.blockNumber ||\n                                    blockNumber - receipt.blockNumber + 1n < confirmations))\n                                return;\n                            done(() => emit.resolve(receipt));\n                            return;\n                        }\n                        if (!transaction) {\n                            retrying = true;\n                            await (0, withRetry_js_1.withRetry)(async () => {\n                                transaction = await (0, getTransaction_js_1.getTransaction)(client, { hash });\n                                if (transaction.blockNumber)\n                                    blockNumber = transaction.blockNumber;\n                            }, {\n                                delay: ({ count }) => ~~(1 << count) * 200,\n                                retryCount: 6,\n                            });\n                            retrying = false;\n                        }\n                        receipt = await (0, getTransactionReceipt_js_1.getTransactionReceipt)(client, { hash });\n                        if (confirmations > 1 &&\n                            (!receipt.blockNumber ||\n                                blockNumber - receipt.blockNumber + 1n < confirmations))\n                            return;\n                        done(() => emit.resolve(receipt));\n                    }\n                    catch (err) {\n                        if (transaction &&\n                            (err instanceof transaction_js_1.TransactionNotFoundError ||\n                                err instanceof transaction_js_1.TransactionReceiptNotFoundError)) {\n                            try {\n                                replacedTransaction = transaction;\n                                const block = await (0, getBlock_js_1.getBlock)(client, {\n                                    blockNumber,\n                                    includeTransactions: true,\n                                });\n                                const replacementTransaction = block.transactions.find(({ from, nonce }) => from === replacedTransaction.from &&\n                                    nonce === replacedTransaction.nonce);\n                                if (!replacementTransaction)\n                                    return;\n                                receipt = await (0, getTransactionReceipt_js_1.getTransactionReceipt)(client, {\n                                    hash: replacementTransaction.hash,\n                                });\n                                if (confirmations > 1 &&\n                                    (!receipt.blockNumber ||\n                                        blockNumber - receipt.blockNumber + 1n < confirmations))\n                                    return;\n                                let reason = 'replaced';\n                                if (replacementTransaction.to === replacedTransaction.to &&\n                                    replacementTransaction.value === replacedTransaction.value) {\n                                    reason = 'repriced';\n                                }\n                                else if (replacementTransaction.from === replacementTransaction.to &&\n                                    replacementTransaction.value === 0n) {\n                                    reason = 'cancelled';\n                                }\n                                done(() => {\n                                    emit.onReplaced?.({\n                                        reason,\n                                        replacedTransaction: replacedTransaction,\n                                        transaction: replacementTransaction,\n                                        transactionReceipt: receipt,\n                                    });\n                                    emit.resolve(receipt);\n                                });\n                            }\n                            catch (err_) {\n                                done(() => emit.reject(err_));\n                            }\n                        }\n                        else {\n                            done(() => emit.reject(err));\n                        }\n                    }\n                },\n            });\n        });\n    });\n}\nexports.waitForTransactionReceipt = waitForTransactionReceipt;\n//# sourceMappingURL=waitForTransactionReceipt.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","waitForTransactionReceipt","transaction_js_1","observe_js_1","withRetry_js_1","stringify_js_1","getBlock_js_1","getTransaction_js_1","getTransactionReceipt_js_1","watchBlockNumber_js_1","client","confirmations","hash","onReplaced","pollingInterval","timeout","observerId","stringify","uid","transaction","replacedTransaction","receipt","retrying","Promise","resolve","reject","setTimeout","WaitForTransactionReceiptTimeoutError","_unobserve","observe","emit","_unwatch","watchBlockNumber","emitMissed","emitOnBegin","poll","onBlockNumber","blockNumber_","blockNumber","done","fn","withRetry","getTransaction","delay","count","retryCount","getTransactionReceipt","err","TransactionNotFoundError","TransactionReceiptNotFoundError","replacementTransaction","transactions","block","getBlock","includeTransactions","find","from","nonce","reason","to","transactionReceipt","err_"]
}
