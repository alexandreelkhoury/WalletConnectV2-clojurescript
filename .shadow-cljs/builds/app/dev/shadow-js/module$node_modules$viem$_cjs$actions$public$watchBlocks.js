["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/viem/_cjs/actions/public/watchBlocks.js"],"~:js","shadow$provide.module$node_modules$viem$_cjs$actions$public$watchBlocks=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.watchBlocks=void 0;const block_js_1=require(\"module$node_modules$viem$_cjs$utils$formatters$block\"),observe_js_1=require(\"module$node_modules$viem$_cjs$utils$observe\"),poll_js_1=require(\"module$node_modules$viem$_cjs$utils$poll\"),stringify_js_1=require(\"module$node_modules$viem$_cjs$utils$stringify\"),getBlock_js_1=require(\"module$node_modules$viem$_cjs$actions$public$getBlock\");\nexports.watchBlocks=function(client,{blockTag=\"latest\",emitMissed=!1,emitOnBegin=!1,onBlock,onError,includeTransactions:includeTransactions_,poll:poll_,pollingInterval=client.pollingInterval}){const includeTransactions=includeTransactions_??!1;let prevBlock;includeTransactions_=()=>{const observerId=(0,stringify_js_1.stringify)([\"watchBlocks\",client.uid,emitMissed,emitOnBegin,includeTransactions,pollingInterval]);return(0,observe_js_1.observe)(observerId,{onBlock,onError},emit=>(0,poll_js_1.poll)(async()=>\n{try{const block$jscomp$0=await (0,getBlock_js_1.getBlock)(client,{blockTag,includeTransactions});if(block$jscomp$0.number&&prevBlock?.number){if(block$jscomp$0.number===prevBlock.number)return;if(1<block$jscomp$0.number-prevBlock.number&&emitMissed)for(let i=prevBlock?.number+1n;i<block$jscomp$0.number;i++){const block=await (0,getBlock_js_1.getBlock)(client,{blockNumber:i,includeTransactions});emit.onBlock(block,prevBlock);prevBlock=block}}if(!prevBlock?.number||\"pending\"===blockTag&&!block$jscomp$0?.number||\nblock$jscomp$0.number&&block$jscomp$0.number>prevBlock.number)emit.onBlock(block$jscomp$0,prevBlock),prevBlock=block$jscomp$0}catch(err){emit.onError?.(err)}},{emitOnBegin,interval:pollingInterval}))};const subscribeBlocks=()=>{let active=!0,unsubscribe=()=>active=!1;(async()=>{try{const {unsubscribe:unsubscribe_}=await client.transport.subscribe({params:[\"newHeads\"],onData(data){active&&(data=(client.chain?.formatters?.block?.format||block_js_1.formatBlock)(data.result),onBlock(data,prevBlock),prevBlock=\ndata)},onError(error){onError?.(error)}});unsubscribe=unsubscribe_;active||unsubscribe()}catch(err){onError?.(err)}})();return unsubscribe};return(\"undefined\"!==typeof poll_?poll_:\"webSocket\"!==client.transport.type)?includeTransactions_():subscribeBlocks()}}","~:source","shadow$provide[\"module$node_modules$viem$_cjs$actions$public$watchBlocks\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.watchBlocks = void 0;\nconst block_js_1 = require(\"../../utils/formatters/block.js\");\nconst observe_js_1 = require(\"../../utils/observe.js\");\nconst poll_js_1 = require(\"../../utils/poll.js\");\nconst stringify_js_1 = require(\"../../utils/stringify.js\");\nconst getBlock_js_1 = require(\"./getBlock.js\");\nfunction watchBlocks(client, { blockTag = 'latest', emitMissed = false, emitOnBegin = false, onBlock, onError, includeTransactions: includeTransactions_, poll: poll_, pollingInterval = client.pollingInterval, }) {\n    const enablePolling = typeof poll_ !== 'undefined' ? poll_ : client.transport.type !== 'webSocket';\n    const includeTransactions = includeTransactions_ ?? false;\n    let prevBlock;\n    const pollBlocks = () => {\n        const observerId = (0, stringify_js_1.stringify)([\n            'watchBlocks',\n            client.uid,\n            emitMissed,\n            emitOnBegin,\n            includeTransactions,\n            pollingInterval,\n        ]);\n        return (0, observe_js_1.observe)(observerId, { onBlock, onError }, (emit) => (0, poll_js_1.poll)(async () => {\n            try {\n                const block = await (0, getBlock_js_1.getBlock)(client, {\n                    blockTag,\n                    includeTransactions,\n                });\n                if (block.number && prevBlock?.number) {\n                    if (block.number === prevBlock.number)\n                        return;\n                    if (block.number - prevBlock.number > 1 && emitMissed) {\n                        for (let i = prevBlock?.number + 1n; i < block.number; i++) {\n                            const block = await (0, getBlock_js_1.getBlock)(client, {\n                                blockNumber: i,\n                                includeTransactions,\n                            });\n                            emit.onBlock(block, prevBlock);\n                            prevBlock = block;\n                        }\n                    }\n                }\n                if (!prevBlock?.number ||\n                    (blockTag === 'pending' && !block?.number) ||\n                    (block.number && block.number > prevBlock.number)) {\n                    emit.onBlock(block, prevBlock);\n                    prevBlock = block;\n                }\n            }\n            catch (err) {\n                emit.onError?.(err);\n            }\n        }, {\n            emitOnBegin,\n            interval: pollingInterval,\n        }));\n    };\n    const subscribeBlocks = () => {\n        let active = true;\n        let unsubscribe = () => (active = false);\n        (async () => {\n            try {\n                const { unsubscribe: unsubscribe_ } = await client.transport.subscribe({\n                    params: ['newHeads'],\n                    onData(data) {\n                        if (!active)\n                            return;\n                        const format = client.chain?.formatters?.block?.format || block_js_1.formatBlock;\n                        const block = format(data.result);\n                        onBlock(block, prevBlock);\n                        prevBlock = block;\n                    },\n                    onError(error) {\n                        onError?.(error);\n                    },\n                });\n                unsubscribe = unsubscribe_;\n                if (!active)\n                    unsubscribe();\n            }\n            catch (err) {\n                onError?.(err);\n            }\n        })();\n        return unsubscribe;\n    };\n    return enablePolling ? pollBlocks() : subscribeBlocks();\n}\nexports.watchBlocks = watchBlocks;\n//# sourceMappingURL=watchBlocks.js.map\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$viem$_cjs$actions$public$getBlock","~$shadow.js","~$module$node_modules$viem$_cjs$utils$stringify","~$module$node_modules$viem$_cjs$utils$observe","~$module$node_modules$viem$_cjs$utils$formatters$block","~$module$node_modules$viem$_cjs$utils$poll"]],"~:properties",["^5",["params","__esModule","onError","blockNumber","emitOnBegin","value","interval","onBlock","includeTransactions","watchBlocks","blockTag"]],"~:compiled-at",1695111490355,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$viem$_cjs$actions$public$watchBlocks.js\",\n\"lineCount\":5,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/viem/_cjs/actions/public/watchBlocks.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$viem$_cjs$actions$public$watchBlocks\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nexports.watchBlocks = void 0;\\nconst block_js_1 = require(\\\"../../utils/formatters/block.js\\\");\\nconst observe_js_1 = require(\\\"../../utils/observe.js\\\");\\nconst poll_js_1 = require(\\\"../../utils/poll.js\\\");\\nconst stringify_js_1 = require(\\\"../../utils/stringify.js\\\");\\nconst getBlock_js_1 = require(\\\"./getBlock.js\\\");\\nfunction watchBlocks(client, { blockTag = 'latest', emitMissed = false, emitOnBegin = false, onBlock, onError, includeTransactions: includeTransactions_, poll: poll_, pollingInterval = client.pollingInterval, }) {\\n    const enablePolling = typeof poll_ !== 'undefined' ? poll_ : client.transport.type !== 'webSocket';\\n    const includeTransactions = includeTransactions_ ?? false;\\n    let prevBlock;\\n    const pollBlocks = () => {\\n        const observerId = (0, stringify_js_1.stringify)([\\n            'watchBlocks',\\n            client.uid,\\n            emitMissed,\\n            emitOnBegin,\\n            includeTransactions,\\n            pollingInterval,\\n        ]);\\n        return (0, observe_js_1.observe)(observerId, { onBlock, onError }, (emit) => (0, poll_js_1.poll)(async () => {\\n            try {\\n                const block = await (0, getBlock_js_1.getBlock)(client, {\\n                    blockTag,\\n                    includeTransactions,\\n                });\\n                if (block.number && prevBlock?.number) {\\n                    if (block.number === prevBlock.number)\\n                        return;\\n                    if (block.number - prevBlock.number > 1 && emitMissed) {\\n                        for (let i = prevBlock?.number + 1n; i < block.number; i++) {\\n                            const block = await (0, getBlock_js_1.getBlock)(client, {\\n                                blockNumber: i,\\n                                includeTransactions,\\n                            });\\n                            emit.onBlock(block, prevBlock);\\n                            prevBlock = block;\\n                        }\\n                    }\\n                }\\n                if (!prevBlock?.number ||\\n                    (blockTag === 'pending' && !block?.number) ||\\n                    (block.number && block.number > prevBlock.number)) {\\n                    emit.onBlock(block, prevBlock);\\n                    prevBlock = block;\\n                }\\n            }\\n            catch (err) {\\n                emit.onError?.(err);\\n            }\\n        }, {\\n            emitOnBegin,\\n            interval: pollingInterval,\\n        }));\\n    };\\n    const subscribeBlocks = () => {\\n        let active = true;\\n        let unsubscribe = () => (active = false);\\n        (async () => {\\n            try {\\n                const { unsubscribe: unsubscribe_ } = await client.transport.subscribe({\\n                    params: ['newHeads'],\\n                    onData(data) {\\n                        if (!active)\\n                            return;\\n                        const format = client.chain?.formatters?.block?.format || block_js_1.formatBlock;\\n                        const block = format(data.result);\\n                        onBlock(block, prevBlock);\\n                        prevBlock = block;\\n                    },\\n                    onError(error) {\\n                        onError?.(error);\\n                    },\\n                });\\n                unsubscribe = unsubscribe_;\\n                if (!active)\\n                    unsubscribe();\\n            }\\n            catch (err) {\\n                onError?.(err);\\n            }\\n        })();\\n        return unsubscribe;\\n    };\\n    return enablePolling ? pollBlocks() : subscribeBlocks();\\n}\\nexports.watchBlocks = watchBlocks;\\n//# sourceMappingURL=watchBlocks.js.map\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"watchBlocks\",\"block_js_1\",\"observe_js_1\",\"poll_js_1\",\"stringify_js_1\",\"getBlock_js_1\",\"client\",\"blockTag\",\"emitMissed\",\"emitOnBegin\",\"onBlock\",\"onError\",\"includeTransactions_\",\"poll_\",\"pollingInterval\",\"includeTransactions\",\"prevBlock\",\"pollBlocks\",\"observerId\",\"stringify\",\"uid\",\"observe\",\"emit\",\"poll\",\"block\",\"getBlock\",\"number\",\"i\",\"blockNumber\",\"err\",\"interval\",\"subscribeBlocks\",\"active\",\"unsubscribe\",\"unsubscribe_\",\"transport\",\"subscribe\",\"params\",\"onData\",\"data\",\"chain\",\"formatters\",\"format\",\"formatBlock\",\"result\",\"error\",\"enablePolling\",\"type\"]\n}\n"]