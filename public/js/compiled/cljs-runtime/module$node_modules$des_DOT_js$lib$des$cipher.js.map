{
"version":3,
"file":"module$node_modules$des_DOT_js$lib$des$cipher.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/des_DOT_js/lib/des/cipher.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$des_DOT_js$lib$des$cipher\"] = function(global,require,module,exports) {\n'use strict';\n\nvar assert = require('minimalistic-assert');\n\nfunction Cipher(options) {\n  this.options = options;\n\n  this.type = this.options.type;\n  this.blockSize = 8;\n  this._init();\n\n  this.buffer = new Array(this.blockSize);\n  this.bufferOff = 0;\n  this.padding = options.padding !== false\n}\nmodule.exports = Cipher;\n\nCipher.prototype._init = function _init() {\n  // Might be overrided\n};\n\nCipher.prototype.update = function update(data) {\n  if (data.length === 0)\n    return [];\n\n  if (this.type === 'decrypt')\n    return this._updateDecrypt(data);\n  else\n    return this._updateEncrypt(data);\n};\n\nCipher.prototype._buffer = function _buffer(data, off) {\n  // Append data to buffer\n  var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);\n  for (var i = 0; i < min; i++)\n    this.buffer[this.bufferOff + i] = data[off + i];\n  this.bufferOff += min;\n\n  // Shift next\n  return min;\n};\n\nCipher.prototype._flushBuffer = function _flushBuffer(out, off) {\n  this._update(this.buffer, 0, out, off);\n  this.bufferOff = 0;\n  return this.blockSize;\n};\n\nCipher.prototype._updateEncrypt = function _updateEncrypt(data) {\n  var inputOff = 0;\n  var outputOff = 0;\n\n  var count = ((this.bufferOff + data.length) / this.blockSize) | 0;\n  var out = new Array(count * this.blockSize);\n\n  if (this.bufferOff !== 0) {\n    inputOff += this._buffer(data, inputOff);\n\n    if (this.bufferOff === this.buffer.length)\n      outputOff += this._flushBuffer(out, outputOff);\n  }\n\n  // Write blocks\n  var max = data.length - ((data.length - inputOff) % this.blockSize);\n  for (; inputOff < max; inputOff += this.blockSize) {\n    this._update(data, inputOff, out, outputOff);\n    outputOff += this.blockSize;\n  }\n\n  // Queue rest\n  for (; inputOff < data.length; inputOff++, this.bufferOff++)\n    this.buffer[this.bufferOff] = data[inputOff];\n\n  return out;\n};\n\nCipher.prototype._updateDecrypt = function _updateDecrypt(data) {\n  var inputOff = 0;\n  var outputOff = 0;\n\n  var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;\n  var out = new Array(count * this.blockSize);\n\n  // TODO(indutny): optimize it, this is far from optimal\n  for (; count > 0; count--) {\n    inputOff += this._buffer(data, inputOff);\n    outputOff += this._flushBuffer(out, outputOff);\n  }\n\n  // Buffer rest of the input\n  inputOff += this._buffer(data, inputOff);\n\n  return out;\n};\n\nCipher.prototype.final = function final(buffer) {\n  var first;\n  if (buffer)\n    first = this.update(buffer);\n\n  var last;\n  if (this.type === 'encrypt')\n    last = this._finalEncrypt();\n  else\n    last = this._finalDecrypt();\n\n  if (first)\n    return first.concat(last);\n  else\n    return last;\n};\n\nCipher.prototype._pad = function _pad(buffer, off) {\n  if (off === 0)\n    return false;\n\n  while (off < buffer.length)\n    buffer[off++] = 0;\n\n  return true;\n};\n\nCipher.prototype._finalEncrypt = function _finalEncrypt() {\n  if (!this._pad(this.buffer, this.bufferOff))\n    return [];\n\n  var out = new Array(this.blockSize);\n  this._update(this.buffer, 0, out, 0);\n  return out;\n};\n\nCipher.prototype._unpad = function _unpad(buffer) {\n  return buffer;\n};\n\nCipher.prototype._finalDecrypt = function _finalDecrypt() {\n  assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');\n  var out = new Array(this.blockSize);\n  this._flushBuffer(out, 0);\n\n  return this._unpad(out);\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","Cipher","options","type","blockSize","_init","buffer","Array","bufferOff","padding","assert","prototype","Cipher.prototype._init","update","Cipher.prototype.update","data","length","_updateDecrypt","_updateEncrypt","_buffer","Cipher.prototype._buffer","off","min","Math","i","_flushBuffer","Cipher.prototype._flushBuffer","out","_update","Cipher.prototype._updateEncrypt","inputOff","outputOff","max","Cipher.prototype._updateDecrypt","count","ceil","final","Cipher.prototype.final","first","last","_finalEncrypt","_finalDecrypt","concat","_pad","Cipher.prototype._pad","Cipher.prototype._finalEncrypt","_unpad","Cipher.prototype._unpad","Cipher.prototype._finalDecrypt","equal"]
}
