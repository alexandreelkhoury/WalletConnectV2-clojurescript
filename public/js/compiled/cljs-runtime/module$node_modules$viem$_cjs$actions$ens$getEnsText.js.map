{
"version":3,
"file":"module$node_modules$viem$_cjs$actions$ens$getEnsText.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,CAAA,oDAAA,CAAyE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAEjHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CACAH,QAAQI,CAAAA,UAAR,CAAqB,IAAK,EAC1B,OAAMC,UAAYP,OAAA,CAAQ,8CAAR,CAAlB,CACMQ,0BAA4BR,OAAA,CAAQ,8DAAR,CADlC,CAEMS,wBAA0BT,OAAA,CAAQ,4DAAR,CAFhC,CAGMU,WAAaV,OAAA,CAAQ,2CAAR,CAHnB;AAIMW,WAAaX,OAAA,CAAQ,oDAAR,CAJnB,CAKMY,YAAcZ,OAAA,CAAQ,gDAAR,CALpB,CAMMa,cAAgBb,OAAA,CAAQ,kDAAR,CANtB,CAOMc,mBAAqBd,OAAA,CAAQ,uDAAR,CAP3B,CAQMe,kBAAoBf,OAAA,CAAQ,2DAAR,CA2C1BE,QAAQI,CAAAA,UAAR,CA1CAA,cAAyB,CAACU,MAAD,CAAS,CAAEC,WAAF,CAAeC,QAAf,CAAyBC,IAAzB,CAA+BC,GAA/B,CAAoC,yBAA0BC,yBAA9D,CAAT,CAAqG,CAE1H,GAAI,CAACC,yBAAL,CAA+B,CAC3B,GAAI,CAACN,MAAOO,CAAAA,KAAZ,CACI,KAAUC,MAAJ,CAAU,oEAAV,CAAN;AACJF,yBAAA,CAA2B,GAAIZ,UAAWe,CAAAA,uBAAf,EAAwC,CAC/DR,WAD+D,CAE/DM,MAAOP,MAAOO,CAAAA,KAFiD,CAG/DG,SAAU,sBAHqD,CAAxC,CAHA,CAS/B,GAAI,CACA,MAAMC,IAAM,MAAM,GAAIZ,iBAAkBa,CAAAA,YAAtB,EAAoCZ,MAApC,CAA4C,CAC1Da,QAASP,yBADiD,CAE1DQ,IAAKvB,SAAUwB,CAAAA,2BAF2C,CAG1DC,aAAc,SAH4C,CAI1DC,KAAM,CACF,GAAItB,UAAWuB,CAAAA,KAAf,EAAsB,GAAIpB,kBAAmBqB,CAAAA,aAAvB,EAAsChB,IAAtC,CAAtB,CADE,CAEF,GAAIV,uBAAwB2B,CAAAA,kBAA5B,EAAgD,CAC5CN,IAAKvB,SAAU8B,CAAAA,eAD6B,CAE5CL,aAAc,MAF8B,CAG5CC,KAAM,CAAC,GAAIpB,aAAcyB,CAAAA,QAAlB,EAA4BnB,IAA5B,CAAD;AAAoCC,GAApC,CAHsC,CAAhD,CAFE,CAJoD,CAY1DH,WAZ0D,CAa1DC,QAb0D,CAA5C,CAelB,IAAe,IAAf,GAAIS,GAAA,CAAI,CAAJ,CAAJ,CACI,MAAO,KACX,OAAMY,OAAS,GAAI/B,yBAA0BgC,CAAAA,oBAA9B,EAAoD,CAC/DV,IAAKvB,SAAU8B,CAAAA,eADgD,CAE/DL,aAAc,MAFiD,CAG/DS,KAAMd,GAAA,CAAI,CAAJ,CAHyD,CAApD,CAKf,OAAkB,EAAX,GAAAY,MAAA,CAAgB,IAAhB,CAAuBA,MAvB9B,CAyBJ,MAAOG,GAAP,CAAY,CACR,GAAI,GAAI9B,WAAY+B,CAAAA,4BAAhB,EAA8CD,GAA9C,CAAmD,SAAnD,CAAJ,CACI,MAAO,KACX,MAAMA,IAAN,CAHQ,CApC8G,CAbb;",
"sources":["node_modules/viem/_cjs/actions/ens/getEnsText.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$viem$_cjs$actions$ens$getEnsText\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getEnsText = void 0;\nconst abis_js_1 = require(\"../../constants/abis.js\");\nconst decodeFunctionResult_js_1 = require(\"../../utils/abi/decodeFunctionResult.js\");\nconst encodeFunctionData_js_1 = require(\"../../utils/abi/encodeFunctionData.js\");\nconst chain_js_1 = require(\"../../utils/chain.js\");\nconst toHex_js_1 = require(\"../../utils/encoding/toHex.js\");\nconst errors_js_1 = require(\"../../utils/ens/errors.js\");\nconst namehash_js_1 = require(\"../../utils/ens/namehash.js\");\nconst packetToBytes_js_1 = require(\"../../utils/ens/packetToBytes.js\");\nconst readContract_js_1 = require(\"../public/readContract.js\");\nasync function getEnsText(client, { blockNumber, blockTag, name, key, universalResolverAddress: universalResolverAddress_, }) {\n    let universalResolverAddress = universalResolverAddress_;\n    if (!universalResolverAddress) {\n        if (!client.chain)\n            throw new Error('client chain not configured. universalResolverAddress is required.');\n        universalResolverAddress = (0, chain_js_1.getChainContractAddress)({\n            blockNumber,\n            chain: client.chain,\n            contract: 'ensUniversalResolver',\n        });\n    }\n    try {\n        const res = await (0, readContract_js_1.readContract)(client, {\n            address: universalResolverAddress,\n            abi: abis_js_1.universalResolverResolveAbi,\n            functionName: 'resolve',\n            args: [\n                (0, toHex_js_1.toHex)((0, packetToBytes_js_1.packetToBytes)(name)),\n                (0, encodeFunctionData_js_1.encodeFunctionData)({\n                    abi: abis_js_1.textResolverAbi,\n                    functionName: 'text',\n                    args: [(0, namehash_js_1.namehash)(name), key],\n                }),\n            ],\n            blockNumber,\n            blockTag,\n        });\n        if (res[0] === '0x')\n            return null;\n        const record = (0, decodeFunctionResult_js_1.decodeFunctionResult)({\n            abi: abis_js_1.textResolverAbi,\n            functionName: 'text',\n            data: res[0],\n        });\n        return record === '' ? null : record;\n    }\n    catch (err) {\n        if ((0, errors_js_1.isNullUniversalResolverError)(err, 'resolve'))\n            return null;\n        throw err;\n    }\n}\nexports.getEnsText = getEnsText;\n//# sourceMappingURL=getEnsText.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","getEnsText","abis_js_1","decodeFunctionResult_js_1","encodeFunctionData_js_1","chain_js_1","toHex_js_1","errors_js_1","namehash_js_1","packetToBytes_js_1","readContract_js_1","client","blockNumber","blockTag","name","key","universalResolverAddress_","universalResolverAddress","chain","Error","getChainContractAddress","contract","res","readContract","address","abi","universalResolverResolveAbi","functionName","args","toHex","packetToBytes","encodeFunctionData","textResolverAbi","namehash","record","decodeFunctionResult","data","err","isNullUniversalResolverError"]
}
